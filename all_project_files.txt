----- File: build.gradle.kts -----

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}

----- End of File -----

----- File: gradlew -----

#!/bin/sh

#
# Copyright © 2015 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"


----- End of File -----

----- File: gradlew.bat -----

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


----- End of File -----

----- File: settings.gradle.kts -----

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    plugins {
        id("com.android.application") version "8.5.2"
        id("org.jetbrains.kotlin.android") version "1.9.24"
        id("org.jetbrains.kotlin.plugin.compose") version "1.9.24"
        id("org.jetbrains.kotlin.kapt") version "1.9.24"
        id("com.google.devtools.ksp") version "1.9.24-1.0.20"
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven("https://jitpack.io")  // Add this for MPAndroidChart
    }
}

rootProject.name = "CSEPracticeApp"
include(":app")

----- End of File -----

----- File: app\build.gradle.kts -----

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android") version "1.9.24"
    id("org.jetbrains.kotlin.kapt") version "1.9.24"
    id("com.google.devtools.ksp") version "1.9.24-1.0.20"
}

android {
    namespace = "com.example.csepractice"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.csepractice"
        minSdk = 26
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"  // Fix for Kotlin 1.9.24
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation("com.github.PhilJay:MPAndroidChart:v3.1.0")
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.6")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6")
    implementation("androidx.activity:activity-compose:1.9.2")
    implementation(platform("androidx.compose:compose-bom:2024.09.03"))
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.room:room-runtime:2.6.1")
    implementation("androidx.datastore:datastore-preferences:1.1.1")  // Alternative to SharedPreferences, but we'll use SharedPrefs here
    ksp("androidx.room:room-compiler:2.6.1")
    implementation("androidx.room:room-ktx:2.6.1")
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation(platform("androidx.compose:compose-bom:2024.09.03"))
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
}

----- End of File -----

----- File: app\src\androidTest\java\com\example\csepractice\ExampleInstrumentedTest.kt -----

package com.example.csepractice

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.csepractice", appContext.packageName)
    }
}

----- End of File -----

----- File: app\src\main\AndroidManifest.xml -----

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CSEPracticeApp">
        <activity
            android:name=".SplashActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.CSEPracticeApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".MainActivity" android:exported="false" />
        <activity android:name=".ChartActivity" android:exported="false" />
        <activity android:name=".SettingsActivity" />
    </application>

</manifest>

----- End of File -----

----- File: app\src\main\assets\questions.json -----

[
  {
    "text": "Identify the synonym of 'eloquent'.",
    "optionA": "Silent",
    "optionB": "Articulate",
    "optionC": "Confused",
    "optionD": "Angry",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Would you like coffee __________ tea?",
    "optionA": "so",
    "optionB": "or",
    "optionC": "but",
    "optionD": "and",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "I like swimming, ______ my sister likes dancing.",
    "optionA": "and",
    "optionB": "or",
    "optionC": "because",
    "optionD": "but",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "The antonym of 'happy' is:",
    "optionA": "Joyful",
    "optionB": "Sad",
    "optionC": "Excited",
    "optionD": "Content",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct spelling: ",
    "optionA": "Recieve",
    "optionB": "Receive",
    "optionC": "Recive",
    "optionD": "Receve",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Complete the analogy: Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence is grammatically correct?",
    "optionA": "He go to school.",
    "optionB": "He goes to school.",
    "optionC": "He going to school.",
    "optionD": "He went to school.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "The word 'fast' can mean:",
    "optionA": "Quick",
    "optionB": "Not eating",
    "optionC": "Both A and B",
    "optionD": "None",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange: The / quick / brown / fox",
    "optionA": "The brown quick fox",
    "optionB": "The quick brown fox",
    "optionC": "Quick the brown fox",
    "optionD": "Brown the quick fox",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main idea of the passage? (Assume a passage)",
    "optionA": "Option A",
    "optionB": "Option B",
    "optionC": "Option C",
    "optionD": "Option D",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which of the following sentences contains an error in subject-verb agreement?",
    "optionA": "The team of players are practicing hard.",
    "optionB": "Each of the students has submitted their assignment.",
    "optionC": "Neither the manager nor the employees is happy with the decision.",
    "optionD": "No error.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct synonym for 'append.'",
    "optionA": "Remove",
    "optionB": "Add",
    "optionC": "Ignore",
    "optionD": "Divide",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In the sentence 'The chef cooked the meal quick,' identify the error.",
    "optionA": "The",
    "optionB": "cooked",
    "optionC": "quick",
    "optionD": "No error.",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange the following sentences to form a coherent paragraph: (1) However, it requires dedication. (2) Studying for exams is essential. (3) In summary, consistent effort pays off. (4) First, create a schedule.",
    "optionA": "2-4-1-3",
    "optionB": "4-2-1-3",
    "optionC": "2-1-4-3",
    "optionD": "1-3-2-4",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the antonym of 'opaque'?",
    "optionA": "Cloudy",
    "optionB": "Clear",
    "optionC": "Thick",
    "optionD": "Dense",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Identify the misspelled word in the sentence: 'The committee will accomodate all requests.'",
    "optionA": "committee",
    "optionB": "will",
    "optionC": "accomodate",
    "optionD": "requests",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct word usage: 'The effect of the new policy _____ immediate.'",
    "optionA": "were",
    "optionB": "was",
    "optionC": "are",
    "optionD": "is being",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In reading comprehension, if a passage states 'The economy is improving, but unemployment remains high,' what is the implied conclusion?",
    "optionA": "Unemployment will decrease soon.",
    "optionB": "Improvement does not solve all issues.",
    "optionC": "The economy is worsening.",
    "optionD": "No conclusion can be drawn.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence demonstrates parallelism?",
    "optionA": "She likes to swim, running, and to hike.",
    "optionB": "She likes swimming, running, and hiking.",
    "optionC": "She likes swim, run, and hiking.",
    "optionD": "She likes to swim, run, and hiking.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the contextual meaning of 'query' in 'Please query the database for updates'?",
    "optionA": "Question",
    "optionB": "Delete",
    "optionC": "Save",
    "optionD": "Ignore",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "2187, 729, 243, 81, 27, 9, ____?",
    "optionA": "6",
    "optionB": "3",
    "optionC": "4",
    "optionD": "2",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "1, 4, 9, 16, 25, 36, 49, 64, ____?",
    "optionA": "81",
    "optionB": "100",
    "optionC": "121",
    "optionD": "144",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "45 increased by what percent of itself gives 90?",
    "optionA": "50%",
    "optionB": "100%",
    "optionC": "200%",
    "optionD": "150%",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "15 is 150% of what number?",
    "optionA": "10",
    "optionB": "20",
    "optionC": "22.5",
    "optionD": "7.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 25% of 80?",
    "optionA": "20",
    "optionB": "25",
    "optionC": "30",
    "optionD": "40",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve: 2 + 3 * 4 - 5",
    "optionA": "9",
    "optionB": "5",
    "optionC": "3",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "The sum of x and 9 is:",
    "optionA": "x-9",
    "optionB": "x*9",
    "optionC": "x+9",
    "optionD": "x/9",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "If 3 apples cost 50 pesos, how much for 12?",
    "optionA": "150",
    "optionB": "200",
    "optionC": "100",
    "optionD": "250",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Find the average of 10, 20, 30.",
    "optionA": "20",
    "optionB": "15",
    "optionC": "25",
    "optionD": "30",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "A plate of special Sisig rice and a bowl of beef noodles costs Php 80. If the bowl of beef noodles costs Php 20 more than the plate of Sisig rice, how much is the bowl of beef noodles?",
    "optionA": "Php 30",
    "optionB": "Php 50",
    "optionC": "Php 60",
    "optionD": "Php 40",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 15% of 200?",
    "optionA": "30",
    "optionB": "25",
    "optionC": "35",
    "optionD": "20",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve for x: 3x + 5 = 20.",
    "optionA": "5",
    "optionB": "6",
    "optionC": "4",
    "optionD": "7",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If a train travels 60 km in 45 minutes, what is its speed in km/h?",
    "optionA": "80",
    "optionB": "90",
    "optionC": "70",
    "optionD": "100",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16?",
    "optionA": "20",
    "optionB": "24",
    "optionC": "32",
    "optionD": "18",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "A store offers a 20% discount on a Php 500 item. What is the final price?",
    "optionA": "Php 400",
    "optionB": "Php 450",
    "optionC": "Php 300",
    "optionD": "Php 350",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve the word problem: If 3 workers build a wall in 4 days, how many days for 6 workers?",
    "optionA": "2",
    "optionB": "3",
    "optionC": "1.5",
    "optionD": "2.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the area of a rectangle with length 10 and width 5?",
    "optionA": "50",
    "optionB": "30",
    "optionC": "40",
    "optionD": "60",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 3/4 to a decimal.",
    "optionA": "0.75",
    "optionB": "0.5",
    "optionC": "0.25",
    "optionD": "1.0",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If y = 2x + 3 and x=4, what is y?",
    "optionA": "11",
    "optionB": "9",
    "optionC": "10",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If all Bloops are Razzies and some Razzies are Lalas, then:",
    "optionA": "All Bloops are LaLAS",
    "optionB": "Some Bloops are LaLas",
    "optionC": "No Bloops are LaLas",
    "optionD": "Cannot determine",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Identify assumption: Students should study hard to pass.",
    "optionA": "Studying hard guarantees pass",
    "optionB": "Not studying leads to failure",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Next in series: A, C, E, G, ____",
    "optionA": "H",
    "optionB": "I",
    "optionC": "J",
    "optionD": "K",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Which is odd one out: Apple, Banana, Carrot, Orange",
    "optionA": "Apple",
    "optionB": "Banana",
    "optionC": "Carrot",
    "optionD": "Orange",
    "correctAnswer": "C",
    "category": "Analytical Ability"
  },
  {
    "text": "If X is Y's brother, Y is Z's sister, Z is X's:",
    "optionA": "Brother",
    "optionB": "Sister",
    "optionC": "Uncle",
    "optionD": "Self",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Conclusion from: All dogs bark. Spot barks. So Spot is a dog.",
    "optionA": "Valid",
    "optionB": "Invalid",
    "optionC": "True",
    "optionD": "False",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Iron: metal :: granite:",
    "optionA": "Marble",
    "optionB": "Rock",
    "optionC": "Sand",
    "optionD": "Solid",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If 2=5, 3=10, 4=17, 5=?",
    "optionA": "26",
    "optionB": "25",
    "optionC": "20",
    "optionD": "22",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Data interpretation: (Assume graph) What is the trend?",
    "optionA": "Increasing",
    "optionB": "Decreasing",
    "optionC": "Stable",
    "optionD": "Varying",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the capital of the Philippines?",
    "optionA": "Manila",
    "optionB": "Cebu",
    "optionC": "Davao",
    "optionD": "Quezon City",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Who is the current President of the Philippines? (As of 2022)",
    "optionA": "Ferdinand Marcos Jr.",
    "optionB": "Rodrigo Duterte",
    "optionC": "Benigno Aquino III",
    "optionD": "Gloria Arroyo",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine Constitution was ratified in:",
    "optionA": "1987",
    "optionB": "1973",
    "optionC": "1935",
    "optionD": "1899",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 is the:",
    "optionA": "Code of Conduct for Public Officials",
    "optionB": "Anti-Graft Law",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The three branches of government are:",
    "optionA": "Executive, Legislative, Judiciary",
    "optionB": "Senate, House, Court",
    "optionC": "President, Congress, Supreme Court",
    "optionD": "All above",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "National hero of the Philippines:",
    "optionA": "Jose Rizal",
    "optionB": "Andres Bonifacio",
    "optionC": "Emilio Aguinaldo",
    "optionD": "Lapu-Lapu",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine flag has colors:",
    "optionA": "Blue, Red, White, Yellow",
    "optionB": "Green, White, Red",
    "optionC": "Blue, White, Red",
    "optionD": "Red, White, Blue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Number of regions in the Philippines:",
    "optionA": "17",
    "optionB": "18",
    "optionC": "16",
    "optionD": "15",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The largest island is:",
    "optionA": "Luzon",
    "optionB": "Mindanao",
    "optionC": "Visayas",
    "optionD": "Palawan",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Independence Day is:",
    "optionA": "June 12",
    "optionB": "July 4",
    "optionC": "August 31",
    "optionD": "April 9",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "According to the Philippine Constitution, what is the minimum age to run for President?",
    "optionA": "35",
    "optionB": "30",
    "optionC": "40",
    "optionD": "25",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 refers to the Code of Conduct and Ethical Standards for:",
    "optionA": "Public Officials and Employees",
    "optionB": "Private Sector Workers",
    "optionC": "Students",
    "optionD": "Military Personnel",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Senators are there in the Philippine Senate?",
    "optionA": "24",
    "optionB": "20",
    "optionC": "30",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What does the Bill of Rights in the Constitution primarily protect?",
    "optionA": "Individual freedoms",
    "optionB": "Economic policies",
    "optionC": "Foreign relations",
    "optionD": "Military powers",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Under RA 6713, what is a prohibited act for public officials?",
    "optionA": "Political neutrality",
    "optionB": "Accepting gifts that create conflict of interest",
    "optionC": "Professionalism",
    "optionD": "Responsiveness to public",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "What branch of government includes the President and Vice President?",
    "optionA": "Executive",
    "optionB": "Legislative",
    "optionC": "Judicial",
    "optionD": "Local",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "In human rights concepts, what does 'peace' involve per the reviewer?",
    "optionA": "Absence of conflict and promotion of justice",
    "optionB": "Military strength",
    "optionC": "Economic growth only",
    "optionD": "Environmental protection",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What is a key norm of conduct under RA 6713?",
    "optionA": "Professionalism",
    "optionB": "Corruption",
    "optionC": "Nepotism",
    "optionD": "Bribery",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Environment Management and Protection in the Constitution emphasizes:",
    "optionA": "Sustainable development",
    "optionB": "Urban expansion",
    "optionC": "Industrial growth without limits",
    "optionD": "Deforestation",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Representatives are in the House based on population?",
    "optionA": "Up to 250 or more",
    "optionB": "Exactly 100",
    "optionC": "24",
    "optionD": "200 fixed",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Every Christian's path is beset by peril.",
    "optionA": "bested",
    "optionB": "frightened",
    "optionC": "surrounded",
    "optionD": "chased",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The power failure at 8 P.M. caused consternation among the barangay's residents.",
    "optionA": "dismay",
    "optionB": "deliberation",
    "optionC": "disability",
    "optionD": "distaste",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "The consensus among the congressmen was that the bill would not be passed.",
    "optionA": "divided",
    "optionB": "controversy",
    "optionC": "gathering",
    "optionD": "agreement",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Tempestuous times preceded the EDSA People Power Revolution.",
    "optionA": "emotionally charged",
    "optionB": "temperate",
    "optionC": "trying",
    "optionD": "peaceful",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Imelda Marcos was known for her ostentatious extravagance.",
    "optionA": "oscillating",
    "optionB": "loud",
    "optionC": "wealthy",
    "optionD": "showy",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Some believe that the treatment for modern-day depression is complete abstinence from social media use.",
    "optionA": "absence",
    "optionB": "avoidance",
    "optionC": "sickness",
    "optionD": "prescription",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Mary Grace Cafe is a favorite rendezvous for all the titas of Manila.",
    "optionA": "hidden retreat",
    "optionB": "hiding place",
    "optionC": "meeting place",
    "optionD": "dining room",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Lola Mona Lisa is so old that her health has regressed to the point that she may die any time soon.",
    "optionA": "remembered",
    "optionB": "alluded",
    "optionC": "deteriorated",
    "optionD": "progressed",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The garrulous taxi driver annoyed most of his passengers especially the introverted ones.",
    "optionA": "talkative",
    "optionB": "gracious",
    "optionC": "sickly",
    "optionD": "grey",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "A less scrupulous plumber could easily have unnecessarily replaced the drainpipes and run up the cost.",
    "optionA": "afraid",
    "optionB": "employed",
    "optionC": "careful",
    "optionD": "infamous",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Mental health awareness)",
    "optionA": "Mental Health Awareness Efforts",
    "optionB": "Government Initiatives in the Philippines",
    "optionC": "Challenges in Mental Health Support",
    "optionD": "Importance of Mental Health",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Which legislation is mentioned in the passage?",
    "optionA": "Healthcare Act",
    "optionB": "Education Act",
    "optionC": "Mental Health Act",
    "optionD": "Social Services Act",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Climate change)",
    "optionA": "Environmental Challenges",
    "optionB": "Government Policies",
    "optionC": "Climate Change",
    "optionD": "Renewable Energy",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "2/5 + 1/4 = ?",
    "optionA": "9/20",
    "optionB": "13/20",
    "optionC": "7/20",
    "optionD": "11/20",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Given the equation 3x + 6 = 15, what is the value of x?",
    "optionA": "3",
    "optionB": "4",
    "optionC": "5",
    "optionD": "6",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16, 32, ?",
    "optionA": "48",
    "optionB": "54",
    "optionC": "64",
    "optionD": "72",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 5, 10, 20, 40, ?",
    "optionA": "60",
    "optionB": "70",
    "optionC": "80",
    "optionD": "100",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 3, 6, 12, 24, ?",
    "optionA": "36",
    "optionB": "48",
    "optionC": "54",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 9, 16, 25, ?",
    "optionA": "30",
    "optionB": "36",
    "optionC": "42",
    "optionD": "49",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 3, 5, 7, 11, ?",
    "optionA": "13",
    "optionB": "14",
    "optionC": "15",
    "optionD": "17",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 8, 16, 24, 32, 40, ?",
    "optionA": "45",
    "optionB": "48",
    "optionC": "50",
    "optionD": "52",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 1, 2, 3, 5, 8, ?",
    "optionA": "10",
    "optionB": "11",
    "optionC": "12",
    "optionD": "13",
    "correctAnswer": "D",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 9, 27, 81, 243, ?",
    "optionA": "324",
    "optionB": "567",
    "optionC": "729",
    "optionD": "810",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 10, 20, 30, 40, ?",
    "optionA": "45",
    "optionB": "50",
    "optionC": "55",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Negligent: requirement: remiss: _____________.",
    "optionA": "duty",
    "optionB": "law",
    "optionC": "task",
    "optionD": "care",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Politician: statesman: ______________: ______________. ",
    "optionA": "lawyer: advocate",
    "optionB": "doctor: physician",
    "optionC": "teacher: educator",
    "optionD": "soldier: warrior",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Caution is to ________ as radar is to ________.",
    "optionA": "signal: wave",
    "optionB": "warning: detection",
    "optionC": "care: speed",
    "optionD": "alert: track",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What are the 3 main branches of the Government of the Philippines?",
    "optionA": "Senate, Supreme Court, Congress",
    "optionB": "Presidential, Unicameral-Parliamentary, Bicameral-Parliamentary",
    "optionC": "Legislative, Executive, Judicial",
    "optionD": "The Legislature, The Senate, The Supreme Court",
    "correctAnswer": "C",
    "category": "General Information"
  },
  {
    "text": "The Supreme Court shall be composed of a Chief Justice and how many Associates Justices?",
    "optionA": "12",
    "optionB": "13",
    "optionC": "14",
    "optionD": "15",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The Commander-in-Chief of all armed forces of the Philippines in 2025 is _________.",
    "optionA": "Air Force Commanding General Jeffrey Delgado",
    "optionB": "Ferdinand Marcos Jr.",
    "optionC": "Chief Justice Maria Lourdes Sereno",
    "optionD": "AFP Chief Lieutenant Gen. Emmanuel Bautista",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The executive power shall be vested in the _________.",
    "optionA": "President of the Philippines",
    "optionB": "House of Representatives",
    "optionC": "The Supreme Court",
    "optionD": "The Congress",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The legislative power shall be vested in the _________ which shall consist of a Senate and a House of Representatives.",
    "optionA": "Congress of the Philippines",
    "optionB": "House of Ombudsman",
    "optionC": "The Supreme Court",
    "optionD": "Bureau of Internal Revenue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Senate shall be composed of how many senators elected at large by voters of the Philippines?",
    "optionA": "21",
    "optionB": "22",
    "optionC": "23",
    "optionD": "24",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "How long shall the term of office of the senators be commenced?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The term of office of the President and Vice-president of the Philippines shall be up to how many years?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The members of the House of Representatives shall be elected for a term of _______.",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The following shall be exempted from taxation except:",
    "optionA": "Lands and buildings",
    "optionB": "Churches and convents",
    "optionC": "Charitable institutions",
    "optionD": "Non-profit cemeteries",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Congress, by a vote of ____ of both Houses in joint session assembled, voting separately, shall have the sole power to declare a state of war.",
    "optionA": "Two-thirds",
    "optionB": "One-half",
    "optionC": "Three quarters",
    "optionD": "Minority",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "It states that “no person shall be deprived of life, liberty, or property without due process of law, nor any person be denied the equal protection of the laws.”",
    "optionA": "Article VI",
    "optionB": "Bill of Rights",
    "optionC": "Republic Act",
    "optionD": "Court Order",
    "correctAnswer": "B",
    "category": "General Information"
  }
]


----- End of File -----

----- File: app\src\main\java\com\example\csepractice\ChartActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import android.graphics.Color

class ChartActivity : ComponentActivity() {
    private val repository by lazy { QuestionRepository(applicationContext) }

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Progress Chart") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {  // Exit on click
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    ScoreChartScreen(modifier = Modifier.padding(innerPadding), sessions = repository.getAllSessions())
                }
            }
        }
    }
}

@Composable
fun ScoreChartScreen(modifier: Modifier = Modifier, sessions: Flow<List<PracticeSession>>) {
    val sessionList by sessions.collectAsState(emptyList())
    val context = LocalContext.current

    AndroidView(
        modifier = modifier.fillMaxSize(),
        factory = { ctx ->
            LineChart(ctx).apply {
                description.text = "Scores Over Time"
                setTouchEnabled(true)
                setDragEnabled(true)
                setScaleEnabled(true)
                setPinchZoom(true)
            }
        },
        update = { chart ->
            val entries = sessionList.mapIndexed { index, session ->
                Entry(index.toFloat(), session.score.toFloat())
            }
            val dataSet = LineDataSet(entries, "Scores")
            dataSet.color = Color.BLUE
            dataSet.valueTextColor = Color.BLACK
            chart.data = LineData(dataSet)
            chart.invalidate()
        }
    )
}

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\MainActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.animation.togetherWith
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.example.csepractice.viewmodel.PracticeViewModel
import kotlinx.coroutines.delay
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)  // Default to light mode
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        AppTopBar(onSettingsClick = {
                            val intent = Intent(this@MainActivity, SettingsActivity::class.java)
                            startActivity(intent)
                        })
                    }
                ) { innerPadding ->
                    PracticeScreen(Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppTopBar(onSettingsClick: () -> Unit) {
    TopAppBar(
        title = { Text("CSE Practice") },
        actions = {
            IconButton(onClick = onSettingsClick) {
                Icon(Icons.Default.Settings, contentDescription = "Settings")
            }
        }
    )
}

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun PracticeScreen(modifier: Modifier = Modifier, viewModel: PracticeViewModel = viewModel()) {
    val questions by viewModel.questions.collectAsState()
    val currentIndex by viewModel.currentIndex.collectAsState()
    val selectedAnswers by viewModel.selectedAnswers.collectAsState()
    val score by viewModel.score.collectAsState()
    val sessions by viewModel.sessions.collectAsState(emptyList())
    val selectedCategories by viewModel.selectedCategories.collectAsState()
    val categories by viewModel.categories.collectAsState(emptyList())  // Dynamic
    val context = LocalContext.current

    val visible = remember { mutableStateOf(false) }
    val numQuestions = remember { mutableIntStateOf(10) }  // Default 10
    val isSelecting = remember { mutableStateOf(true) }  // New: Control selector vs loading

    LaunchedEffect(Unit) {
        delay(300)
        visible.value = true
    }

    AnimatedVisibility(visible = visible.value, enter = fadeIn()) {
        if (questions.isEmpty() && score == 0) {  // Selector or loading
            if (categories.isEmpty()) {
                CircularProgressIndicator()  // Loading categories
            } else if (isSelecting.value) {  // Show selector until button press
                Column(
                    modifier = modifier.fillMaxSize().padding(16.dp),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.Start  // Left-align for better readability
                ) {
                    Text("Select Categories:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    categories.forEach { category ->
                        Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(vertical = 4.dp)) {
                            Checkbox(
                                checked = selectedCategories.contains(category),
                                onCheckedChange = { viewModel.toggleCategory(category) }
                            )
                            Spacer(modifier = Modifier.width(8.dp))  // Space between checkbox and text
                            Text(category)
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Text("Number of Questions:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        listOf(10, 20, 30).forEach { num ->
                            RadioButton(selected = numQuestions.intValue == num, onClick = { numQuestions.intValue = num })
                            Text("$num", modifier = Modifier.padding(end = 16.dp))  // Space between options
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(onClick = {
                        isSelecting.value = false
                        viewModel.startPractice(numQuestions.intValue)
                    }, modifier = Modifier.align(Alignment.CenterHorizontally)) {
                        Text("Start Practice")
                    }
                }
            } else {
                Column(modifier = modifier.fillMaxSize(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally) {
                    CircularProgressIndicator(color = MaterialTheme.colorScheme.primary)
                    Text("Loading questions...", modifier = Modifier.padding(top = 16.dp))
                }
            }
        } else if (score > 0) {
            val scrollState = rememberScrollState()
            Column(
                modifier = modifier.fillMaxSize().verticalScroll(scrollState).padding(16.dp),
                verticalArrangement = Arrangement.Center
            ) {
                Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                    Column(modifier = Modifier.padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Your score: $score%", style = MaterialTheme.typography.headlineMedium, color = MaterialTheme.colorScheme.primary)
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            viewModel.resetForNewSession()
                            isSelecting.value = true  // Reset to show selector on new session
                        }) {
                            Icon(Icons.Default.Refresh, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                            Text("Start New Practice")
                        }
                        Spacer(modifier = Modifier.height(8.dp))
                        Button(onClick = { viewModel.practiceWeakAreas() }) {
                            Text("Practice Weak Areas")
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Text("Progress History:", style = MaterialTheme.typography.titleMedium)
                Column {
                    Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                        Text("Date", modifier = Modifier.weight(2f), fontWeight = FontWeight.Bold)
                        Text("Score", modifier = Modifier.weight(1f), fontWeight = FontWeight.Bold)
                    }
                    sessions.forEach { session ->
                        val formattedDate = SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(Date(session.date))
                        Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                            Text(formattedDate, modifier = Modifier.weight(2f))
                            Text("${session.score}%", modifier = Modifier.weight(1f))
                        }
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                val averageScore = if (sessions.isNotEmpty()) {
                    sessions.map { it.score }.average().toInt()
                } else {
                    0
                }
                Text(
                    text = "Average Score: $averageScore%",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text("Category Averages:", style = MaterialTheme.typography.titleMedium)
                categories.forEach { cat ->
                    val avg by viewModel.getAverageForCategory(cat).collectAsState(0.0)
                    Text("$cat: ${avg.toInt()}%")
                }
                Spacer(modifier = Modifier.height(16.dp))
                Button(
                    onClick = {
                        val intent = Intent(context, ChartActivity::class.java)
                        context.startActivity(intent)
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary),
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                ) {
                    Text("View Progress Chart", color = Color.White)
                }
            }
        } else {
            val currentQuestion = questions[currentIndex]
            val isCurrentAnswered = selectedAnswers.containsKey(currentIndex)
            Column(modifier = modifier.fillMaxSize().padding(16.dp)) {
                AnimatedContent(
                    targetState = currentIndex,
                    transitionSpec = {
                        if (targetState > initialState) {
                            slideInHorizontally { width -> width } togetherWith slideOutHorizontally { width -> -width }
                        } else {
                            slideInHorizontally { width -> -width } togetherWith slideOutHorizontally { width -> width }
                        }
                    },
                    label = "questionAnimation"
                ) { index ->
                    val question = questions[index]
                    Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text(question.text, style = MaterialTheme.typography.titleLarge, color = MaterialTheme.colorScheme.primary)
                            listOf(question.optionA, question.optionB, question.optionC, question.optionD).forEachIndexed { optIndex, option ->
                                Row(verticalAlignment = Alignment.CenterVertically) {
                                    RadioButton(
                                        selected = selectedAnswers[index] == optIndex,
                                        onClick = { viewModel.selectAnswer(index, optIndex) }
                                    )
                                    Text(option)
                                }
                            }
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Row(
                    modifier = Modifier.fillMaxWidth().wrapContentHeight(),
                    horizontalArrangement = Arrangement.Center
                ) {
                    Button(onClick = { viewModel.previousQuestion() }, enabled = currentIndex > 0) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                        Text("Previous")
                    }
                    Spacer(modifier = Modifier.width(16.dp))
                    Button(onClick = { viewModel.nextQuestion() }, enabled = currentIndex < questions.size - 1 && isCurrentAnswered) {
                        Text("Next")
                        Icon(Icons.AutoMirrored.Filled.ArrowForward, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                if (currentIndex == questions.size - 1) {
                    Button(
                        onClick = {
                            Toast.makeText(context, "Submit pressed!", Toast.LENGTH_SHORT).show()
                            viewModel.calculateScore()
                        },
                        enabled = isCurrentAnswered,
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    ) {
                        Text("Submit")
                        Icon(Icons.Filled.Check, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
            }
        }
    }
}

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\SettingsActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.csepractice.repository.QuestionRepository
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import android.widget.Toast

class SettingsActivity : ComponentActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Settings") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    SettingsScreen(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@Composable
fun SettingsScreen(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val prefs = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    var isDarkMode by remember { mutableStateOf(prefs.getBoolean("dark_mode", false)) }
    var colorScheme by remember { mutableStateOf(prefs.getString("color_scheme", "Default") ?: "Default") }

    Column(
        modifier = modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Settings", style = MaterialTheme.typography.headlineMedium)

        Spacer(modifier = Modifier.height(32.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            Text("Dark Mode", modifier = Modifier.padding(end = 16.dp))
            Switch(
                checked = isDarkMode,
                onCheckedChange = { enabled ->
                    isDarkMode = enabled
                    with(prefs.edit()) {
                        putBoolean("dark_mode", enabled)
                        apply()
                    }
                }
            )
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text("Color Scheme:")
        Row {
            listOf("Default", "Blue", "Green").forEach { scheme ->
                RadioButton(selected = colorScheme == scheme, onClick = {
                    colorScheme = scheme
                    with(prefs.edit()) {
                        putString("color_scheme", scheme)
                        apply()
                    }
                })
                Text(scheme)
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Button(onClick = {
            val repository = QuestionRepository(context)
            CoroutineScope(Dispatchers.IO).launch {
                repository.clearAllSessions()
            }
            Toast.makeText(context, "History reset!", Toast.LENGTH_SHORT).show()
        }) {
            Text("Reset Progress History")
        }
    }
}

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\SplashActivity.kt -----

package com.example.csepractice

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.delay

class SplashActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            CSEPracticeAppTheme {
                SplashScreen {
                    startActivity(Intent(this@SplashActivity, MainActivity::class.java))
                    finish()
                }
            }
        }
    }
}

@Composable
fun SplashScreen(onTimeout: () -> Unit) {
    LaunchedEffect(Unit) {
        delay(3000)  // 3 seconds
        onTimeout()
    }
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Welcome to CSE Practice App",
            style = MaterialTheme.typography.headlineLarge,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 16.dp)
        )
        Text(
            text = "Inspired by Pearl Jynne Celestino\nBy PJC Inc",
            style = MaterialTheme.typography.bodyMedium,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 32.dp)
        )
        Text("Quick Tips:", style = MaterialTheme.typography.titleMedium)
        Text("1. Practice daily for best results!")
        Text("2. Focus on weak categories using the button.")
        Text("3. Review explanations after tests.")
        Text("4. Aim for 80%+ to pass CSE!")
    }
}

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\data\AppDatabase.kt -----

package com.example.csepractice.data

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase

@Database(entities = [Question::class, PracticeSession::class], version = 5, exportSchema = true)
abstract class AppDatabase : RoomDatabase() {
    abstract fun questionDao(): QuestionDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "cse_database"
                ).addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_4_5)
                    .fallbackToDestructiveMigration()  // For dev, removes data on mismatch
                    .build()
                INSTANCE = instance
                instance
            }
        }

        val MIGRATION_1_2 = object : Migration(1, 2) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasCategory = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "category") {
                            hasCategory = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasCategory) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN category TEXT NOT NULL DEFAULT ''")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasCategories = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "categories") {
                            hasCategories = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasCategories) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN categories TEXT NOT NULL DEFAULT ''")
                }
            }
        }

        val MIGRATION_2_3 = object : Migration(2, 3) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasDifficulty) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN difficulty TEXT NOT NULL DEFAULT 'Medium'")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasTimeTaken = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "timeTaken") {
                            hasTimeTaken = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasTimeTaken) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN timeTaken LONG NOT NULL DEFAULT 0")
                }
            }
        }

        val MIGRATION_3_4 = object : Migration(3, 4) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Empty migration to force version bump and fallback if needed
            }
        }

        val MIGRATION_4_5 = object : Migration(4, 5) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Check if 'difficulty' exists
                val cursor = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursor.getColumnIndex("name")
                if (cursor.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursor.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursor.moveToNext())
                }
                cursor.close()

                if (hasDifficulty) {
                    // Create temp table with current schema (no difficulty)
                    database.execSQL("""
                        CREATE TABLE questions_temp (
                            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                            text TEXT NOT NULL DEFAULT '',
                            optionA TEXT NOT NULL DEFAULT '',
                            optionB TEXT NOT NULL DEFAULT '',
                            optionC TEXT NOT NULL DEFAULT '',
                            optionD TEXT NOT NULL DEFAULT '',
                            correctAnswer TEXT NOT NULL DEFAULT '',
                            category TEXT NOT NULL DEFAULT ''
                        )
                    """.trimIndent())

                    // Copy data, excluding difficulty
                    database.execSQL("""
                        INSERT INTO questions_temp (id, text, optionA, optionB, optionC, optionD, correctAnswer, category)
                        SELECT id, text, optionA, optionB, optionC, optionD, correctAnswer, category FROM questions
                    """.trimIndent())

                    // Drop old table
                    database.execSQL("DROP TABLE questions")

                    // Rename temp to original
                    database.execSQL("ALTER TABLE questions_temp RENAME TO questions")
                }
            }
        }
    }
}

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\data\PracticeSession.kt -----

// app/src/main/java/com/example/csepractice/data/PracticeSession.kt
package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "practice_sessions")
data class PracticeSession(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val date: Long = System.currentTimeMillis(),
    val score: Int,  // e.g., 80 (percentage)
    val correctCount: Int,
    val totalQuestions: Int,
    val categories: String = "",  // Comma-separated or "All"
    val timeTaken: Long = 0  // Total time in milliseconds
)

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\data\Question.kt -----

package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "questions")
data class Question(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val text: String = "",
    val optionA: String = "",
    val optionB: String = "",
    val optionC: String = "",
    val optionD: String = "",
    val correctAnswer: String = "",
    val category: String = ""
)

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\data\QuestionDao.kt -----

package com.example.csepractice.data

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface QuestionDao {
    @Query("SELECT * FROM questions ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestions(count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category = :category ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategory(category: String, count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category IN (:categories) ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>>

    @Query("SELECT DISTINCT category FROM questions")
    fun getCategories(): Flow<List<String>>  // New for dynamic categories

    @Query("SELECT AVG(score) FROM practice_sessions WHERE categories LIKE '%' || :category || '%'")
    fun getAvgByCategory(category: String): Flow<Double>  // New for category avg

    @Insert
    suspend fun insertQuestions(questions: List<Question>)

    @Insert
    suspend fun insertSession(session: PracticeSession)

    @Query("SELECT * FROM practice_sessions ORDER BY date DESC")
    fun getAllSessions(): Flow<List<PracticeSession>>

    @Query("DELETE FROM practice_sessions")
    suspend fun clearAllSessions()
}

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\repository\QuestionRepository.kt -----

package com.example.csepractice.repository

import android.content.Context
import com.example.csepractice.data.AppDatabase
import com.example.csepractice.data.Question
import com.example.csepractice.data.PracticeSession
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull

class QuestionRepository(private val context: Context) {
    val dao = AppDatabase.getDatabase(context).questionDao()

    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>> =
        dao.getRandomQuestionsByCategories(categories, count)

    fun getRandomQuestions(count: Int): Flow<List<Question>> = dao.getRandomQuestions(count)

    suspend fun insertSession(session: PracticeSession) = dao.insertSession(session)

    fun getAllSessions(): Flow<List<PracticeSession>> = dao.getAllSessions()

    suspend fun clearAllSessions() {
        dao.clearAllSessions()
    }

    suspend fun seedQuestionsIfEmpty() {
        // Check if DB is empty
        val questionsFlow = dao.getRandomQuestions(1)
        val questions = questionsFlow.firstOrNull()
        if (questions.isNullOrEmpty()) {
            val json = context.assets.open("questions.json").bufferedReader().use { it.readText() }
            val type = object : TypeToken<List<Question>>() {}.type
            val questions: List<Question> = Gson().fromJson(json, type)
            dao.insertQuestions(questions)
        }
    }
}

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\ui\theme\Color.kt -----

package com.example.csepractice.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

// New for schemes
val Blue80 = Color(0xFF80D8FF)
val BlueGrey80 = Color(0xFFB3E5FC)
val Blue40 = Color(0xFF0277BD)
val BlueGrey40 = Color(0xFF81D4FA)

val Green80 = Color(0xFFCCFF90)
val GreenGrey80 = Color(0xFFE0F2F1)
val Green40 = Color(0xFF558B2F)
val GreenGrey40 = Color(0xFFA5D6A7)

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\ui\theme\Theme.kt -----

package com.example.csepractice.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40
)

private val BlueColorScheme = lightColorScheme(
    primary = Blue40,
    secondary = BlueGrey40,
    tertiary = Blue80
)

private val GreenColorScheme = lightColorScheme(
    primary = Green40,
    secondary = GreenGrey40,
    tertiary = Green80
)

@Composable
fun CSEPracticeAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val prefs = LocalContext.current.getSharedPreferences("app_prefs", android.content.Context.MODE_PRIVATE)
    val scheme = prefs.getString("color_scheme", "Default") ?: "Default"

    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        scheme == "Blue" -> BlueColorScheme
        scheme == "Green" -> GreenColorScheme
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = androidx.compose.material3.Typography(),  // Fully qualify to avoid conflict
        content = content
    )
}

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\utils\ListConverters.kt -----

package com.example.csepractice.utils

import androidx.room.TypeConverter
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class ListConverters {
    private val gson = Gson()

    @TypeConverter
    fun fromStringList(value: String): List<String> {
        val listType = object : TypeToken<List<String>>() {}.type
        return gson.fromJson(value, listType)
    }

    @TypeConverter
    fun toStringList(list: List<String>): String {
        return gson.toJson(list)
    }
}

----- End of File -----

----- File: app\src\main\java\com\example\csepractice\viewmodel\PracticeViewModel.kt -----

package com.example.csepractice.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.data.Question
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlin.system.measureTimeMillis

class PracticeViewModel(application: Application) : AndroidViewModel(application) {
    private val repository = QuestionRepository(application)
    private val dao = repository.dao  // For new queries

    private val _questions = MutableStateFlow<List<Question>>(emptyList())
    val questions: StateFlow<List<Question>> = _questions.asStateFlow()

    private val _currentIndex = MutableStateFlow(0)
    val currentIndex: StateFlow<Int> = _currentIndex.asStateFlow()

    private val _selectedAnswers = MutableStateFlow<Map<Int, Int>>(emptyMap())
    val selectedAnswers: StateFlow<Map<Int, Int>> = _selectedAnswers.asStateFlow()

    private val _score = MutableStateFlow(0)
    val score: StateFlow<Int> = _score.asStateFlow()

    private val _selectedCategories = MutableStateFlow<List<String>>(emptyList())
    val selectedCategories: StateFlow<List<String>> = _selectedCategories.asStateFlow()

    val sessions: Flow<List<PracticeSession>> = repository.getAllSessions()

    val categories: Flow<List<String>> = dao.getCategories()  // New dynamic categories

    init {
        viewModelScope.launch {
            repository.seedQuestionsIfEmpty()
            // No auto-load; wait for startPractice
        }
    }

    fun toggleCategory(category: String) {
        val current = _selectedCategories.value.toMutableList()
        if (current.contains(category)) {
            current.remove(category)
        } else {
            current.add(category)
        }
        _selectedCategories.value = current
    }

    fun startPractice(numQuestions: Int) {
        val categories = _selectedCategories.value
        if (categories.isEmpty()) {
            loadAllQuestions(numQuestions)
        } else {
            loadQuestionsForCategories(categories, numQuestions)
        }
    }

    fun practiceWeakAreas(threshold: Double = 70.0) {
        viewModelScope.launch {
            val allCats = categories.first()  // Get list once
            val weak = mutableListOf<String>()
            for (cat in allCats) {
                val avg = getAverageForCategory(cat).first()  // Get avg once
                if (avg < threshold) {
                    weak.add(cat)
                }
            }
            _selectedCategories.value = weak
            if (weak.isNotEmpty()) {
                startPractice(10)  // Default to 10
            }  // Else, perhaps toast "No weak areas!"
        }
    }

    private fun loadQuestionsForCategories(categories: List<String>, count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestionsByCategories(categories, count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    private fun loadAllQuestions(count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestions(count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    fun getAverageForCategory(category: String): Flow<Double> = dao.getAvgByCategory(category)  // New

    fun selectAnswer(questionIndex: Int, optionIndex: Int) {
        _selectedAnswers.value = _selectedAnswers.value.toMutableMap().apply {
            this[questionIndex] = optionIndex
        }
    }

    fun nextQuestion() {
        if (_currentIndex.value < _questions.value.size - 1) {
            _currentIndex.value += 1
        }
    }

    fun previousQuestion() {
        if (_currentIndex.value > 0) {
            _currentIndex.value -= 1
        }
    }

    fun calculateScore() {
        val total = _questions.value.size
        var correct = 0
        _questions.value.forEachIndexed { index, question ->
            val selected = _selectedAnswers.value[index]
            val correctIndex = "ABCD".indexOf(question.correctAnswer)
            if (selected == correctIndex) {
                correct++
            }
        }
        _score.value = if (total > 0) (correct * 100) / total else 0
        viewModelScope.launch {
            repository.insertSession(
                PracticeSession(
                    score = _score.value,
                    correctCount = correct,
                    totalQuestions = total,
                    categories = _selectedCategories.value.joinToString(",")  // Save categories
                )
            )
        }
    }

    fun resetForNewSession() {
        _questions.value = emptyList()
        _currentIndex.value = 0
        _selectedAnswers.value = emptyMap()
        _score.value = 0
        _selectedCategories.value = emptyList()
    }
}

----- End of File -----

----- File: app\src\main\res\drawable\ic_launcher_background.xml -----

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


----- End of File -----

----- File: app\src\main\res\drawable\ic_launcher_foreground.xml -----

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

----- End of File -----

----- File: app\src\main\res\mipmap-anydpi\ic_launcher.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: app\src\main\res\mipmap-anydpi\ic_launcher_round.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: app\src\main\res\values\colors.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

----- End of File -----

----- File: app\src\main\res\values\strings.xml -----

<resources>
    <string name="app_name">CSEPracticeApp</string>
</resources>

----- End of File -----

----- File: app\src\main\res\values\themes.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.CSEPracticeApp" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

----- End of File -----

----- File: app\src\main\res\xml\backup_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

----- End of File -----

----- File: app\src\main\res\xml\data_extraction_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

----- End of File -----

----- File: app\src\test\java\com\example\csepractice\ExampleUnitTest.kt -----

package com.example.csepractice

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

----- End of File -----

----- File: flat_project_files\app_build.gradle.kts -----

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android") version "1.9.24"
    id("org.jetbrains.kotlin.kapt") version "1.9.24"
    id("com.google.devtools.ksp") version "1.9.24-1.0.20"
}

android {
    namespace = "com.example.csepractice"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.csepractice"
        minSdk = 26
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"  // Fix for Kotlin 1.9.24
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation("com.github.PhilJay:MPAndroidChart:v3.1.0")
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.6")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6")
    implementation("androidx.activity:activity-compose:1.9.2")
    implementation(platform("androidx.compose:compose-bom:2024.09.03"))
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.room:room-runtime:2.6.1")
    implementation("androidx.datastore:datastore-preferences:1.1.1")  // Alternative to SharedPreferences, but we'll use SharedPrefs here
    ksp("androidx.room:room-compiler:2.6.1")
    implementation("androidx.room:room-ktx:2.6.1")
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation(platform("androidx.compose:compose-bom:2024.09.03"))
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
}

----- End of File -----

----- File: flat_project_files\app_src_androidTest_java_com_example_csepractice_ExampleInstrumentedTest.kt -----

package com.example.csepractice

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.csepractice", appContext.packageName)
    }
}

----- End of File -----

----- File: flat_project_files\app_src_main_AndroidManifest.xml -----

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CSEPracticeApp">
        <activity
            android:name=".SplashActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.CSEPracticeApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".MainActivity" android:exported="false" />
        <activity android:name=".ChartActivity" android:exported="false" />
        <activity android:name=".SettingsActivity" />
    </application>

</manifest>

----- End of File -----

----- File: flat_project_files\app_src_main_assets_questions.json -----

[
  {
    "text": "Identify the synonym of 'eloquent'.",
    "optionA": "Silent",
    "optionB": "Articulate",
    "optionC": "Confused",
    "optionD": "Angry",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Would you like coffee __________ tea?",
    "optionA": "so",
    "optionB": "or",
    "optionC": "but",
    "optionD": "and",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "I like swimming, ______ my sister likes dancing.",
    "optionA": "and",
    "optionB": "or",
    "optionC": "because",
    "optionD": "but",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "The antonym of 'happy' is:",
    "optionA": "Joyful",
    "optionB": "Sad",
    "optionC": "Excited",
    "optionD": "Content",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct spelling: ",
    "optionA": "Recieve",
    "optionB": "Receive",
    "optionC": "Recive",
    "optionD": "Receve",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Complete the analogy: Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence is grammatically correct?",
    "optionA": "He go to school.",
    "optionB": "He goes to school.",
    "optionC": "He going to school.",
    "optionD": "He went to school.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "The word 'fast' can mean:",
    "optionA": "Quick",
    "optionB": "Not eating",
    "optionC": "Both A and B",
    "optionD": "None",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange: The / quick / brown / fox",
    "optionA": "The brown quick fox",
    "optionB": "The quick brown fox",
    "optionC": "Quick the brown fox",
    "optionD": "Brown the quick fox",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main idea of the passage? (Assume a passage)",
    "optionA": "Option A",
    "optionB": "Option B",
    "optionC": "Option C",
    "optionD": "Option D",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which of the following sentences contains an error in subject-verb agreement?",
    "optionA": "The team of players are practicing hard.",
    "optionB": "Each of the students has submitted their assignment.",
    "optionC": "Neither the manager nor the employees is happy with the decision.",
    "optionD": "No error.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct synonym for 'append.'",
    "optionA": "Remove",
    "optionB": "Add",
    "optionC": "Ignore",
    "optionD": "Divide",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In the sentence 'The chef cooked the meal quick,' identify the error.",
    "optionA": "The",
    "optionB": "cooked",
    "optionC": "quick",
    "optionD": "No error.",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange the following sentences to form a coherent paragraph: (1) However, it requires dedication. (2) Studying for exams is essential. (3) In summary, consistent effort pays off. (4) First, create a schedule.",
    "optionA": "2-4-1-3",
    "optionB": "4-2-1-3",
    "optionC": "2-1-4-3",
    "optionD": "1-3-2-4",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the antonym of 'opaque'?",
    "optionA": "Cloudy",
    "optionB": "Clear",
    "optionC": "Thick",
    "optionD": "Dense",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Identify the misspelled word in the sentence: 'The committee will accomodate all requests.'",
    "optionA": "committee",
    "optionB": "will",
    "optionC": "accomodate",
    "optionD": "requests",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct word usage: 'The effect of the new policy _____ immediate.'",
    "optionA": "were",
    "optionB": "was",
    "optionC": "are",
    "optionD": "is being",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In reading comprehension, if a passage states 'The economy is improving, but unemployment remains high,' what is the implied conclusion?",
    "optionA": "Unemployment will decrease soon.",
    "optionB": "Improvement does not solve all issues.",
    "optionC": "The economy is worsening.",
    "optionD": "No conclusion can be drawn.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence demonstrates parallelism?",
    "optionA": "She likes to swim, running, and to hike.",
    "optionB": "She likes swimming, running, and hiking.",
    "optionC": "She likes swim, run, and hiking.",
    "optionD": "She likes to swim, run, and hiking.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the contextual meaning of 'query' in 'Please query the database for updates'?",
    "optionA": "Question",
    "optionB": "Delete",
    "optionC": "Save",
    "optionD": "Ignore",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "2187, 729, 243, 81, 27, 9, ____?",
    "optionA": "6",
    "optionB": "3",
    "optionC": "4",
    "optionD": "2",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "1, 4, 9, 16, 25, 36, 49, 64, ____?",
    "optionA": "81",
    "optionB": "100",
    "optionC": "121",
    "optionD": "144",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "45 increased by what percent of itself gives 90?",
    "optionA": "50%",
    "optionB": "100%",
    "optionC": "200%",
    "optionD": "150%",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "15 is 150% of what number?",
    "optionA": "10",
    "optionB": "20",
    "optionC": "22.5",
    "optionD": "7.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 25% of 80?",
    "optionA": "20",
    "optionB": "25",
    "optionC": "30",
    "optionD": "40",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve: 2 + 3 * 4 - 5",
    "optionA": "9",
    "optionB": "5",
    "optionC": "3",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "The sum of x and 9 is:",
    "optionA": "x-9",
    "optionB": "x*9",
    "optionC": "x+9",
    "optionD": "x/9",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "If 3 apples cost 50 pesos, how much for 12?",
    "optionA": "150",
    "optionB": "200",
    "optionC": "100",
    "optionD": "250",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Find the average of 10, 20, 30.",
    "optionA": "20",
    "optionB": "15",
    "optionC": "25",
    "optionD": "30",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "A plate of special Sisig rice and a bowl of beef noodles costs Php 80. If the bowl of beef noodles costs Php 20 more than the plate of Sisig rice, how much is the bowl of beef noodles?",
    "optionA": "Php 30",
    "optionB": "Php 50",
    "optionC": "Php 60",
    "optionD": "Php 40",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 15% of 200?",
    "optionA": "30",
    "optionB": "25",
    "optionC": "35",
    "optionD": "20",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve for x: 3x + 5 = 20.",
    "optionA": "5",
    "optionB": "6",
    "optionC": "4",
    "optionD": "7",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If a train travels 60 km in 45 minutes, what is its speed in km/h?",
    "optionA": "80",
    "optionB": "90",
    "optionC": "70",
    "optionD": "100",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16?",
    "optionA": "20",
    "optionB": "24",
    "optionC": "32",
    "optionD": "18",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "A store offers a 20% discount on a Php 500 item. What is the final price?",
    "optionA": "Php 400",
    "optionB": "Php 450",
    "optionC": "Php 300",
    "optionD": "Php 350",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve the word problem: If 3 workers build a wall in 4 days, how many days for 6 workers?",
    "optionA": "2",
    "optionB": "3",
    "optionC": "1.5",
    "optionD": "2.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the area of a rectangle with length 10 and width 5?",
    "optionA": "50",
    "optionB": "30",
    "optionC": "40",
    "optionD": "60",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 3/4 to a decimal.",
    "optionA": "0.75",
    "optionB": "0.5",
    "optionC": "0.25",
    "optionD": "1.0",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If y = 2x + 3 and x=4, what is y?",
    "optionA": "11",
    "optionB": "9",
    "optionC": "10",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If all Bloops are Razzies and some Razzies are Lalas, then:",
    "optionA": "All Bloops are LaLAS",
    "optionB": "Some Bloops are LaLas",
    "optionC": "No Bloops are LaLas",
    "optionD": "Cannot determine",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Identify assumption: Students should study hard to pass.",
    "optionA": "Studying hard guarantees pass",
    "optionB": "Not studying leads to failure",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Next in series: A, C, E, G, ____",
    "optionA": "H",
    "optionB": "I",
    "optionC": "J",
    "optionD": "K",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Which is odd one out: Apple, Banana, Carrot, Orange",
    "optionA": "Apple",
    "optionB": "Banana",
    "optionC": "Carrot",
    "optionD": "Orange",
    "correctAnswer": "C",
    "category": "Analytical Ability"
  },
  {
    "text": "If X is Y's brother, Y is Z's sister, Z is X's:",
    "optionA": "Brother",
    "optionB": "Sister",
    "optionC": "Uncle",
    "optionD": "Self",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Conclusion from: All dogs bark. Spot barks. So Spot is a dog.",
    "optionA": "Valid",
    "optionB": "Invalid",
    "optionC": "True",
    "optionD": "False",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Iron: metal :: granite:",
    "optionA": "Marble",
    "optionB": "Rock",
    "optionC": "Sand",
    "optionD": "Solid",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If 2=5, 3=10, 4=17, 5=?",
    "optionA": "26",
    "optionB": "25",
    "optionC": "20",
    "optionD": "22",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Data interpretation: (Assume graph) What is the trend?",
    "optionA": "Increasing",
    "optionB": "Decreasing",
    "optionC": "Stable",
    "optionD": "Varying",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the capital of the Philippines?",
    "optionA": "Manila",
    "optionB": "Cebu",
    "optionC": "Davao",
    "optionD": "Quezon City",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Who is the current President of the Philippines? (As of 2022)",
    "optionA": "Ferdinand Marcos Jr.",
    "optionB": "Rodrigo Duterte",
    "optionC": "Benigno Aquino III",
    "optionD": "Gloria Arroyo",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine Constitution was ratified in:",
    "optionA": "1987",
    "optionB": "1973",
    "optionC": "1935",
    "optionD": "1899",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 is the:",
    "optionA": "Code of Conduct for Public Officials",
    "optionB": "Anti-Graft Law",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The three branches of government are:",
    "optionA": "Executive, Legislative, Judiciary",
    "optionB": "Senate, House, Court",
    "optionC": "President, Congress, Supreme Court",
    "optionD": "All above",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "National hero of the Philippines:",
    "optionA": "Jose Rizal",
    "optionB": "Andres Bonifacio",
    "optionC": "Emilio Aguinaldo",
    "optionD": "Lapu-Lapu",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine flag has colors:",
    "optionA": "Blue, Red, White, Yellow",
    "optionB": "Green, White, Red",
    "optionC": "Blue, White, Red",
    "optionD": "Red, White, Blue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Number of regions in the Philippines:",
    "optionA": "17",
    "optionB": "18",
    "optionC": "16",
    "optionD": "15",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The largest island is:",
    "optionA": "Luzon",
    "optionB": "Mindanao",
    "optionC": "Visayas",
    "optionD": "Palawan",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Independence Day is:",
    "optionA": "June 12",
    "optionB": "July 4",
    "optionC": "August 31",
    "optionD": "April 9",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "According to the Philippine Constitution, what is the minimum age to run for President?",
    "optionA": "35",
    "optionB": "30",
    "optionC": "40",
    "optionD": "25",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 refers to the Code of Conduct and Ethical Standards for:",
    "optionA": "Public Officials and Employees",
    "optionB": "Private Sector Workers",
    "optionC": "Students",
    "optionD": "Military Personnel",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Senators are there in the Philippine Senate?",
    "optionA": "24",
    "optionB": "20",
    "optionC": "30",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What does the Bill of Rights in the Constitution primarily protect?",
    "optionA": "Individual freedoms",
    "optionB": "Economic policies",
    "optionC": "Foreign relations",
    "optionD": "Military powers",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Under RA 6713, what is a prohibited act for public officials?",
    "optionA": "Political neutrality",
    "optionB": "Accepting gifts that create conflict of interest",
    "optionC": "Professionalism",
    "optionD": "Responsiveness to public",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "What branch of government includes the President and Vice President?",
    "optionA": "Executive",
    "optionB": "Legislative",
    "optionC": "Judicial",
    "optionD": "Local",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "In human rights concepts, what does 'peace' involve per the reviewer?",
    "optionA": "Absence of conflict and promotion of justice",
    "optionB": "Military strength",
    "optionC": "Economic growth only",
    "optionD": "Environmental protection",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What is a key norm of conduct under RA 6713?",
    "optionA": "Professionalism",
    "optionB": "Corruption",
    "optionC": "Nepotism",
    "optionD": "Bribery",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Environment Management and Protection in the Constitution emphasizes:",
    "optionA": "Sustainable development",
    "optionB": "Urban expansion",
    "optionC": "Industrial growth without limits",
    "optionD": "Deforestation",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Representatives are in the House based on population?",
    "optionA": "Up to 250 or more",
    "optionB": "Exactly 100",
    "optionC": "24",
    "optionD": "200 fixed",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Every Christian's path is beset by peril.",
    "optionA": "bested",
    "optionB": "frightened",
    "optionC": "surrounded",
    "optionD": "chased",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The power failure at 8 P.M. caused consternation among the barangay's residents.",
    "optionA": "dismay",
    "optionB": "deliberation",
    "optionC": "disability",
    "optionD": "distaste",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "The consensus among the congressmen was that the bill would not be passed.",
    "optionA": "divided",
    "optionB": "controversy",
    "optionC": "gathering",
    "optionD": "agreement",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Tempestuous times preceded the EDSA People Power Revolution.",
    "optionA": "emotionally charged",
    "optionB": "temperate",
    "optionC": "trying",
    "optionD": "peaceful",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Imelda Marcos was known for her ostentatious extravagance.",
    "optionA": "oscillating",
    "optionB": "loud",
    "optionC": "wealthy",
    "optionD": "showy",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Some believe that the treatment for modern-day depression is complete abstinence from social media use.",
    "optionA": "absence",
    "optionB": "avoidance",
    "optionC": "sickness",
    "optionD": "prescription",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Mary Grace Cafe is a favorite rendezvous for all the titas of Manila.",
    "optionA": "hidden retreat",
    "optionB": "hiding place",
    "optionC": "meeting place",
    "optionD": "dining room",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Lola Mona Lisa is so old that her health has regressed to the point that she may die any time soon.",
    "optionA": "remembered",
    "optionB": "alluded",
    "optionC": "deteriorated",
    "optionD": "progressed",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The garrulous taxi driver annoyed most of his passengers especially the introverted ones.",
    "optionA": "talkative",
    "optionB": "gracious",
    "optionC": "sickly",
    "optionD": "grey",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "A less scrupulous plumber could easily have unnecessarily replaced the drainpipes and run up the cost.",
    "optionA": "afraid",
    "optionB": "employed",
    "optionC": "careful",
    "optionD": "infamous",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Mental health awareness)",
    "optionA": "Mental Health Awareness Efforts",
    "optionB": "Government Initiatives in the Philippines",
    "optionC": "Challenges in Mental Health Support",
    "optionD": "Importance of Mental Health",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Which legislation is mentioned in the passage?",
    "optionA": "Healthcare Act",
    "optionB": "Education Act",
    "optionC": "Mental Health Act",
    "optionD": "Social Services Act",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Climate change)",
    "optionA": "Environmental Challenges",
    "optionB": "Government Policies",
    "optionC": "Climate Change",
    "optionD": "Renewable Energy",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "2/5 + 1/4 = ?",
    "optionA": "9/20",
    "optionB": "13/20",
    "optionC": "7/20",
    "optionD": "11/20",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Given the equation 3x + 6 = 15, what is the value of x?",
    "optionA": "3",
    "optionB": "4",
    "optionC": "5",
    "optionD": "6",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16, 32, ?",
    "optionA": "48",
    "optionB": "54",
    "optionC": "64",
    "optionD": "72",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 5, 10, 20, 40, ?",
    "optionA": "60",
    "optionB": "70",
    "optionC": "80",
    "optionD": "100",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 3, 6, 12, 24, ?",
    "optionA": "36",
    "optionB": "48",
    "optionC": "54",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 9, 16, 25, ?",
    "optionA": "30",
    "optionB": "36",
    "optionC": "42",
    "optionD": "49",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 3, 5, 7, 11, ?",
    "optionA": "13",
    "optionB": "14",
    "optionC": "15",
    "optionD": "17",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 8, 16, 24, 32, 40, ?",
    "optionA": "45",
    "optionB": "48",
    "optionC": "50",
    "optionD": "52",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 1, 2, 3, 5, 8, ?",
    "optionA": "10",
    "optionB": "11",
    "optionC": "12",
    "optionD": "13",
    "correctAnswer": "D",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 9, 27, 81, 243, ?",
    "optionA": "324",
    "optionB": "567",
    "optionC": "729",
    "optionD": "810",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 10, 20, 30, 40, ?",
    "optionA": "45",
    "optionB": "50",
    "optionC": "55",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Negligent: requirement: remiss: _____________.",
    "optionA": "duty",
    "optionB": "law",
    "optionC": "task",
    "optionD": "care",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Politician: statesman: ______________: ______________. ",
    "optionA": "lawyer: advocate",
    "optionB": "doctor: physician",
    "optionC": "teacher: educator",
    "optionD": "soldier: warrior",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Caution is to ________ as radar is to ________.",
    "optionA": "signal: wave",
    "optionB": "warning: detection",
    "optionC": "care: speed",
    "optionD": "alert: track",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What are the 3 main branches of the Government of the Philippines?",
    "optionA": "Senate, Supreme Court, Congress",
    "optionB": "Presidential, Unicameral-Parliamentary, Bicameral-Parliamentary",
    "optionC": "Legislative, Executive, Judicial",
    "optionD": "The Legislature, The Senate, The Supreme Court",
    "correctAnswer": "C",
    "category": "General Information"
  },
  {
    "text": "The Supreme Court shall be composed of a Chief Justice and how many Associates Justices?",
    "optionA": "12",
    "optionB": "13",
    "optionC": "14",
    "optionD": "15",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The Commander-in-Chief of all armed forces of the Philippines in 2025 is _________.",
    "optionA": "Air Force Commanding General Jeffrey Delgado",
    "optionB": "Ferdinand Marcos Jr.",
    "optionC": "Chief Justice Maria Lourdes Sereno",
    "optionD": "AFP Chief Lieutenant Gen. Emmanuel Bautista",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The executive power shall be vested in the _________.",
    "optionA": "President of the Philippines",
    "optionB": "House of Representatives",
    "optionC": "The Supreme Court",
    "optionD": "The Congress",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The legislative power shall be vested in the _________ which shall consist of a Senate and a House of Representatives.",
    "optionA": "Congress of the Philippines",
    "optionB": "House of Ombudsman",
    "optionC": "The Supreme Court",
    "optionD": "Bureau of Internal Revenue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Senate shall be composed of how many senators elected at large by voters of the Philippines?",
    "optionA": "21",
    "optionB": "22",
    "optionC": "23",
    "optionD": "24",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "How long shall the term of office of the senators be commenced?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The term of office of the President and Vice-president of the Philippines shall be up to how many years?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The members of the House of Representatives shall be elected for a term of _______.",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The following shall be exempted from taxation except:",
    "optionA": "Lands and buildings",
    "optionB": "Churches and convents",
    "optionC": "Charitable institutions",
    "optionD": "Non-profit cemeteries",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Congress, by a vote of ____ of both Houses in joint session assembled, voting separately, shall have the sole power to declare a state of war.",
    "optionA": "Two-thirds",
    "optionB": "One-half",
    "optionC": "Three quarters",
    "optionD": "Minority",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "It states that “no person shall be deprived of life, liberty, or property without due process of law, nor any person be denied the equal protection of the laws.”",
    "optionA": "Article VI",
    "optionB": "Bill of Rights",
    "optionC": "Republic Act",
    "optionD": "Court Order",
    "correctAnswer": "B",
    "category": "General Information"
  }
]


----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_ChartActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import android.graphics.Color

class ChartActivity : ComponentActivity() {
    private val repository by lazy { QuestionRepository(applicationContext) }

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Progress Chart") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {  // Exit on click
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    ScoreChartScreen(modifier = Modifier.padding(innerPadding), sessions = repository.getAllSessions())
                }
            }
        }
    }
}

@Composable
fun ScoreChartScreen(modifier: Modifier = Modifier, sessions: Flow<List<PracticeSession>>) {
    val sessionList by sessions.collectAsState(emptyList())
    val context = LocalContext.current

    AndroidView(
        modifier = modifier.fillMaxSize(),
        factory = { ctx ->
            LineChart(ctx).apply {
                description.text = "Scores Over Time"
                setTouchEnabled(true)
                setDragEnabled(true)
                setScaleEnabled(true)
                setPinchZoom(true)
            }
        },
        update = { chart ->
            val entries = sessionList.mapIndexed { index, session ->
                Entry(index.toFloat(), session.score.toFloat())
            }
            val dataSet = LineDataSet(entries, "Scores")
            dataSet.color = Color.BLUE
            dataSet.valueTextColor = Color.BLACK
            chart.data = LineData(dataSet)
            chart.invalidate()
        }
    )
}

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_data_AppDatabase.kt -----

package com.example.csepractice.data

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase

@Database(entities = [Question::class, PracticeSession::class], version = 5, exportSchema = true)
abstract class AppDatabase : RoomDatabase() {
    abstract fun questionDao(): QuestionDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "cse_database"
                ).addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_4_5)
                    .fallbackToDestructiveMigration()  // For dev, removes data on mismatch
                    .build()
                INSTANCE = instance
                instance
            }
        }

        val MIGRATION_1_2 = object : Migration(1, 2) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasCategory = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "category") {
                            hasCategory = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasCategory) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN category TEXT NOT NULL DEFAULT ''")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasCategories = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "categories") {
                            hasCategories = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasCategories) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN categories TEXT NOT NULL DEFAULT ''")
                }
            }
        }

        val MIGRATION_2_3 = object : Migration(2, 3) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasDifficulty) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN difficulty TEXT NOT NULL DEFAULT 'Medium'")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasTimeTaken = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "timeTaken") {
                            hasTimeTaken = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasTimeTaken) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN timeTaken LONG NOT NULL DEFAULT 0")
                }
            }
        }

        val MIGRATION_3_4 = object : Migration(3, 4) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Empty migration to force version bump and fallback if needed
            }
        }

        val MIGRATION_4_5 = object : Migration(4, 5) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Check if 'difficulty' exists
                val cursor = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursor.getColumnIndex("name")
                if (cursor.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursor.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursor.moveToNext())
                }
                cursor.close()

                if (hasDifficulty) {
                    // Create temp table with current schema (no difficulty)
                    database.execSQL("""
                        CREATE TABLE questions_temp (
                            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                            text TEXT NOT NULL DEFAULT '',
                            optionA TEXT NOT NULL DEFAULT '',
                            optionB TEXT NOT NULL DEFAULT '',
                            optionC TEXT NOT NULL DEFAULT '',
                            optionD TEXT NOT NULL DEFAULT '',
                            correctAnswer TEXT NOT NULL DEFAULT '',
                            category TEXT NOT NULL DEFAULT ''
                        )
                    """.trimIndent())

                    // Copy data, excluding difficulty
                    database.execSQL("""
                        INSERT INTO questions_temp (id, text, optionA, optionB, optionC, optionD, correctAnswer, category)
                        SELECT id, text, optionA, optionB, optionC, optionD, correctAnswer, category FROM questions
                    """.trimIndent())

                    // Drop old table
                    database.execSQL("DROP TABLE questions")

                    // Rename temp to original
                    database.execSQL("ALTER TABLE questions_temp RENAME TO questions")
                }
            }
        }
    }
}

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_data_PracticeSession.kt -----

// app/src/main/java/com/example/csepractice/data/PracticeSession.kt
package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "practice_sessions")
data class PracticeSession(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val date: Long = System.currentTimeMillis(),
    val score: Int,  // e.g., 80 (percentage)
    val correctCount: Int,
    val totalQuestions: Int,
    val categories: String = "",  // Comma-separated or "All"
    val timeTaken: Long = 0  // Total time in milliseconds
)

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_data_Question.kt -----

package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "questions")
data class Question(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val text: String = "",
    val optionA: String = "",
    val optionB: String = "",
    val optionC: String = "",
    val optionD: String = "",
    val correctAnswer: String = "",
    val category: String = ""
)

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_data_QuestionDao.kt -----

package com.example.csepractice.data

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface QuestionDao {
    @Query("SELECT * FROM questions ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestions(count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category = :category ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategory(category: String, count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category IN (:categories) ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>>

    @Query("SELECT DISTINCT category FROM questions")
    fun getCategories(): Flow<List<String>>  // New for dynamic categories

    @Query("SELECT AVG(score) FROM practice_sessions WHERE categories LIKE '%' || :category || '%'")
    fun getAvgByCategory(category: String): Flow<Double>  // New for category avg

    @Insert
    suspend fun insertQuestions(questions: List<Question>)

    @Insert
    suspend fun insertSession(session: PracticeSession)

    @Query("SELECT * FROM practice_sessions ORDER BY date DESC")
    fun getAllSessions(): Flow<List<PracticeSession>>

    @Query("DELETE FROM practice_sessions")
    suspend fun clearAllSessions()
}

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_MainActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.animation.togetherWith
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.example.csepractice.viewmodel.PracticeViewModel
import kotlinx.coroutines.delay
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)  // Default to light mode
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        AppTopBar(onSettingsClick = {
                            val intent = Intent(this@MainActivity, SettingsActivity::class.java)
                            startActivity(intent)
                        })
                    }
                ) { innerPadding ->
                    PracticeScreen(Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppTopBar(onSettingsClick: () -> Unit) {
    TopAppBar(
        title = { Text("CSE Practice") },
        actions = {
            IconButton(onClick = onSettingsClick) {
                Icon(Icons.Default.Settings, contentDescription = "Settings")
            }
        }
    )
}

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun PracticeScreen(modifier: Modifier = Modifier, viewModel: PracticeViewModel = viewModel()) {
    val questions by viewModel.questions.collectAsState()
    val currentIndex by viewModel.currentIndex.collectAsState()
    val selectedAnswers by viewModel.selectedAnswers.collectAsState()
    val score by viewModel.score.collectAsState()
    val sessions by viewModel.sessions.collectAsState(emptyList())
    val selectedCategories by viewModel.selectedCategories.collectAsState()
    val categories by viewModel.categories.collectAsState(emptyList())  // Dynamic
    val context = LocalContext.current

    val visible = remember { mutableStateOf(false) }
    val numQuestions = remember { mutableIntStateOf(10) }  // Default 10
    val isSelecting = remember { mutableStateOf(true) }  // New: Control selector vs loading

    LaunchedEffect(Unit) {
        delay(300)
        visible.value = true
    }

    AnimatedVisibility(visible = visible.value, enter = fadeIn()) {
        if (questions.isEmpty() && score == 0) {  // Selector or loading
            if (categories.isEmpty()) {
                CircularProgressIndicator()  // Loading categories
            } else if (isSelecting.value) {  // Show selector until button press
                Column(
                    modifier = modifier.fillMaxSize().padding(16.dp),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.Start  // Left-align for better readability
                ) {
                    Text("Select Categories:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    categories.forEach { category ->
                        Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(vertical = 4.dp)) {
                            Checkbox(
                                checked = selectedCategories.contains(category),
                                onCheckedChange = { viewModel.toggleCategory(category) }
                            )
                            Spacer(modifier = Modifier.width(8.dp))  // Space between checkbox and text
                            Text(category)
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Text("Number of Questions:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        listOf(10, 20, 30).forEach { num ->
                            RadioButton(selected = numQuestions.intValue == num, onClick = { numQuestions.intValue = num })
                            Text("$num", modifier = Modifier.padding(end = 16.dp))  // Space between options
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(onClick = {
                        isSelecting.value = false
                        viewModel.startPractice(numQuestions.intValue)
                    }, modifier = Modifier.align(Alignment.CenterHorizontally)) {
                        Text("Start Practice")
                    }
                }
            } else {
                Column(modifier = modifier.fillMaxSize(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally) {
                    CircularProgressIndicator(color = MaterialTheme.colorScheme.primary)
                    Text("Loading questions...", modifier = Modifier.padding(top = 16.dp))
                }
            }
        } else if (score > 0) {
            val scrollState = rememberScrollState()
            Column(
                modifier = modifier.fillMaxSize().verticalScroll(scrollState).padding(16.dp),
                verticalArrangement = Arrangement.Center
            ) {
                Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                    Column(modifier = Modifier.padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Your score: $score%", style = MaterialTheme.typography.headlineMedium, color = MaterialTheme.colorScheme.primary)
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            viewModel.resetForNewSession()
                            isSelecting.value = true  // Reset to show selector on new session
                        }) {
                            Icon(Icons.Default.Refresh, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                            Text("Start New Practice")
                        }
                        Spacer(modifier = Modifier.height(8.dp))
                        Button(onClick = { viewModel.practiceWeakAreas() }) {
                            Text("Practice Weak Areas")
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Text("Progress History:", style = MaterialTheme.typography.titleMedium)
                Column {
                    Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                        Text("Date", modifier = Modifier.weight(2f), fontWeight = FontWeight.Bold)
                        Text("Score", modifier = Modifier.weight(1f), fontWeight = FontWeight.Bold)
                    }
                    sessions.forEach { session ->
                        val formattedDate = SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(Date(session.date))
                        Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                            Text(formattedDate, modifier = Modifier.weight(2f))
                            Text("${session.score}%", modifier = Modifier.weight(1f))
                        }
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                val averageScore = if (sessions.isNotEmpty()) {
                    sessions.map { it.score }.average().toInt()
                } else {
                    0
                }
                Text(
                    text = "Average Score: $averageScore%",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text("Category Averages:", style = MaterialTheme.typography.titleMedium)
                categories.forEach { cat ->
                    val avg by viewModel.getAverageForCategory(cat).collectAsState(0.0)
                    Text("$cat: ${avg.toInt()}%")
                }
                Spacer(modifier = Modifier.height(16.dp))
                Button(
                    onClick = {
                        val intent = Intent(context, ChartActivity::class.java)
                        context.startActivity(intent)
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary),
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                ) {
                    Text("View Progress Chart", color = Color.White)
                }
            }
        } else {
            val currentQuestion = questions[currentIndex]
            val isCurrentAnswered = selectedAnswers.containsKey(currentIndex)
            Column(modifier = modifier.fillMaxSize().padding(16.dp)) {
                AnimatedContent(
                    targetState = currentIndex,
                    transitionSpec = {
                        if (targetState > initialState) {
                            slideInHorizontally { width -> width } togetherWith slideOutHorizontally { width -> -width }
                        } else {
                            slideInHorizontally { width -> -width } togetherWith slideOutHorizontally { width -> width }
                        }
                    },
                    label = "questionAnimation"
                ) { index ->
                    val question = questions[index]
                    Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text(question.text, style = MaterialTheme.typography.titleLarge, color = MaterialTheme.colorScheme.primary)
                            listOf(question.optionA, question.optionB, question.optionC, question.optionD).forEachIndexed { optIndex, option ->
                                Row(verticalAlignment = Alignment.CenterVertically) {
                                    RadioButton(
                                        selected = selectedAnswers[index] == optIndex,
                                        onClick = { viewModel.selectAnswer(index, optIndex) }
                                    )
                                    Text(option)
                                }
                            }
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Row(
                    modifier = Modifier.fillMaxWidth().wrapContentHeight(),
                    horizontalArrangement = Arrangement.Center
                ) {
                    Button(onClick = { viewModel.previousQuestion() }, enabled = currentIndex > 0) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                        Text("Previous")
                    }
                    Spacer(modifier = Modifier.width(16.dp))
                    Button(onClick = { viewModel.nextQuestion() }, enabled = currentIndex < questions.size - 1 && isCurrentAnswered) {
                        Text("Next")
                        Icon(Icons.AutoMirrored.Filled.ArrowForward, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                if (currentIndex == questions.size - 1) {
                    Button(
                        onClick = {
                            Toast.makeText(context, "Submit pressed!", Toast.LENGTH_SHORT).show()
                            viewModel.calculateScore()
                        },
                        enabled = isCurrentAnswered,
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    ) {
                        Text("Submit")
                        Icon(Icons.Filled.Check, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
            }
        }
    }
}

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_repository_QuestionRepository.kt -----

package com.example.csepractice.repository

import android.content.Context
import com.example.csepractice.data.AppDatabase
import com.example.csepractice.data.Question
import com.example.csepractice.data.PracticeSession
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull

class QuestionRepository(private val context: Context) {
    val dao = AppDatabase.getDatabase(context).questionDao()

    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>> =
        dao.getRandomQuestionsByCategories(categories, count)

    fun getRandomQuestions(count: Int): Flow<List<Question>> = dao.getRandomQuestions(count)

    suspend fun insertSession(session: PracticeSession) = dao.insertSession(session)

    fun getAllSessions(): Flow<List<PracticeSession>> = dao.getAllSessions()

    suspend fun clearAllSessions() {
        dao.clearAllSessions()
    }

    suspend fun seedQuestionsIfEmpty() {
        // Check if DB is empty
        val questionsFlow = dao.getRandomQuestions(1)
        val questions = questionsFlow.firstOrNull()
        if (questions.isNullOrEmpty()) {
            val json = context.assets.open("questions.json").bufferedReader().use { it.readText() }
            val type = object : TypeToken<List<Question>>() {}.type
            val questions: List<Question> = Gson().fromJson(json, type)
            dao.insertQuestions(questions)
        }
    }
}

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_SettingsActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.csepractice.repository.QuestionRepository
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import android.widget.Toast

class SettingsActivity : ComponentActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Settings") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    SettingsScreen(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@Composable
fun SettingsScreen(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val prefs = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    var isDarkMode by remember { mutableStateOf(prefs.getBoolean("dark_mode", false)) }
    var colorScheme by remember { mutableStateOf(prefs.getString("color_scheme", "Default") ?: "Default") }

    Column(
        modifier = modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Settings", style = MaterialTheme.typography.headlineMedium)

        Spacer(modifier = Modifier.height(32.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            Text("Dark Mode", modifier = Modifier.padding(end = 16.dp))
            Switch(
                checked = isDarkMode,
                onCheckedChange = { enabled ->
                    isDarkMode = enabled
                    with(prefs.edit()) {
                        putBoolean("dark_mode", enabled)
                        apply()
                    }
                }
            )
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text("Color Scheme:")
        Row {
            listOf("Default", "Blue", "Green").forEach { scheme ->
                RadioButton(selected = colorScheme == scheme, onClick = {
                    colorScheme = scheme
                    with(prefs.edit()) {
                        putString("color_scheme", scheme)
                        apply()
                    }
                })
                Text(scheme)
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Button(onClick = {
            val repository = QuestionRepository(context)
            CoroutineScope(Dispatchers.IO).launch {
                repository.clearAllSessions()
            }
            Toast.makeText(context, "History reset!", Toast.LENGTH_SHORT).show()
        }) {
            Text("Reset Progress History")
        }
    }
}

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_SplashActivity.kt -----

package com.example.csepractice

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.delay

class SplashActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            CSEPracticeAppTheme {
                SplashScreen {
                    startActivity(Intent(this@SplashActivity, MainActivity::class.java))
                    finish()
                }
            }
        }
    }
}

@Composable
fun SplashScreen(onTimeout: () -> Unit) {
    LaunchedEffect(Unit) {
        delay(3000)  // 3 seconds
        onTimeout()
    }
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Welcome to CSE Practice App",
            style = MaterialTheme.typography.headlineLarge,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 16.dp)
        )
        Text(
            text = "Inspired by Pearl Jynne Celestino\nBy PJC Inc",
            style = MaterialTheme.typography.bodyMedium,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 32.dp)
        )
        Text("Quick Tips:", style = MaterialTheme.typography.titleMedium)
        Text("1. Practice daily for best results!")
        Text("2. Focus on weak categories using the button.")
        Text("3. Review explanations after tests.")
        Text("4. Aim for 80%+ to pass CSE!")
    }
}

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_ui_theme_Color.kt -----

package com.example.csepractice.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

// New for schemes
val Blue80 = Color(0xFF80D8FF)
val BlueGrey80 = Color(0xFFB3E5FC)
val Blue40 = Color(0xFF0277BD)
val BlueGrey40 = Color(0xFF81D4FA)

val Green80 = Color(0xFFCCFF90)
val GreenGrey80 = Color(0xFFE0F2F1)
val Green40 = Color(0xFF558B2F)
val GreenGrey40 = Color(0xFFA5D6A7)

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_ui_theme_Theme.kt -----

package com.example.csepractice.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40
)

private val BlueColorScheme = lightColorScheme(
    primary = Blue40,
    secondary = BlueGrey40,
    tertiary = Blue80
)

private val GreenColorScheme = lightColorScheme(
    primary = Green40,
    secondary = GreenGrey40,
    tertiary = Green80
)

@Composable
fun CSEPracticeAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val prefs = LocalContext.current.getSharedPreferences("app_prefs", android.content.Context.MODE_PRIVATE)
    val scheme = prefs.getString("color_scheme", "Default") ?: "Default"

    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        scheme == "Blue" -> BlueColorScheme
        scheme == "Green" -> GreenColorScheme
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = androidx.compose.material3.Typography(),  // Fully qualify to avoid conflict
        content = content
    )
}

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_utils_ListConverters.kt -----

package com.example.csepractice.utils

import androidx.room.TypeConverter
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class ListConverters {
    private val gson = Gson()

    @TypeConverter
    fun fromStringList(value: String): List<String> {
        val listType = object : TypeToken<List<String>>() {}.type
        return gson.fromJson(value, listType)
    }

    @TypeConverter
    fun toStringList(list: List<String>): String {
        return gson.toJson(list)
    }
}

----- End of File -----

----- File: flat_project_files\app_src_main_java_com_example_csepractice_viewmodel_PracticeViewModel.kt -----

package com.example.csepractice.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.data.Question
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlin.system.measureTimeMillis

class PracticeViewModel(application: Application) : AndroidViewModel(application) {
    private val repository = QuestionRepository(application)
    private val dao = repository.dao  // For new queries

    private val _questions = MutableStateFlow<List<Question>>(emptyList())
    val questions: StateFlow<List<Question>> = _questions.asStateFlow()

    private val _currentIndex = MutableStateFlow(0)
    val currentIndex: StateFlow<Int> = _currentIndex.asStateFlow()

    private val _selectedAnswers = MutableStateFlow<Map<Int, Int>>(emptyMap())
    val selectedAnswers: StateFlow<Map<Int, Int>> = _selectedAnswers.asStateFlow()

    private val _score = MutableStateFlow(0)
    val score: StateFlow<Int> = _score.asStateFlow()

    private val _selectedCategories = MutableStateFlow<List<String>>(emptyList())
    val selectedCategories: StateFlow<List<String>> = _selectedCategories.asStateFlow()

    val sessions: Flow<List<PracticeSession>> = repository.getAllSessions()

    val categories: Flow<List<String>> = dao.getCategories()  // New dynamic categories

    init {
        viewModelScope.launch {
            repository.seedQuestionsIfEmpty()
            // No auto-load; wait for startPractice
        }
    }

    fun toggleCategory(category: String) {
        val current = _selectedCategories.value.toMutableList()
        if (current.contains(category)) {
            current.remove(category)
        } else {
            current.add(category)
        }
        _selectedCategories.value = current
    }

    fun startPractice(numQuestions: Int) {
        val categories = _selectedCategories.value
        if (categories.isEmpty()) {
            loadAllQuestions(numQuestions)
        } else {
            loadQuestionsForCategories(categories, numQuestions)
        }
    }

    fun practiceWeakAreas(threshold: Double = 70.0) {
        viewModelScope.launch {
            val allCats = categories.first()  // Get list once
            val weak = mutableListOf<String>()
            for (cat in allCats) {
                val avg = getAverageForCategory(cat).first()  // Get avg once
                if (avg < threshold) {
                    weak.add(cat)
                }
            }
            _selectedCategories.value = weak
            if (weak.isNotEmpty()) {
                startPractice(10)  // Default to 10
            }  // Else, perhaps toast "No weak areas!"
        }
    }

    private fun loadQuestionsForCategories(categories: List<String>, count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestionsByCategories(categories, count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    private fun loadAllQuestions(count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestions(count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    fun getAverageForCategory(category: String): Flow<Double> = dao.getAvgByCategory(category)  // New

    fun selectAnswer(questionIndex: Int, optionIndex: Int) {
        _selectedAnswers.value = _selectedAnswers.value.toMutableMap().apply {
            this[questionIndex] = optionIndex
        }
    }

    fun nextQuestion() {
        if (_currentIndex.value < _questions.value.size - 1) {
            _currentIndex.value += 1
        }
    }

    fun previousQuestion() {
        if (_currentIndex.value > 0) {
            _currentIndex.value -= 1
        }
    }

    fun calculateScore() {
        val total = _questions.value.size
        var correct = 0
        _questions.value.forEachIndexed { index, question ->
            val selected = _selectedAnswers.value[index]
            val correctIndex = "ABCD".indexOf(question.correctAnswer)
            if (selected == correctIndex) {
                correct++
            }
        }
        _score.value = if (total > 0) (correct * 100) / total else 0
        viewModelScope.launch {
            repository.insertSession(
                PracticeSession(
                    score = _score.value,
                    correctCount = correct,
                    totalQuestions = total,
                    categories = _selectedCategories.value.joinToString(",")  // Save categories
                )
            )
        }
    }

    fun resetForNewSession() {
        _questions.value = emptyList()
        _currentIndex.value = 0
        _selectedAnswers.value = emptyMap()
        _score.value = 0
        _selectedCategories.value = emptyList()
    }
}

----- End of File -----

----- File: flat_project_files\app_src_main_res_drawable_ic_launcher_background.xml -----

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


----- End of File -----

----- File: flat_project_files\app_src_main_res_drawable_ic_launcher_foreground.xml -----

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

----- End of File -----

----- File: flat_project_files\app_src_main_res_mipmap-anydpi_ic_launcher.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: flat_project_files\app_src_main_res_mipmap-anydpi_ic_launcher_round.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: flat_project_files\app_src_main_res_values_colors.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

----- End of File -----

----- File: flat_project_files\app_src_main_res_values_strings.xml -----

<resources>
    <string name="app_name">CSEPracticeApp</string>
</resources>

----- End of File -----

----- File: flat_project_files\app_src_main_res_values_themes.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.CSEPracticeApp" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

----- End of File -----

----- File: flat_project_files\app_src_main_res_xml_backup_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

----- End of File -----

----- File: flat_project_files\app_src_main_res_xml_data_extraction_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

----- End of File -----

----- File: flat_project_files\app_src_test_java_com_example_csepractice_ExampleUnitTest.kt -----

package com.example.csepractice

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

----- End of File -----

----- File: flat_project_files\build.gradle.kts -----

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_build.gradle.kts -----

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android") version "1.9.24"
    id("org.jetbrains.kotlin.kapt") version "1.9.24"
    id("com.google.devtools.ksp") version "1.9.24-1.0.20"
}

android {
    namespace = "com.example.csepractice"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.csepractice"
        minSdk = 26
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"  // Fix for Kotlin 1.9.24
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation("com.github.PhilJay:MPAndroidChart:v3.1.0")
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.6")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6")
    implementation("androidx.activity:activity-compose:1.9.2")
    implementation(platform("androidx.compose:compose-bom:2024.09.03"))
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.room:room-runtime:2.6.1")
    implementation("androidx.datastore:datastore-preferences:1.1.1")  // Alternative to SharedPreferences, but we'll use SharedPrefs here
    ksp("androidx.room:room-compiler:2.6.1")
    implementation("androidx.room:room-ktx:2.6.1")
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation(platform("androidx.compose:compose-bom:2024.09.03"))
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_androidTest_java_com_example_csepractice_ExampleInstrumentedTest.kt -----

package com.example.csepractice

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.csepractice", appContext.packageName)
    }
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_AndroidManifest.xml -----

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CSEPracticeApp">
        <activity
            android:name=".SplashActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.CSEPracticeApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".MainActivity" android:exported="false" />
        <activity android:name=".ChartActivity" android:exported="false" />
        <activity android:name=".SettingsActivity" />
    </application>

</manifest>

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_assets_questions.json -----

[
  {
    "text": "Identify the synonym of 'eloquent'.",
    "optionA": "Silent",
    "optionB": "Articulate",
    "optionC": "Confused",
    "optionD": "Angry",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Would you like coffee __________ tea?",
    "optionA": "so",
    "optionB": "or",
    "optionC": "but",
    "optionD": "and",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "I like swimming, ______ my sister likes dancing.",
    "optionA": "and",
    "optionB": "or",
    "optionC": "because",
    "optionD": "but",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "The antonym of 'happy' is:",
    "optionA": "Joyful",
    "optionB": "Sad",
    "optionC": "Excited",
    "optionD": "Content",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct spelling: ",
    "optionA": "Recieve",
    "optionB": "Receive",
    "optionC": "Recive",
    "optionD": "Receve",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Complete the analogy: Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence is grammatically correct?",
    "optionA": "He go to school.",
    "optionB": "He goes to school.",
    "optionC": "He going to school.",
    "optionD": "He went to school.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "The word 'fast' can mean:",
    "optionA": "Quick",
    "optionB": "Not eating",
    "optionC": "Both A and B",
    "optionD": "None",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange: The / quick / brown / fox",
    "optionA": "The brown quick fox",
    "optionB": "The quick brown fox",
    "optionC": "Quick the brown fox",
    "optionD": "Brown the quick fox",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main idea of the passage? (Assume a passage)",
    "optionA": "Option A",
    "optionB": "Option B",
    "optionC": "Option C",
    "optionD": "Option D",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which of the following sentences contains an error in subject-verb agreement?",
    "optionA": "The team of players are practicing hard.",
    "optionB": "Each of the students has submitted their assignment.",
    "optionC": "Neither the manager nor the employees is happy with the decision.",
    "optionD": "No error.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct synonym for 'append.'",
    "optionA": "Remove",
    "optionB": "Add",
    "optionC": "Ignore",
    "optionD": "Divide",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In the sentence 'The chef cooked the meal quick,' identify the error.",
    "optionA": "The",
    "optionB": "cooked",
    "optionC": "quick",
    "optionD": "No error.",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange the following sentences to form a coherent paragraph: (1) However, it requires dedication. (2) Studying for exams is essential. (3) In summary, consistent effort pays off. (4) First, create a schedule.",
    "optionA": "2-4-1-3",
    "optionB": "4-2-1-3",
    "optionC": "2-1-4-3",
    "optionD": "1-3-2-4",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the antonym of 'opaque'?",
    "optionA": "Cloudy",
    "optionB": "Clear",
    "optionC": "Thick",
    "optionD": "Dense",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Identify the misspelled word in the sentence: 'The committee will accomodate all requests.'",
    "optionA": "committee",
    "optionB": "will",
    "optionC": "accomodate",
    "optionD": "requests",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct word usage: 'The effect of the new policy _____ immediate.'",
    "optionA": "were",
    "optionB": "was",
    "optionC": "are",
    "optionD": "is being",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In reading comprehension, if a passage states 'The economy is improving, but unemployment remains high,' what is the implied conclusion?",
    "optionA": "Unemployment will decrease soon.",
    "optionB": "Improvement does not solve all issues.",
    "optionC": "The economy is worsening.",
    "optionD": "No conclusion can be drawn.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence demonstrates parallelism?",
    "optionA": "She likes to swim, running, and to hike.",
    "optionB": "She likes swimming, running, and hiking.",
    "optionC": "She likes swim, run, and hiking.",
    "optionD": "She likes to swim, run, and hiking.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the contextual meaning of 'query' in 'Please query the database for updates'?",
    "optionA": "Question",
    "optionB": "Delete",
    "optionC": "Save",
    "optionD": "Ignore",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "2187, 729, 243, 81, 27, 9, ____?",
    "optionA": "6",
    "optionB": "3",
    "optionC": "4",
    "optionD": "2",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "1, 4, 9, 16, 25, 36, 49, 64, ____?",
    "optionA": "81",
    "optionB": "100",
    "optionC": "121",
    "optionD": "144",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "45 increased by what percent of itself gives 90?",
    "optionA": "50%",
    "optionB": "100%",
    "optionC": "200%",
    "optionD": "150%",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "15 is 150% of what number?",
    "optionA": "10",
    "optionB": "20",
    "optionC": "22.5",
    "optionD": "7.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 25% of 80?",
    "optionA": "20",
    "optionB": "25",
    "optionC": "30",
    "optionD": "40",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve: 2 + 3 * 4 - 5",
    "optionA": "9",
    "optionB": "5",
    "optionC": "3",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "The sum of x and 9 is:",
    "optionA": "x-9",
    "optionB": "x*9",
    "optionC": "x+9",
    "optionD": "x/9",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "If 3 apples cost 50 pesos, how much for 12?",
    "optionA": "150",
    "optionB": "200",
    "optionC": "100",
    "optionD": "250",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Find the average of 10, 20, 30.",
    "optionA": "20",
    "optionB": "15",
    "optionC": "25",
    "optionD": "30",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "A plate of special Sisig rice and a bowl of beef noodles costs Php 80. If the bowl of beef noodles costs Php 20 more than the plate of Sisig rice, how much is the bowl of beef noodles?",
    "optionA": "Php 30",
    "optionB": "Php 50",
    "optionC": "Php 60",
    "optionD": "Php 40",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 15% of 200?",
    "optionA": "30",
    "optionB": "25",
    "optionC": "35",
    "optionD": "20",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve for x: 3x + 5 = 20.",
    "optionA": "5",
    "optionB": "6",
    "optionC": "4",
    "optionD": "7",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If a train travels 60 km in 45 minutes, what is its speed in km/h?",
    "optionA": "80",
    "optionB": "90",
    "optionC": "70",
    "optionD": "100",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16?",
    "optionA": "20",
    "optionB": "24",
    "optionC": "32",
    "optionD": "18",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "A store offers a 20% discount on a Php 500 item. What is the final price?",
    "optionA": "Php 400",
    "optionB": "Php 450",
    "optionC": "Php 300",
    "optionD": "Php 350",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve the word problem: If 3 workers build a wall in 4 days, how many days for 6 workers?",
    "optionA": "2",
    "optionB": "3",
    "optionC": "1.5",
    "optionD": "2.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the area of a rectangle with length 10 and width 5?",
    "optionA": "50",
    "optionB": "30",
    "optionC": "40",
    "optionD": "60",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 3/4 to a decimal.",
    "optionA": "0.75",
    "optionB": "0.5",
    "optionC": "0.25",
    "optionD": "1.0",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If y = 2x + 3 and x=4, what is y?",
    "optionA": "11",
    "optionB": "9",
    "optionC": "10",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If all Bloops are Razzies and some Razzies are Lalas, then:",
    "optionA": "All Bloops are LaLAS",
    "optionB": "Some Bloops are LaLas",
    "optionC": "No Bloops are LaLas",
    "optionD": "Cannot determine",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Identify assumption: Students should study hard to pass.",
    "optionA": "Studying hard guarantees pass",
    "optionB": "Not studying leads to failure",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Next in series: A, C, E, G, ____",
    "optionA": "H",
    "optionB": "I",
    "optionC": "J",
    "optionD": "K",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Which is odd one out: Apple, Banana, Carrot, Orange",
    "optionA": "Apple",
    "optionB": "Banana",
    "optionC": "Carrot",
    "optionD": "Orange",
    "correctAnswer": "C",
    "category": "Analytical Ability"
  },
  {
    "text": "If X is Y's brother, Y is Z's sister, Z is X's:",
    "optionA": "Brother",
    "optionB": "Sister",
    "optionC": "Uncle",
    "optionD": "Self",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Conclusion from: All dogs bark. Spot barks. So Spot is a dog.",
    "optionA": "Valid",
    "optionB": "Invalid",
    "optionC": "True",
    "optionD": "False",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Iron: metal :: granite:",
    "optionA": "Marble",
    "optionB": "Rock",
    "optionC": "Sand",
    "optionD": "Solid",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If 2=5, 3=10, 4=17, 5=?",
    "optionA": "26",
    "optionB": "25",
    "optionC": "20",
    "optionD": "22",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Data interpretation: (Assume graph) What is the trend?",
    "optionA": "Increasing",
    "optionB": "Decreasing",
    "optionC": "Stable",
    "optionD": "Varying",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the capital of the Philippines?",
    "optionA": "Manila",
    "optionB": "Cebu",
    "optionC": "Davao",
    "optionD": "Quezon City",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Who is the current President of the Philippines? (As of 2022)",
    "optionA": "Ferdinand Marcos Jr.",
    "optionB": "Rodrigo Duterte",
    "optionC": "Benigno Aquino III",
    "optionD": "Gloria Arroyo",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine Constitution was ratified in:",
    "optionA": "1987",
    "optionB": "1973",
    "optionC": "1935",
    "optionD": "1899",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 is the:",
    "optionA": "Code of Conduct for Public Officials",
    "optionB": "Anti-Graft Law",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The three branches of government are:",
    "optionA": "Executive, Legislative, Judiciary",
    "optionB": "Senate, House, Court",
    "optionC": "President, Congress, Supreme Court",
    "optionD": "All above",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "National hero of the Philippines:",
    "optionA": "Jose Rizal",
    "optionB": "Andres Bonifacio",
    "optionC": "Emilio Aguinaldo",
    "optionD": "Lapu-Lapu",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine flag has colors:",
    "optionA": "Blue, Red, White, Yellow",
    "optionB": "Green, White, Red",
    "optionC": "Blue, White, Red",
    "optionD": "Red, White, Blue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Number of regions in the Philippines:",
    "optionA": "17",
    "optionB": "18",
    "optionC": "16",
    "optionD": "15",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The largest island is:",
    "optionA": "Luzon",
    "optionB": "Mindanao",
    "optionC": "Visayas",
    "optionD": "Palawan",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Independence Day is:",
    "optionA": "June 12",
    "optionB": "July 4",
    "optionC": "August 31",
    "optionD": "April 9",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "According to the Philippine Constitution, what is the minimum age to run for President?",
    "optionA": "35",
    "optionB": "30",
    "optionC": "40",
    "optionD": "25",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 refers to the Code of Conduct and Ethical Standards for:",
    "optionA": "Public Officials and Employees",
    "optionB": "Private Sector Workers",
    "optionC": "Students",
    "optionD": "Military Personnel",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Senators are there in the Philippine Senate?",
    "optionA": "24",
    "optionB": "20",
    "optionC": "30",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What does the Bill of Rights in the Constitution primarily protect?",
    "optionA": "Individual freedoms",
    "optionB": "Economic policies",
    "optionC": "Foreign relations",
    "optionD": "Military powers",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Under RA 6713, what is a prohibited act for public officials?",
    "optionA": "Political neutrality",
    "optionB": "Accepting gifts that create conflict of interest",
    "optionC": "Professionalism",
    "optionD": "Responsiveness to public",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "What branch of government includes the President and Vice President?",
    "optionA": "Executive",
    "optionB": "Legislative",
    "optionC": "Judicial",
    "optionD": "Local",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "In human rights concepts, what does 'peace' involve per the reviewer?",
    "optionA": "Absence of conflict and promotion of justice",
    "optionB": "Military strength",
    "optionC": "Economic growth only",
    "optionD": "Environmental protection",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What is a key norm of conduct under RA 6713?",
    "optionA": "Professionalism",
    "optionB": "Corruption",
    "optionC": "Nepotism",
    "optionD": "Bribery",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Environment Management and Protection in the Constitution emphasizes:",
    "optionA": "Sustainable development",
    "optionB": "Urban expansion",
    "optionC": "Industrial growth without limits",
    "optionD": "Deforestation",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Representatives are in the House based on population?",
    "optionA": "Up to 250 or more",
    "optionB": "Exactly 100",
    "optionC": "24",
    "optionD": "200 fixed",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Every Christian's path is beset by peril.",
    "optionA": "bested",
    "optionB": "frightened",
    "optionC": "surrounded",
    "optionD": "chased",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The power failure at 8 P.M. caused consternation among the barangay's residents.",
    "optionA": "dismay",
    "optionB": "deliberation",
    "optionC": "disability",
    "optionD": "distaste",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "The consensus among the congressmen was that the bill would not be passed.",
    "optionA": "divided",
    "optionB": "controversy",
    "optionC": "gathering",
    "optionD": "agreement",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Tempestuous times preceded the EDSA People Power Revolution.",
    "optionA": "emotionally charged",
    "optionB": "temperate",
    "optionC": "trying",
    "optionD": "peaceful",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Imelda Marcos was known for her ostentatious extravagance.",
    "optionA": "oscillating",
    "optionB": "loud",
    "optionC": "wealthy",
    "optionD": "showy",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Some believe that the treatment for modern-day depression is complete abstinence from social media use.",
    "optionA": "absence",
    "optionB": "avoidance",
    "optionC": "sickness",
    "optionD": "prescription",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Mary Grace Cafe is a favorite rendezvous for all the titas of Manila.",
    "optionA": "hidden retreat",
    "optionB": "hiding place",
    "optionC": "meeting place",
    "optionD": "dining room",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Lola Mona Lisa is so old that her health has regressed to the point that she may die any time soon.",
    "optionA": "remembered",
    "optionB": "alluded",
    "optionC": "deteriorated",
    "optionD": "progressed",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The garrulous taxi driver annoyed most of his passengers especially the introverted ones.",
    "optionA": "talkative",
    "optionB": "gracious",
    "optionC": "sickly",
    "optionD": "grey",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "A less scrupulous plumber could easily have unnecessarily replaced the drainpipes and run up the cost.",
    "optionA": "afraid",
    "optionB": "employed",
    "optionC": "careful",
    "optionD": "infamous",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Mental health awareness)",
    "optionA": "Mental Health Awareness Efforts",
    "optionB": "Government Initiatives in the Philippines",
    "optionC": "Challenges in Mental Health Support",
    "optionD": "Importance of Mental Health",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Which legislation is mentioned in the passage?",
    "optionA": "Healthcare Act",
    "optionB": "Education Act",
    "optionC": "Mental Health Act",
    "optionD": "Social Services Act",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Climate change)",
    "optionA": "Environmental Challenges",
    "optionB": "Government Policies",
    "optionC": "Climate Change",
    "optionD": "Renewable Energy",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "2/5 + 1/4 = ?",
    "optionA": "9/20",
    "optionB": "13/20",
    "optionC": "7/20",
    "optionD": "11/20",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Given the equation 3x + 6 = 15, what is the value of x?",
    "optionA": "3",
    "optionB": "4",
    "optionC": "5",
    "optionD": "6",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16, 32, ?",
    "optionA": "48",
    "optionB": "54",
    "optionC": "64",
    "optionD": "72",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 5, 10, 20, 40, ?",
    "optionA": "60",
    "optionB": "70",
    "optionC": "80",
    "optionD": "100",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 3, 6, 12, 24, ?",
    "optionA": "36",
    "optionB": "48",
    "optionC": "54",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 9, 16, 25, ?",
    "optionA": "30",
    "optionB": "36",
    "optionC": "42",
    "optionD": "49",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 3, 5, 7, 11, ?",
    "optionA": "13",
    "optionB": "14",
    "optionC": "15",
    "optionD": "17",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 8, 16, 24, 32, 40, ?",
    "optionA": "45",
    "optionB": "48",
    "optionC": "50",
    "optionD": "52",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 1, 2, 3, 5, 8, ?",
    "optionA": "10",
    "optionB": "11",
    "optionC": "12",
    "optionD": "13",
    "correctAnswer": "D",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 9, 27, 81, 243, ?",
    "optionA": "324",
    "optionB": "567",
    "optionC": "729",
    "optionD": "810",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 10, 20, 30, 40, ?",
    "optionA": "45",
    "optionB": "50",
    "optionC": "55",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Negligent: requirement: remiss: _____________.",
    "optionA": "duty",
    "optionB": "law",
    "optionC": "task",
    "optionD": "care",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Politician: statesman: ______________: ______________. ",
    "optionA": "lawyer: advocate",
    "optionB": "doctor: physician",
    "optionC": "teacher: educator",
    "optionD": "soldier: warrior",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Caution is to ________ as radar is to ________.",
    "optionA": "signal: wave",
    "optionB": "warning: detection",
    "optionC": "care: speed",
    "optionD": "alert: track",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What are the 3 main branches of the Government of the Philippines?",
    "optionA": "Senate, Supreme Court, Congress",
    "optionB": "Presidential, Unicameral-Parliamentary, Bicameral-Parliamentary",
    "optionC": "Legislative, Executive, Judicial",
    "optionD": "The Legislature, The Senate, The Supreme Court",
    "correctAnswer": "C",
    "category": "General Information"
  },
  {
    "text": "The Supreme Court shall be composed of a Chief Justice and how many Associates Justices?",
    "optionA": "12",
    "optionB": "13",
    "optionC": "14",
    "optionD": "15",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The Commander-in-Chief of all armed forces of the Philippines in 2025 is _________.",
    "optionA": "Air Force Commanding General Jeffrey Delgado",
    "optionB": "Ferdinand Marcos Jr.",
    "optionC": "Chief Justice Maria Lourdes Sereno",
    "optionD": "AFP Chief Lieutenant Gen. Emmanuel Bautista",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The executive power shall be vested in the _________.",
    "optionA": "President of the Philippines",
    "optionB": "House of Representatives",
    "optionC": "The Supreme Court",
    "optionD": "The Congress",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The legislative power shall be vested in the _________ which shall consist of a Senate and a House of Representatives.",
    "optionA": "Congress of the Philippines",
    "optionB": "House of Ombudsman",
    "optionC": "The Supreme Court",
    "optionD": "Bureau of Internal Revenue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Senate shall be composed of how many senators elected at large by voters of the Philippines?",
    "optionA": "21",
    "optionB": "22",
    "optionC": "23",
    "optionD": "24",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "How long shall the term of office of the senators be commenced?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The term of office of the President and Vice-president of the Philippines shall be up to how many years?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The members of the House of Representatives shall be elected for a term of _______.",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The following shall be exempted from taxation except:",
    "optionA": "Lands and buildings",
    "optionB": "Churches and convents",
    "optionC": "Charitable institutions",
    "optionD": "Non-profit cemeteries",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Congress, by a vote of ____ of both Houses in joint session assembled, voting separately, shall have the sole power to declare a state of war.",
    "optionA": "Two-thirds",
    "optionB": "One-half",
    "optionC": "Three quarters",
    "optionD": "Minority",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "It states that “no person shall be deprived of life, liberty, or property without due process of law, nor any person be denied the equal protection of the laws.”",
    "optionA": "Article VI",
    "optionB": "Bill of Rights",
    "optionC": "Republic Act",
    "optionD": "Court Order",
    "correctAnswer": "B",
    "category": "General Information"
  }
]


----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_ChartActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import android.graphics.Color

class ChartActivity : ComponentActivity() {
    private val repository by lazy { QuestionRepository(applicationContext) }

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Progress Chart") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {  // Exit on click
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    ScoreChartScreen(modifier = Modifier.padding(innerPadding), sessions = repository.getAllSessions())
                }
            }
        }
    }
}

@Composable
fun ScoreChartScreen(modifier: Modifier = Modifier, sessions: Flow<List<PracticeSession>>) {
    val sessionList by sessions.collectAsState(emptyList())
    val context = LocalContext.current

    AndroidView(
        modifier = modifier.fillMaxSize(),
        factory = { ctx ->
            LineChart(ctx).apply {
                description.text = "Scores Over Time"
                setTouchEnabled(true)
                setDragEnabled(true)
                setScaleEnabled(true)
                setPinchZoom(true)
            }
        },
        update = { chart ->
            val entries = sessionList.mapIndexed { index, session ->
                Entry(index.toFloat(), session.score.toFloat())
            }
            val dataSet = LineDataSet(entries, "Scores")
            dataSet.color = Color.BLUE
            dataSet.valueTextColor = Color.BLACK
            chart.data = LineData(dataSet)
            chart.invalidate()
        }
    )
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_data_AppDatabase.kt -----

package com.example.csepractice.data

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase

@Database(entities = [Question::class, PracticeSession::class], version = 5, exportSchema = true)
abstract class AppDatabase : RoomDatabase() {
    abstract fun questionDao(): QuestionDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "cse_database"
                ).addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_4_5)
                    .fallbackToDestructiveMigration()  // For dev, removes data on mismatch
                    .build()
                INSTANCE = instance
                instance
            }
        }

        val MIGRATION_1_2 = object : Migration(1, 2) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasCategory = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "category") {
                            hasCategory = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasCategory) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN category TEXT NOT NULL DEFAULT ''")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasCategories = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "categories") {
                            hasCategories = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasCategories) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN categories TEXT NOT NULL DEFAULT ''")
                }
            }
        }

        val MIGRATION_2_3 = object : Migration(2, 3) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasDifficulty) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN difficulty TEXT NOT NULL DEFAULT 'Medium'")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasTimeTaken = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "timeTaken") {
                            hasTimeTaken = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasTimeTaken) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN timeTaken LONG NOT NULL DEFAULT 0")
                }
            }
        }

        val MIGRATION_3_4 = object : Migration(3, 4) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Empty migration to force version bump and fallback if needed
            }
        }

        val MIGRATION_4_5 = object : Migration(4, 5) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Check if 'difficulty' exists
                val cursor = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursor.getColumnIndex("name")
                if (cursor.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursor.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursor.moveToNext())
                }
                cursor.close()

                if (hasDifficulty) {
                    // Create temp table with current schema (no difficulty)
                    database.execSQL("""
                        CREATE TABLE questions_temp (
                            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                            text TEXT NOT NULL DEFAULT '',
                            optionA TEXT NOT NULL DEFAULT '',
                            optionB TEXT NOT NULL DEFAULT '',
                            optionC TEXT NOT NULL DEFAULT '',
                            optionD TEXT NOT NULL DEFAULT '',
                            correctAnswer TEXT NOT NULL DEFAULT '',
                            category TEXT NOT NULL DEFAULT ''
                        )
                    """.trimIndent())

                    // Copy data, excluding difficulty
                    database.execSQL("""
                        INSERT INTO questions_temp (id, text, optionA, optionB, optionC, optionD, correctAnswer, category)
                        SELECT id, text, optionA, optionB, optionC, optionD, correctAnswer, category FROM questions
                    """.trimIndent())

                    // Drop old table
                    database.execSQL("DROP TABLE questions")

                    // Rename temp to original
                    database.execSQL("ALTER TABLE questions_temp RENAME TO questions")
                }
            }
        }
    }
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_data_PracticeSession.kt -----

// app/src/main/java/com/example/csepractice/data/PracticeSession.kt
package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "practice_sessions")
data class PracticeSession(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val date: Long = System.currentTimeMillis(),
    val score: Int,  // e.g., 80 (percentage)
    val correctCount: Int,
    val totalQuestions: Int,
    val categories: String = "",  // Comma-separated or "All"
    val timeTaken: Long = 0  // Total time in milliseconds
)

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_data_Question.kt -----

package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "questions")
data class Question(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val text: String = "",
    val optionA: String = "",
    val optionB: String = "",
    val optionC: String = "",
    val optionD: String = "",
    val correctAnswer: String = "",
    val category: String = ""
)

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_data_QuestionDao.kt -----

package com.example.csepractice.data

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface QuestionDao {
    @Query("SELECT * FROM questions ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestions(count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category = :category ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategory(category: String, count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category IN (:categories) ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>>

    @Query("SELECT DISTINCT category FROM questions")
    fun getCategories(): Flow<List<String>>  // New for dynamic categories

    @Query("SELECT AVG(score) FROM practice_sessions WHERE categories LIKE '%' || :category || '%'")
    fun getAvgByCategory(category: String): Flow<Double>  // New for category avg

    @Insert
    suspend fun insertQuestions(questions: List<Question>)

    @Insert
    suspend fun insertSession(session: PracticeSession)

    @Query("SELECT * FROM practice_sessions ORDER BY date DESC")
    fun getAllSessions(): Flow<List<PracticeSession>>

    @Query("DELETE FROM practice_sessions")
    suspend fun clearAllSessions()
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_MainActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.animation.togetherWith
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.example.csepractice.viewmodel.PracticeViewModel
import kotlinx.coroutines.delay
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)  // Default to light mode
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        AppTopBar(onSettingsClick = {
                            val intent = Intent(this@MainActivity, SettingsActivity::class.java)
                            startActivity(intent)
                        })
                    }
                ) { innerPadding ->
                    PracticeScreen(Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppTopBar(onSettingsClick: () -> Unit) {
    TopAppBar(
        title = { Text("CSE Practice") },
        actions = {
            IconButton(onClick = onSettingsClick) {
                Icon(Icons.Default.Settings, contentDescription = "Settings")
            }
        }
    )
}

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun PracticeScreen(modifier: Modifier = Modifier, viewModel: PracticeViewModel = viewModel()) {
    val questions by viewModel.questions.collectAsState()
    val currentIndex by viewModel.currentIndex.collectAsState()
    val selectedAnswers by viewModel.selectedAnswers.collectAsState()
    val score by viewModel.score.collectAsState()
    val sessions by viewModel.sessions.collectAsState(emptyList())
    val selectedCategories by viewModel.selectedCategories.collectAsState()
    val categories by viewModel.categories.collectAsState(emptyList())  // Dynamic
    val context = LocalContext.current

    val visible = remember { mutableStateOf(false) }
    val numQuestions = remember { mutableIntStateOf(10) }  // Default 10
    val isSelecting = remember { mutableStateOf(true) }  // New: Control selector vs loading

    LaunchedEffect(Unit) {
        delay(300)
        visible.value = true
    }

    AnimatedVisibility(visible = visible.value, enter = fadeIn()) {
        if (questions.isEmpty() && score == 0) {  // Selector or loading
            if (categories.isEmpty()) {
                CircularProgressIndicator()  // Loading categories
            } else if (isSelecting.value) {  // Show selector until button press
                Column(
                    modifier = modifier.fillMaxSize().padding(16.dp),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.Start  // Left-align for better readability
                ) {
                    Text("Select Categories:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    categories.forEach { category ->
                        Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(vertical = 4.dp)) {
                            Checkbox(
                                checked = selectedCategories.contains(category),
                                onCheckedChange = { viewModel.toggleCategory(category) }
                            )
                            Spacer(modifier = Modifier.width(8.dp))  // Space between checkbox and text
                            Text(category)
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Text("Number of Questions:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        listOf(10, 20, 30).forEach { num ->
                            RadioButton(selected = numQuestions.intValue == num, onClick = { numQuestions.intValue = num })
                            Text("$num", modifier = Modifier.padding(end = 16.dp))  // Space between options
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(onClick = {
                        isSelecting.value = false
                        viewModel.startPractice(numQuestions.intValue)
                    }, modifier = Modifier.align(Alignment.CenterHorizontally)) {
                        Text("Start Practice")
                    }
                }
            } else {
                Column(modifier = modifier.fillMaxSize(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally) {
                    CircularProgressIndicator(color = MaterialTheme.colorScheme.primary)
                    Text("Loading questions...", modifier = Modifier.padding(top = 16.dp))
                }
            }
        } else if (score > 0) {
            val scrollState = rememberScrollState()
            Column(
                modifier = modifier.fillMaxSize().verticalScroll(scrollState).padding(16.dp),
                verticalArrangement = Arrangement.Center
            ) {
                Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                    Column(modifier = Modifier.padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Your score: $score%", style = MaterialTheme.typography.headlineMedium, color = MaterialTheme.colorScheme.primary)
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            viewModel.resetForNewSession()
                            isSelecting.value = true  // Reset to show selector on new session
                        }) {
                            Icon(Icons.Default.Refresh, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                            Text("Start New Practice")
                        }
                        Spacer(modifier = Modifier.height(8.dp))
                        Button(onClick = { viewModel.practiceWeakAreas() }) {
                            Text("Practice Weak Areas")
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Text("Progress History:", style = MaterialTheme.typography.titleMedium)
                Column {
                    Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                        Text("Date", modifier = Modifier.weight(2f), fontWeight = FontWeight.Bold)
                        Text("Score", modifier = Modifier.weight(1f), fontWeight = FontWeight.Bold)
                    }
                    sessions.forEach { session ->
                        val formattedDate = SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(Date(session.date))
                        Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                            Text(formattedDate, modifier = Modifier.weight(2f))
                            Text("${session.score}%", modifier = Modifier.weight(1f))
                        }
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                val averageScore = if (sessions.isNotEmpty()) {
                    sessions.map { it.score }.average().toInt()
                } else {
                    0
                }
                Text(
                    text = "Average Score: $averageScore%",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text("Category Averages:", style = MaterialTheme.typography.titleMedium)
                categories.forEach { cat ->
                    val avg by viewModel.getAverageForCategory(cat).collectAsState(0.0)
                    Text("$cat: ${avg.toInt()}%")
                }
                Spacer(modifier = Modifier.height(16.dp))
                Button(
                    onClick = {
                        val intent = Intent(context, ChartActivity::class.java)
                        context.startActivity(intent)
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary),
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                ) {
                    Text("View Progress Chart", color = Color.White)
                }
            }
        } else {
            val currentQuestion = questions[currentIndex]
            val isCurrentAnswered = selectedAnswers.containsKey(currentIndex)
            Column(modifier = modifier.fillMaxSize().padding(16.dp)) {
                AnimatedContent(
                    targetState = currentIndex,
                    transitionSpec = {
                        if (targetState > initialState) {
                            slideInHorizontally { width -> width } togetherWith slideOutHorizontally { width -> -width }
                        } else {
                            slideInHorizontally { width -> -width } togetherWith slideOutHorizontally { width -> width }
                        }
                    },
                    label = "questionAnimation"
                ) { index ->
                    val question = questions[index]
                    Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text(question.text, style = MaterialTheme.typography.titleLarge, color = MaterialTheme.colorScheme.primary)
                            listOf(question.optionA, question.optionB, question.optionC, question.optionD).forEachIndexed { optIndex, option ->
                                Row(verticalAlignment = Alignment.CenterVertically) {
                                    RadioButton(
                                        selected = selectedAnswers[index] == optIndex,
                                        onClick = { viewModel.selectAnswer(index, optIndex) }
                                    )
                                    Text(option)
                                }
                            }
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Row(
                    modifier = Modifier.fillMaxWidth().wrapContentHeight(),
                    horizontalArrangement = Arrangement.Center
                ) {
                    Button(onClick = { viewModel.previousQuestion() }, enabled = currentIndex > 0) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                        Text("Previous")
                    }
                    Spacer(modifier = Modifier.width(16.dp))
                    Button(onClick = { viewModel.nextQuestion() }, enabled = currentIndex < questions.size - 1 && isCurrentAnswered) {
                        Text("Next")
                        Icon(Icons.AutoMirrored.Filled.ArrowForward, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                if (currentIndex == questions.size - 1) {
                    Button(
                        onClick = {
                            Toast.makeText(context, "Submit pressed!", Toast.LENGTH_SHORT).show()
                            viewModel.calculateScore()
                        },
                        enabled = isCurrentAnswered,
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    ) {
                        Text("Submit")
                        Icon(Icons.Filled.Check, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
            }
        }
    }
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_repository_QuestionRepository.kt -----

package com.example.csepractice.repository

import android.content.Context
import com.example.csepractice.data.AppDatabase
import com.example.csepractice.data.Question
import com.example.csepractice.data.PracticeSession
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull

class QuestionRepository(private val context: Context) {
    val dao = AppDatabase.getDatabase(context).questionDao()

    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>> =
        dao.getRandomQuestionsByCategories(categories, count)

    fun getRandomQuestions(count: Int): Flow<List<Question>> = dao.getRandomQuestions(count)

    suspend fun insertSession(session: PracticeSession) = dao.insertSession(session)

    fun getAllSessions(): Flow<List<PracticeSession>> = dao.getAllSessions()

    suspend fun clearAllSessions() {
        dao.clearAllSessions()
    }

    suspend fun seedQuestionsIfEmpty() {
        // Check if DB is empty
        val questionsFlow = dao.getRandomQuestions(1)
        val questions = questionsFlow.firstOrNull()
        if (questions.isNullOrEmpty()) {
            val json = context.assets.open("questions.json").bufferedReader().use { it.readText() }
            val type = object : TypeToken<List<Question>>() {}.type
            val questions: List<Question> = Gson().fromJson(json, type)
            dao.insertQuestions(questions)
        }
    }
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_SettingsActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.csepractice.repository.QuestionRepository
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import android.widget.Toast

class SettingsActivity : ComponentActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Settings") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    SettingsScreen(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@Composable
fun SettingsScreen(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val prefs = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    var isDarkMode by remember { mutableStateOf(prefs.getBoolean("dark_mode", false)) }
    var colorScheme by remember { mutableStateOf(prefs.getString("color_scheme", "Default") ?: "Default") }

    Column(
        modifier = modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Settings", style = MaterialTheme.typography.headlineMedium)

        Spacer(modifier = Modifier.height(32.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            Text("Dark Mode", modifier = Modifier.padding(end = 16.dp))
            Switch(
                checked = isDarkMode,
                onCheckedChange = { enabled ->
                    isDarkMode = enabled
                    with(prefs.edit()) {
                        putBoolean("dark_mode", enabled)
                        apply()
                    }
                }
            )
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text("Color Scheme:")
        Row {
            listOf("Default", "Blue", "Green").forEach { scheme ->
                RadioButton(selected = colorScheme == scheme, onClick = {
                    colorScheme = scheme
                    with(prefs.edit()) {
                        putString("color_scheme", scheme)
                        apply()
                    }
                })
                Text(scheme)
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Button(onClick = {
            val repository = QuestionRepository(context)
            CoroutineScope(Dispatchers.IO).launch {
                repository.clearAllSessions()
            }
            Toast.makeText(context, "History reset!", Toast.LENGTH_SHORT).show()
        }) {
            Text("Reset Progress History")
        }
    }
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_SplashActivity.kt -----

package com.example.csepractice

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.delay

class SplashActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            CSEPracticeAppTheme {
                SplashScreen {
                    startActivity(Intent(this@SplashActivity, MainActivity::class.java))
                    finish()
                }
            }
        }
    }
}

@Composable
fun SplashScreen(onTimeout: () -> Unit) {
    LaunchedEffect(Unit) {
        delay(3000)  // 3 seconds
        onTimeout()
    }
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Welcome to CSE Practice App",
            style = MaterialTheme.typography.headlineLarge,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 16.dp)
        )
        Text(
            text = "Inspired by Pearl Jynne Celestino\nBy PJC Inc",
            style = MaterialTheme.typography.bodyMedium,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 32.dp)
        )
        Text("Quick Tips:", style = MaterialTheme.typography.titleMedium)
        Text("1. Practice daily for best results!")
        Text("2. Focus on weak categories using the button.")
        Text("3. Review explanations after tests.")
        Text("4. Aim for 80%+ to pass CSE!")
    }
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_ui_theme_Color.kt -----

package com.example.csepractice.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

// New for schemes
val Blue80 = Color(0xFF80D8FF)
val BlueGrey80 = Color(0xFFB3E5FC)
val Blue40 = Color(0xFF0277BD)
val BlueGrey40 = Color(0xFF81D4FA)

val Green80 = Color(0xFFCCFF90)
val GreenGrey80 = Color(0xFFE0F2F1)
val Green40 = Color(0xFF558B2F)
val GreenGrey40 = Color(0xFFA5D6A7)

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_ui_theme_Theme.kt -----

package com.example.csepractice.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40
)

private val BlueColorScheme = lightColorScheme(
    primary = Blue40,
    secondary = BlueGrey40,
    tertiary = Blue80
)

private val GreenColorScheme = lightColorScheme(
    primary = Green40,
    secondary = GreenGrey40,
    tertiary = Green80
)

@Composable
fun CSEPracticeAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val prefs = LocalContext.current.getSharedPreferences("app_prefs", android.content.Context.MODE_PRIVATE)
    val scheme = prefs.getString("color_scheme", "Default") ?: "Default"

    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        scheme == "Blue" -> BlueColorScheme
        scheme == "Green" -> GreenColorScheme
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = androidx.compose.material3.Typography(),  // Fully qualify to avoid conflict
        content = content
    )
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_utils_ListConverters.kt -----

package com.example.csepractice.utils

import androidx.room.TypeConverter
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class ListConverters {
    private val gson = Gson()

    @TypeConverter
    fun fromStringList(value: String): List<String> {
        val listType = object : TypeToken<List<String>>() {}.type
        return gson.fromJson(value, listType)
    }

    @TypeConverter
    fun toStringList(list: List<String>): String {
        return gson.toJson(list)
    }
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_java_com_example_csepractice_viewmodel_PracticeViewModel.kt -----

package com.example.csepractice.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.data.Question
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlin.system.measureTimeMillis

class PracticeViewModel(application: Application) : AndroidViewModel(application) {
    private val repository = QuestionRepository(application)
    private val dao = repository.dao  // For new queries

    private val _questions = MutableStateFlow<List<Question>>(emptyList())
    val questions: StateFlow<List<Question>> = _questions.asStateFlow()

    private val _currentIndex = MutableStateFlow(0)
    val currentIndex: StateFlow<Int> = _currentIndex.asStateFlow()

    private val _selectedAnswers = MutableStateFlow<Map<Int, Int>>(emptyMap())
    val selectedAnswers: StateFlow<Map<Int, Int>> = _selectedAnswers.asStateFlow()

    private val _score = MutableStateFlow(0)
    val score: StateFlow<Int> = _score.asStateFlow()

    private val _selectedCategories = MutableStateFlow<List<String>>(emptyList())
    val selectedCategories: StateFlow<List<String>> = _selectedCategories.asStateFlow()

    val sessions: Flow<List<PracticeSession>> = repository.getAllSessions()

    val categories: Flow<List<String>> = dao.getCategories()  // New dynamic categories

    init {
        viewModelScope.launch {
            repository.seedQuestionsIfEmpty()
            // No auto-load; wait for startPractice
        }
    }

    fun toggleCategory(category: String) {
        val current = _selectedCategories.value.toMutableList()
        if (current.contains(category)) {
            current.remove(category)
        } else {
            current.add(category)
        }
        _selectedCategories.value = current
    }

    fun startPractice(numQuestions: Int) {
        val categories = _selectedCategories.value
        if (categories.isEmpty()) {
            loadAllQuestions(numQuestions)
        } else {
            loadQuestionsForCategories(categories, numQuestions)
        }
    }

    fun practiceWeakAreas(threshold: Double = 70.0) {
        viewModelScope.launch {
            val allCats = categories.first()  // Get list once
            val weak = mutableListOf<String>()
            for (cat in allCats) {
                val avg = getAverageForCategory(cat).first()  // Get avg once
                if (avg < threshold) {
                    weak.add(cat)
                }
            }
            _selectedCategories.value = weak
            if (weak.isNotEmpty()) {
                startPractice(10)  // Default to 10
            }  // Else, perhaps toast "No weak areas!"
        }
    }

    private fun loadQuestionsForCategories(categories: List<String>, count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestionsByCategories(categories, count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    private fun loadAllQuestions(count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestions(count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    fun getAverageForCategory(category: String): Flow<Double> = dao.getAvgByCategory(category)  // New

    fun selectAnswer(questionIndex: Int, optionIndex: Int) {
        _selectedAnswers.value = _selectedAnswers.value.toMutableMap().apply {
            this[questionIndex] = optionIndex
        }
    }

    fun nextQuestion() {
        if (_currentIndex.value < _questions.value.size - 1) {
            _currentIndex.value += 1
        }
    }

    fun previousQuestion() {
        if (_currentIndex.value > 0) {
            _currentIndex.value -= 1
        }
    }

    fun calculateScore() {
        val total = _questions.value.size
        var correct = 0
        _questions.value.forEachIndexed { index, question ->
            val selected = _selectedAnswers.value[index]
            val correctIndex = "ABCD".indexOf(question.correctAnswer)
            if (selected == correctIndex) {
                correct++
            }
        }
        _score.value = if (total > 0) (correct * 100) / total else 0
        viewModelScope.launch {
            repository.insertSession(
                PracticeSession(
                    score = _score.value,
                    correctCount = correct,
                    totalQuestions = total,
                    categories = _selectedCategories.value.joinToString(",")  // Save categories
                )
            )
        }
    }

    fun resetForNewSession() {
        _questions.value = emptyList()
        _currentIndex.value = 0
        _selectedAnswers.value = emptyMap()
        _score.value = 0
        _selectedCategories.value = emptyList()
    }
}

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_res_drawable_ic_launcher_background.xml -----

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_res_drawable_ic_launcher_foreground.xml -----

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_res_mipmap-anydpi_ic_launcher.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_res_mipmap-anydpi_ic_launcher_round.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_res_values_colors.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_res_values_strings.xml -----

<resources>
    <string name="app_name">CSEPracticeApp</string>
</resources>

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_res_values_themes.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.CSEPracticeApp" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_res_xml_backup_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_main_res_xml_data_extraction_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

----- End of File -----

----- File: flat_project_files\flat_project_files_app_src_test_java_com_example_csepractice_ExampleUnitTest.kt -----

package com.example.csepractice

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

----- End of File -----

----- File: flat_project_files\flat_project_files_build.gradle.kts -----

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}

----- End of File -----

----- File: flat_project_files\flat_project_files_gradlew -----

#!/bin/sh

#
# Copyright © 2015 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"


----- End of File -----

----- File: flat_project_files\flat_project_files_gradlew.bat -----

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


----- End of File -----

----- File: flat_project_files\flat_project_files_settings.gradle.kts -----

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    plugins {
        id("com.android.application") version "8.5.2"
        id("org.jetbrains.kotlin.android") version "1.9.24"
        id("org.jetbrains.kotlin.plugin.compose") version "1.9.24"
        id("org.jetbrains.kotlin.kapt") version "1.9.24"
        id("com.google.devtools.ksp") version "1.9.24-1.0.20"
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven("https://jitpack.io")  // Add this for MPAndroidChart
    }
}

rootProject.name = "CSEPracticeApp"
include(":app")

----- End of File -----

----- File: flat_project_files\gradlew -----

#!/bin/sh

#
# Copyright © 2015 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"


----- End of File -----

----- File: flat_project_files\gradlew.bat -----

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


----- End of File -----

----- File: flat_project_files\gradle_libs.versions.toml -----

[versions]
agp = "8.13.0"
kotlin = "2.0.21"
coreKtx = "1.10.1"
junit = "4.13.2"
junitVersion = "1.1.5"
espressoCore = "3.5.1"
lifecycleRuntimeKtx = "2.6.1"
activityCompose = "1.8.0"
composeBom = "2024.09.00"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-compose-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-compose-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-compose-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-compose-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-compose-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-compose-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-compose-material3 = { group = "androidx.compose.material3", name = "material3" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }



----- End of File -----

----- File: flat_project_files\settings.gradle.kts -----

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    plugins {
        id("com.android.application") version "8.5.2"
        id("org.jetbrains.kotlin.android") version "1.9.24"
        id("org.jetbrains.kotlin.plugin.compose") version "1.9.24"
        id("org.jetbrains.kotlin.kapt") version "1.9.24"
        id("com.google.devtools.ksp") version "1.9.24-1.0.20"
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven("https://jitpack.io")  // Add this for MPAndroidChart
    }
}

rootProject.name = "CSEPracticeApp"
include(":app")

----- End of File -----

----- File: flat_project_files\shared_project_files_app_build.gradle.kts -----

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android") version "1.9.24"
    id("org.jetbrains.kotlin.kapt") version "1.9.24"
    id("com.google.devtools.ksp") version "1.9.24-1.0.20"
}

android {
    namespace = "com.example.csepractice"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.csepractice"
        minSdk = 26
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"  // Fix for Kotlin 1.9.24
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation("com.github.PhilJay:MPAndroidChart:v3.1.0")
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.6")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6")
    implementation("androidx.activity:activity-compose:1.9.2")
    implementation(platform("androidx.compose:compose-bom:2024.09.03"))
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.room:room-runtime:2.6.1")
    implementation("androidx.datastore:datastore-preferences:1.1.1")  // Alternative to SharedPreferences, but we'll use SharedPrefs here
    ksp("androidx.room:room-compiler:2.6.1")
    implementation("androidx.room:room-ktx:2.6.1")
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation(platform("androidx.compose:compose-bom:2024.09.03"))
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_androidTest_java_com_example_csepractice_ExampleInstrumentedTest.kt -----

package com.example.csepractice

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.csepractice", appContext.packageName)
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_AndroidManifest.xml -----

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CSEPracticeApp">
        <activity
            android:name=".SplashActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.CSEPracticeApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".MainActivity" android:exported="false" />
        <activity android:name=".ChartActivity" android:exported="false" />
        <activity android:name=".SettingsActivity" />
    </application>

</manifest>

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_assets_questions.json -----

[
  {
    "text": "Identify the synonym of 'eloquent'.",
    "optionA": "Silent",
    "optionB": "Articulate",
    "optionC": "Confused",
    "optionD": "Angry",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Would you like coffee __________ tea?",
    "optionA": "so",
    "optionB": "or",
    "optionC": "but",
    "optionD": "and",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "I like swimming, ______ my sister likes dancing.",
    "optionA": "and",
    "optionB": "or",
    "optionC": "because",
    "optionD": "but",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "The antonym of 'happy' is:",
    "optionA": "Joyful",
    "optionB": "Sad",
    "optionC": "Excited",
    "optionD": "Content",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct spelling: ",
    "optionA": "Recieve",
    "optionB": "Receive",
    "optionC": "Recive",
    "optionD": "Receve",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Complete the analogy: Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence is grammatically correct?",
    "optionA": "He go to school.",
    "optionB": "He goes to school.",
    "optionC": "He going to school.",
    "optionD": "He went to school.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "The word 'fast' can mean:",
    "optionA": "Quick",
    "optionB": "Not eating",
    "optionC": "Both A and B",
    "optionD": "None",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange: The / quick / brown / fox",
    "optionA": "The brown quick fox",
    "optionB": "The quick brown fox",
    "optionC": "Quick the brown fox",
    "optionD": "Brown the quick fox",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main idea of the passage? (Assume a passage)",
    "optionA": "Option A",
    "optionB": "Option B",
    "optionC": "Option C",
    "optionD": "Option D",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which of the following sentences contains an error in subject-verb agreement?",
    "optionA": "The team of players are practicing hard.",
    "optionB": "Each of the students has submitted their assignment.",
    "optionC": "Neither the manager nor the employees is happy with the decision.",
    "optionD": "No error.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct synonym for 'append.'",
    "optionA": "Remove",
    "optionB": "Add",
    "optionC": "Ignore",
    "optionD": "Divide",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In the sentence 'The chef cooked the meal quick,' identify the error.",
    "optionA": "The",
    "optionB": "cooked",
    "optionC": "quick",
    "optionD": "No error.",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange the following sentences to form a coherent paragraph: (1) However, it requires dedication. (2) Studying for exams is essential. (3) In summary, consistent effort pays off. (4) First, create a schedule.",
    "optionA": "2-4-1-3",
    "optionB": "4-2-1-3",
    "optionC": "2-1-4-3",
    "optionD": "1-3-2-4",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the antonym of 'opaque'?",
    "optionA": "Cloudy",
    "optionB": "Clear",
    "optionC": "Thick",
    "optionD": "Dense",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Identify the misspelled word in the sentence: 'The committee will accomodate all requests.'",
    "optionA": "committee",
    "optionB": "will",
    "optionC": "accomodate",
    "optionD": "requests",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct word usage: 'The effect of the new policy _____ immediate.'",
    "optionA": "were",
    "optionB": "was",
    "optionC": "are",
    "optionD": "is being",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In reading comprehension, if a passage states 'The economy is improving, but unemployment remains high,' what is the implied conclusion?",
    "optionA": "Unemployment will decrease soon.",
    "optionB": "Improvement does not solve all issues.",
    "optionC": "The economy is worsening.",
    "optionD": "No conclusion can be drawn.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence demonstrates parallelism?",
    "optionA": "She likes to swim, running, and to hike.",
    "optionB": "She likes swimming, running, and hiking.",
    "optionC": "She likes swim, run, and hiking.",
    "optionD": "She likes to swim, run, and hiking.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the contextual meaning of 'query' in 'Please query the database for updates'?",
    "optionA": "Question",
    "optionB": "Delete",
    "optionC": "Save",
    "optionD": "Ignore",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "2187, 729, 243, 81, 27, 9, ____?",
    "optionA": "6",
    "optionB": "3",
    "optionC": "4",
    "optionD": "2",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "1, 4, 9, 16, 25, 36, 49, 64, ____?",
    "optionA": "81",
    "optionB": "100",
    "optionC": "121",
    "optionD": "144",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "45 increased by what percent of itself gives 90?",
    "optionA": "50%",
    "optionB": "100%",
    "optionC": "200%",
    "optionD": "150%",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "15 is 150% of what number?",
    "optionA": "10",
    "optionB": "20",
    "optionC": "22.5",
    "optionD": "7.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 25% of 80?",
    "optionA": "20",
    "optionB": "25",
    "optionC": "30",
    "optionD": "40",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve: 2 + 3 * 4 - 5",
    "optionA": "9",
    "optionB": "5",
    "optionC": "3",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "The sum of x and 9 is:",
    "optionA": "x-9",
    "optionB": "x*9",
    "optionC": "x+9",
    "optionD": "x/9",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "If 3 apples cost 50 pesos, how much for 12?",
    "optionA": "150",
    "optionB": "200",
    "optionC": "100",
    "optionD": "250",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Find the average of 10, 20, 30.",
    "optionA": "20",
    "optionB": "15",
    "optionC": "25",
    "optionD": "30",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "A plate of special Sisig rice and a bowl of beef noodles costs Php 80. If the bowl of beef noodles costs Php 20 more than the plate of Sisig rice, how much is the bowl of beef noodles?",
    "optionA": "Php 30",
    "optionB": "Php 50",
    "optionC": "Php 60",
    "optionD": "Php 40",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 15% of 200?",
    "optionA": "30",
    "optionB": "25",
    "optionC": "35",
    "optionD": "20",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve for x: 3x + 5 = 20.",
    "optionA": "5",
    "optionB": "6",
    "optionC": "4",
    "optionD": "7",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If a train travels 60 km in 45 minutes, what is its speed in km/h?",
    "optionA": "80",
    "optionB": "90",
    "optionC": "70",
    "optionD": "100",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16?",
    "optionA": "20",
    "optionB": "24",
    "optionC": "32",
    "optionD": "18",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "A store offers a 20% discount on a Php 500 item. What is the final price?",
    "optionA": "Php 400",
    "optionB": "Php 450",
    "optionC": "Php 300",
    "optionD": "Php 350",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve the word problem: If 3 workers build a wall in 4 days, how many days for 6 workers?",
    "optionA": "2",
    "optionB": "3",
    "optionC": "1.5",
    "optionD": "2.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the area of a rectangle with length 10 and width 5?",
    "optionA": "50",
    "optionB": "30",
    "optionC": "40",
    "optionD": "60",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 3/4 to a decimal.",
    "optionA": "0.75",
    "optionB": "0.5",
    "optionC": "0.25",
    "optionD": "1.0",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If y = 2x + 3 and x=4, what is y?",
    "optionA": "11",
    "optionB": "9",
    "optionC": "10",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If all Bloops are Razzies and some Razzies are Lalas, then:",
    "optionA": "All Bloops are LaLAS",
    "optionB": "Some Bloops are LaLas",
    "optionC": "No Bloops are LaLas",
    "optionD": "Cannot determine",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Identify assumption: Students should study hard to pass.",
    "optionA": "Studying hard guarantees pass",
    "optionB": "Not studying leads to failure",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Next in series: A, C, E, G, ____",
    "optionA": "H",
    "optionB": "I",
    "optionC": "J",
    "optionD": "K",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Which is odd one out: Apple, Banana, Carrot, Orange",
    "optionA": "Apple",
    "optionB": "Banana",
    "optionC": "Carrot",
    "optionD": "Orange",
    "correctAnswer": "C",
    "category": "Analytical Ability"
  },
  {
    "text": "If X is Y's brother, Y is Z's sister, Z is X's:",
    "optionA": "Brother",
    "optionB": "Sister",
    "optionC": "Uncle",
    "optionD": "Self",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Conclusion from: All dogs bark. Spot barks. So Spot is a dog.",
    "optionA": "Valid",
    "optionB": "Invalid",
    "optionC": "True",
    "optionD": "False",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Iron: metal :: granite:",
    "optionA": "Marble",
    "optionB": "Rock",
    "optionC": "Sand",
    "optionD": "Solid",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If 2=5, 3=10, 4=17, 5=?",
    "optionA": "26",
    "optionB": "25",
    "optionC": "20",
    "optionD": "22",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Data interpretation: (Assume graph) What is the trend?",
    "optionA": "Increasing",
    "optionB": "Decreasing",
    "optionC": "Stable",
    "optionD": "Varying",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the capital of the Philippines?",
    "optionA": "Manila",
    "optionB": "Cebu",
    "optionC": "Davao",
    "optionD": "Quezon City",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Who is the current President of the Philippines? (As of 2022)",
    "optionA": "Ferdinand Marcos Jr.",
    "optionB": "Rodrigo Duterte",
    "optionC": "Benigno Aquino III",
    "optionD": "Gloria Arroyo",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine Constitution was ratified in:",
    "optionA": "1987",
    "optionB": "1973",
    "optionC": "1935",
    "optionD": "1899",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 is the:",
    "optionA": "Code of Conduct for Public Officials",
    "optionB": "Anti-Graft Law",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The three branches of government are:",
    "optionA": "Executive, Legislative, Judiciary",
    "optionB": "Senate, House, Court",
    "optionC": "President, Congress, Supreme Court",
    "optionD": "All above",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "National hero of the Philippines:",
    "optionA": "Jose Rizal",
    "optionB": "Andres Bonifacio",
    "optionC": "Emilio Aguinaldo",
    "optionD": "Lapu-Lapu",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine flag has colors:",
    "optionA": "Blue, Red, White, Yellow",
    "optionB": "Green, White, Red",
    "optionC": "Blue, White, Red",
    "optionD": "Red, White, Blue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Number of regions in the Philippines:",
    "optionA": "17",
    "optionB": "18",
    "optionC": "16",
    "optionD": "15",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The largest island is:",
    "optionA": "Luzon",
    "optionB": "Mindanao",
    "optionC": "Visayas",
    "optionD": "Palawan",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Independence Day is:",
    "optionA": "June 12",
    "optionB": "July 4",
    "optionC": "August 31",
    "optionD": "April 9",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "According to the Philippine Constitution, what is the minimum age to run for President?",
    "optionA": "35",
    "optionB": "30",
    "optionC": "40",
    "optionD": "25",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 refers to the Code of Conduct and Ethical Standards for:",
    "optionA": "Public Officials and Employees",
    "optionB": "Private Sector Workers",
    "optionC": "Students",
    "optionD": "Military Personnel",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Senators are there in the Philippine Senate?",
    "optionA": "24",
    "optionB": "20",
    "optionC": "30",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What does the Bill of Rights in the Constitution primarily protect?",
    "optionA": "Individual freedoms",
    "optionB": "Economic policies",
    "optionC": "Foreign relations",
    "optionD": "Military powers",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Under RA 6713, what is a prohibited act for public officials?",
    "optionA": "Political neutrality",
    "optionB": "Accepting gifts that create conflict of interest",
    "optionC": "Professionalism",
    "optionD": "Responsiveness to public",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "What branch of government includes the President and Vice President?",
    "optionA": "Executive",
    "optionB": "Legislative",
    "optionC": "Judicial",
    "optionD": "Local",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "In human rights concepts, what does 'peace' involve per the reviewer?",
    "optionA": "Absence of conflict and promotion of justice",
    "optionB": "Military strength",
    "optionC": "Economic growth only",
    "optionD": "Environmental protection",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What is a key norm of conduct under RA 6713?",
    "optionA": "Professionalism",
    "optionB": "Corruption",
    "optionC": "Nepotism",
    "optionD": "Bribery",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Environment Management and Protection in the Constitution emphasizes:",
    "optionA": "Sustainable development",
    "optionB": "Urban expansion",
    "optionC": "Industrial growth without limits",
    "optionD": "Deforestation",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Representatives are in the House based on population?",
    "optionA": "Up to 250 or more",
    "optionB": "Exactly 100",
    "optionC": "24",
    "optionD": "200 fixed",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Every Christian's path is beset by peril.",
    "optionA": "bested",
    "optionB": "frightened",
    "optionC": "surrounded",
    "optionD": "chased",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The power failure at 8 P.M. caused consternation among the barangay's residents.",
    "optionA": "dismay",
    "optionB": "deliberation",
    "optionC": "disability",
    "optionD": "distaste",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "The consensus among the congressmen was that the bill would not be passed.",
    "optionA": "divided",
    "optionB": "controversy",
    "optionC": "gathering",
    "optionD": "agreement",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Tempestuous times preceded the EDSA People Power Revolution.",
    "optionA": "emotionally charged",
    "optionB": "temperate",
    "optionC": "trying",
    "optionD": "peaceful",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Imelda Marcos was known for her ostentatious extravagance.",
    "optionA": "oscillating",
    "optionB": "loud",
    "optionC": "wealthy",
    "optionD": "showy",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Some believe that the treatment for modern-day depression is complete abstinence from social media use.",
    "optionA": "absence",
    "optionB": "avoidance",
    "optionC": "sickness",
    "optionD": "prescription",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Mary Grace Cafe is a favorite rendezvous for all the titas of Manila.",
    "optionA": "hidden retreat",
    "optionB": "hiding place",
    "optionC": "meeting place",
    "optionD": "dining room",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Lola Mona Lisa is so old that her health has regressed to the point that she may die any time soon.",
    "optionA": "remembered",
    "optionB": "alluded",
    "optionC": "deteriorated",
    "optionD": "progressed",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The garrulous taxi driver annoyed most of his passengers especially the introverted ones.",
    "optionA": "talkative",
    "optionB": "gracious",
    "optionC": "sickly",
    "optionD": "grey",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "A less scrupulous plumber could easily have unnecessarily replaced the drainpipes and run up the cost.",
    "optionA": "afraid",
    "optionB": "employed",
    "optionC": "careful",
    "optionD": "infamous",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Mental health awareness)",
    "optionA": "Mental Health Awareness Efforts",
    "optionB": "Government Initiatives in the Philippines",
    "optionC": "Challenges in Mental Health Support",
    "optionD": "Importance of Mental Health",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Which legislation is mentioned in the passage?",
    "optionA": "Healthcare Act",
    "optionB": "Education Act",
    "optionC": "Mental Health Act",
    "optionD": "Social Services Act",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Climate change)",
    "optionA": "Environmental Challenges",
    "optionB": "Government Policies",
    "optionC": "Climate Change",
    "optionD": "Renewable Energy",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "2/5 + 1/4 = ?",
    "optionA": "9/20",
    "optionB": "13/20",
    "optionC": "7/20",
    "optionD": "11/20",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Given the equation 3x + 6 = 15, what is the value of x?",
    "optionA": "3",
    "optionB": "4",
    "optionC": "5",
    "optionD": "6",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16, 32, ?",
    "optionA": "48",
    "optionB": "54",
    "optionC": "64",
    "optionD": "72",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 5, 10, 20, 40, ?",
    "optionA": "60",
    "optionB": "70",
    "optionC": "80",
    "optionD": "100",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 3, 6, 12, 24, ?",
    "optionA": "36",
    "optionB": "48",
    "optionC": "54",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 9, 16, 25, ?",
    "optionA": "30",
    "optionB": "36",
    "optionC": "42",
    "optionD": "49",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 3, 5, 7, 11, ?",
    "optionA": "13",
    "optionB": "14",
    "optionC": "15",
    "optionD": "17",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 8, 16, 24, 32, 40, ?",
    "optionA": "45",
    "optionB": "48",
    "optionC": "50",
    "optionD": "52",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 1, 2, 3, 5, 8, ?",
    "optionA": "10",
    "optionB": "11",
    "optionC": "12",
    "optionD": "13",
    "correctAnswer": "D",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 9, 27, 81, 243, ?",
    "optionA": "324",
    "optionB": "567",
    "optionC": "729",
    "optionD": "810",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 10, 20, 30, 40, ?",
    "optionA": "45",
    "optionB": "50",
    "optionC": "55",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Negligent: requirement: remiss: _____________.",
    "optionA": "duty",
    "optionB": "law",
    "optionC": "task",
    "optionD": "care",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Politician: statesman: ______________: ______________. ",
    "optionA": "lawyer: advocate",
    "optionB": "doctor: physician",
    "optionC": "teacher: educator",
    "optionD": "soldier: warrior",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Caution is to ________ as radar is to ________.",
    "optionA": "signal: wave",
    "optionB": "warning: detection",
    "optionC": "care: speed",
    "optionD": "alert: track",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What are the 3 main branches of the Government of the Philippines?",
    "optionA": "Senate, Supreme Court, Congress",
    "optionB": "Presidential, Unicameral-Parliamentary, Bicameral-Parliamentary",
    "optionC": "Legislative, Executive, Judicial",
    "optionD": "The Legislature, The Senate, The Supreme Court",
    "correctAnswer": "C",
    "category": "General Information"
  },
  {
    "text": "The Supreme Court shall be composed of a Chief Justice and how many Associates Justices?",
    "optionA": "12",
    "optionB": "13",
    "optionC": "14",
    "optionD": "15",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The Commander-in-Chief of all armed forces of the Philippines in 2025 is _________.",
    "optionA": "Air Force Commanding General Jeffrey Delgado",
    "optionB": "Ferdinand Marcos Jr.",
    "optionC": "Chief Justice Maria Lourdes Sereno",
    "optionD": "AFP Chief Lieutenant Gen. Emmanuel Bautista",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The executive power shall be vested in the _________.",
    "optionA": "President of the Philippines",
    "optionB": "House of Representatives",
    "optionC": "The Supreme Court",
    "optionD": "The Congress",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The legislative power shall be vested in the _________ which shall consist of a Senate and a House of Representatives.",
    "optionA": "Congress of the Philippines",
    "optionB": "House of Ombudsman",
    "optionC": "The Supreme Court",
    "optionD": "Bureau of Internal Revenue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Senate shall be composed of how many senators elected at large by voters of the Philippines?",
    "optionA": "21",
    "optionB": "22",
    "optionC": "23",
    "optionD": "24",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "How long shall the term of office of the senators be commenced?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The term of office of the President and Vice-president of the Philippines shall be up to how many years?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The members of the House of Representatives shall be elected for a term of _______.",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The following shall be exempted from taxation except:",
    "optionA": "Lands and buildings",
    "optionB": "Churches and convents",
    "optionC": "Charitable institutions",
    "optionD": "Non-profit cemeteries",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Congress, by a vote of ____ of both Houses in joint session assembled, voting separately, shall have the sole power to declare a state of war.",
    "optionA": "Two-thirds",
    "optionB": "One-half",
    "optionC": "Three quarters",
    "optionD": "Minority",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "It states that “no person shall be deprived of life, liberty, or property without due process of law, nor any person be denied the equal protection of the laws.”",
    "optionA": "Article VI",
    "optionB": "Bill of Rights",
    "optionC": "Republic Act",
    "optionD": "Court Order",
    "correctAnswer": "B",
    "category": "General Information"
  }
]


----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_ChartActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import android.graphics.Color

class ChartActivity : ComponentActivity() {
    private val repository by lazy { QuestionRepository(applicationContext) }

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Progress Chart") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {  // Exit on click
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    ScoreChartScreen(modifier = Modifier.padding(innerPadding), sessions = repository.getAllSessions())
                }
            }
        }
    }
}

@Composable
fun ScoreChartScreen(modifier: Modifier = Modifier, sessions: Flow<List<PracticeSession>>) {
    val sessionList by sessions.collectAsState(emptyList())
    val context = LocalContext.current

    AndroidView(
        modifier = modifier.fillMaxSize(),
        factory = { ctx ->
            LineChart(ctx).apply {
                description.text = "Scores Over Time"
                setTouchEnabled(true)
                setDragEnabled(true)
                setScaleEnabled(true)
                setPinchZoom(true)
            }
        },
        update = { chart ->
            val entries = sessionList.mapIndexed { index, session ->
                Entry(index.toFloat(), session.score.toFloat())
            }
            val dataSet = LineDataSet(entries, "Scores")
            dataSet.color = Color.BLUE
            dataSet.valueTextColor = Color.BLACK
            chart.data = LineData(dataSet)
            chart.invalidate()
        }
    )
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_data_AppDatabase.kt -----

package com.example.csepractice.data

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase

@Database(entities = [Question::class, PracticeSession::class], version = 5, exportSchema = true)
abstract class AppDatabase : RoomDatabase() {
    abstract fun questionDao(): QuestionDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "cse_database"
                ).addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_4_5)
                    .fallbackToDestructiveMigration()  // For dev, removes data on mismatch
                    .build()
                INSTANCE = instance
                instance
            }
        }

        val MIGRATION_1_2 = object : Migration(1, 2) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasCategory = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "category") {
                            hasCategory = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasCategory) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN category TEXT NOT NULL DEFAULT ''")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasCategories = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "categories") {
                            hasCategories = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasCategories) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN categories TEXT NOT NULL DEFAULT ''")
                }
            }
        }

        val MIGRATION_2_3 = object : Migration(2, 3) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasDifficulty) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN difficulty TEXT NOT NULL DEFAULT 'Medium'")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasTimeTaken = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "timeTaken") {
                            hasTimeTaken = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasTimeTaken) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN timeTaken LONG NOT NULL DEFAULT 0")
                }
            }
        }

        val MIGRATION_3_4 = object : Migration(3, 4) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Empty migration to force version bump and fallback if needed
            }
        }

        val MIGRATION_4_5 = object : Migration(4, 5) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Check if 'difficulty' exists
                val cursor = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursor.getColumnIndex("name")
                if (cursor.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursor.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursor.moveToNext())
                }
                cursor.close()

                if (hasDifficulty) {
                    // Create temp table with current schema (no difficulty)
                    database.execSQL("""
                        CREATE TABLE questions_temp (
                            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                            text TEXT NOT NULL DEFAULT '',
                            optionA TEXT NOT NULL DEFAULT '',
                            optionB TEXT NOT NULL DEFAULT '',
                            optionC TEXT NOT NULL DEFAULT '',
                            optionD TEXT NOT NULL DEFAULT '',
                            correctAnswer TEXT NOT NULL DEFAULT '',
                            category TEXT NOT NULL DEFAULT ''
                        )
                    """.trimIndent())

                    // Copy data, excluding difficulty
                    database.execSQL("""
                        INSERT INTO questions_temp (id, text, optionA, optionB, optionC, optionD, correctAnswer, category)
                        SELECT id, text, optionA, optionB, optionC, optionD, correctAnswer, category FROM questions
                    """.trimIndent())

                    // Drop old table
                    database.execSQL("DROP TABLE questions")

                    // Rename temp to original
                    database.execSQL("ALTER TABLE questions_temp RENAME TO questions")
                }
            }
        }
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_data_PracticeSession.kt -----

// app/src/main/java/com/example/csepractice/data/PracticeSession.kt
package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "practice_sessions")
data class PracticeSession(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val date: Long = System.currentTimeMillis(),
    val score: Int,  // e.g., 80 (percentage)
    val correctCount: Int,
    val totalQuestions: Int,
    val categories: String = "",  // Comma-separated or "All"
    val timeTaken: Long = 0  // Total time in milliseconds
)

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_data_Question.kt -----

package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "questions")
data class Question(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val text: String = "",
    val optionA: String = "",
    val optionB: String = "",
    val optionC: String = "",
    val optionD: String = "",
    val correctAnswer: String = "",
    val category: String = ""
)

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_data_QuestionDao.kt -----

package com.example.csepractice.data

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface QuestionDao {
    @Query("SELECT * FROM questions ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestions(count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category = :category ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategory(category: String, count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category IN (:categories) ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>>

    @Query("SELECT DISTINCT category FROM questions")
    fun getCategories(): Flow<List<String>>  // New for dynamic categories

    @Query("SELECT AVG(score) FROM practice_sessions WHERE categories LIKE '%' || :category || '%'")
    fun getAvgByCategory(category: String): Flow<Double>  // New for category avg

    @Insert
    suspend fun insertQuestions(questions: List<Question>)

    @Insert
    suspend fun insertSession(session: PracticeSession)

    @Query("SELECT * FROM practice_sessions ORDER BY date DESC")
    fun getAllSessions(): Flow<List<PracticeSession>>

    @Query("DELETE FROM practice_sessions")
    suspend fun clearAllSessions()
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_MainActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.animation.togetherWith
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.example.csepractice.viewmodel.PracticeViewModel
import kotlinx.coroutines.delay
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)  // Default to light mode
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        AppTopBar(onSettingsClick = {
                            val intent = Intent(this@MainActivity, SettingsActivity::class.java)
                            startActivity(intent)
                        })
                    }
                ) { innerPadding ->
                    PracticeScreen(Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppTopBar(onSettingsClick: () -> Unit) {
    TopAppBar(
        title = { Text("CSE Practice") },
        actions = {
            IconButton(onClick = onSettingsClick) {
                Icon(Icons.Default.Settings, contentDescription = "Settings")
            }
        }
    )
}

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun PracticeScreen(modifier: Modifier = Modifier, viewModel: PracticeViewModel = viewModel()) {
    val questions by viewModel.questions.collectAsState()
    val currentIndex by viewModel.currentIndex.collectAsState()
    val selectedAnswers by viewModel.selectedAnswers.collectAsState()
    val score by viewModel.score.collectAsState()
    val sessions by viewModel.sessions.collectAsState(emptyList())
    val selectedCategories by viewModel.selectedCategories.collectAsState()
    val categories by viewModel.categories.collectAsState(emptyList())  // Dynamic
    val context = LocalContext.current

    val visible = remember { mutableStateOf(false) }
    val numQuestions = remember { mutableIntStateOf(10) }  // Default 10
    val isSelecting = remember { mutableStateOf(true) }  // New: Control selector vs loading

    LaunchedEffect(Unit) {
        delay(300)
        visible.value = true
    }

    AnimatedVisibility(visible = visible.value, enter = fadeIn()) {
        if (questions.isEmpty() && score == 0) {  // Selector or loading
            if (categories.isEmpty()) {
                CircularProgressIndicator()  // Loading categories
            } else if (isSelecting.value) {  // Show selector until button press
                Column(
                    modifier = modifier.fillMaxSize().padding(16.dp),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.Start  // Left-align for better readability
                ) {
                    Text("Select Categories:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    categories.forEach { category ->
                        Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(vertical = 4.dp)) {
                            Checkbox(
                                checked = selectedCategories.contains(category),
                                onCheckedChange = { viewModel.toggleCategory(category) }
                            )
                            Spacer(modifier = Modifier.width(8.dp))  // Space between checkbox and text
                            Text(category)
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Text("Number of Questions:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        listOf(10, 20, 30).forEach { num ->
                            RadioButton(selected = numQuestions.intValue == num, onClick = { numQuestions.intValue = num })
                            Text("$num", modifier = Modifier.padding(end = 16.dp))  // Space between options
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(onClick = {
                        isSelecting.value = false
                        viewModel.startPractice(numQuestions.intValue)
                    }, modifier = Modifier.align(Alignment.CenterHorizontally)) {
                        Text("Start Practice")
                    }
                }
            } else {
                Column(modifier = modifier.fillMaxSize(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally) {
                    CircularProgressIndicator(color = MaterialTheme.colorScheme.primary)
                    Text("Loading questions...", modifier = Modifier.padding(top = 16.dp))
                }
            }
        } else if (score > 0) {
            val scrollState = rememberScrollState()
            Column(
                modifier = modifier.fillMaxSize().verticalScroll(scrollState).padding(16.dp),
                verticalArrangement = Arrangement.Center
            ) {
                Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                    Column(modifier = Modifier.padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Your score: $score%", style = MaterialTheme.typography.headlineMedium, color = MaterialTheme.colorScheme.primary)
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            viewModel.resetForNewSession()
                            isSelecting.value = true  // Reset to show selector on new session
                        }) {
                            Icon(Icons.Default.Refresh, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                            Text("Start New Practice")
                        }
                        Spacer(modifier = Modifier.height(8.dp))
                        Button(onClick = { viewModel.practiceWeakAreas() }) {
                            Text("Practice Weak Areas")
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Text("Progress History:", style = MaterialTheme.typography.titleMedium)
                Column {
                    Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                        Text("Date", modifier = Modifier.weight(2f), fontWeight = FontWeight.Bold)
                        Text("Score", modifier = Modifier.weight(1f), fontWeight = FontWeight.Bold)
                    }
                    sessions.forEach { session ->
                        val formattedDate = SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(Date(session.date))
                        Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                            Text(formattedDate, modifier = Modifier.weight(2f))
                            Text("${session.score}%", modifier = Modifier.weight(1f))
                        }
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                val averageScore = if (sessions.isNotEmpty()) {
                    sessions.map { it.score }.average().toInt()
                } else {
                    0
                }
                Text(
                    text = "Average Score: $averageScore%",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text("Category Averages:", style = MaterialTheme.typography.titleMedium)
                categories.forEach { cat ->
                    val avg by viewModel.getAverageForCategory(cat).collectAsState(0.0)
                    Text("$cat: ${avg.toInt()}%")
                }
                Spacer(modifier = Modifier.height(16.dp))
                Button(
                    onClick = {
                        val intent = Intent(context, ChartActivity::class.java)
                        context.startActivity(intent)
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary),
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                ) {
                    Text("View Progress Chart", color = Color.White)
                }
            }
        } else {
            val currentQuestion = questions[currentIndex]
            val isCurrentAnswered = selectedAnswers.containsKey(currentIndex)
            Column(modifier = modifier.fillMaxSize().padding(16.dp)) {
                AnimatedContent(
                    targetState = currentIndex,
                    transitionSpec = {
                        if (targetState > initialState) {
                            slideInHorizontally { width -> width } togetherWith slideOutHorizontally { width -> -width }
                        } else {
                            slideInHorizontally { width -> -width } togetherWith slideOutHorizontally { width -> width }
                        }
                    },
                    label = "questionAnimation"
                ) { index ->
                    val question = questions[index]
                    Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text(question.text, style = MaterialTheme.typography.titleLarge, color = MaterialTheme.colorScheme.primary)
                            listOf(question.optionA, question.optionB, question.optionC, question.optionD).forEachIndexed { optIndex, option ->
                                Row(verticalAlignment = Alignment.CenterVertically) {
                                    RadioButton(
                                        selected = selectedAnswers[index] == optIndex,
                                        onClick = { viewModel.selectAnswer(index, optIndex) }
                                    )
                                    Text(option)
                                }
                            }
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Row(
                    modifier = Modifier.fillMaxWidth().wrapContentHeight(),
                    horizontalArrangement = Arrangement.Center
                ) {
                    Button(onClick = { viewModel.previousQuestion() }, enabled = currentIndex > 0) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                        Text("Previous")
                    }
                    Spacer(modifier = Modifier.width(16.dp))
                    Button(onClick = { viewModel.nextQuestion() }, enabled = currentIndex < questions.size - 1 && isCurrentAnswered) {
                        Text("Next")
                        Icon(Icons.AutoMirrored.Filled.ArrowForward, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                if (currentIndex == questions.size - 1) {
                    Button(
                        onClick = {
                            Toast.makeText(context, "Submit pressed!", Toast.LENGTH_SHORT).show()
                            viewModel.calculateScore()
                        },
                        enabled = isCurrentAnswered,
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    ) {
                        Text("Submit")
                        Icon(Icons.Filled.Check, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
            }
        }
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_repository_QuestionRepository.kt -----

package com.example.csepractice.repository

import android.content.Context
import com.example.csepractice.data.AppDatabase
import com.example.csepractice.data.Question
import com.example.csepractice.data.PracticeSession
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull

class QuestionRepository(private val context: Context) {
    val dao = AppDatabase.getDatabase(context).questionDao()

    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>> =
        dao.getRandomQuestionsByCategories(categories, count)

    fun getRandomQuestions(count: Int): Flow<List<Question>> = dao.getRandomQuestions(count)

    suspend fun insertSession(session: PracticeSession) = dao.insertSession(session)

    fun getAllSessions(): Flow<List<PracticeSession>> = dao.getAllSessions()

    suspend fun clearAllSessions() {
        dao.clearAllSessions()
    }

    suspend fun seedQuestionsIfEmpty() {
        // Check if DB is empty
        val questionsFlow = dao.getRandomQuestions(1)
        val questions = questionsFlow.firstOrNull()
        if (questions.isNullOrEmpty()) {
            val json = context.assets.open("questions.json").bufferedReader().use { it.readText() }
            val type = object : TypeToken<List<Question>>() {}.type
            val questions: List<Question> = Gson().fromJson(json, type)
            dao.insertQuestions(questions)
        }
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_SettingsActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.csepractice.repository.QuestionRepository
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import android.widget.Toast

class SettingsActivity : ComponentActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Settings") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    SettingsScreen(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@Composable
fun SettingsScreen(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val prefs = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    var isDarkMode by remember { mutableStateOf(prefs.getBoolean("dark_mode", false)) }
    var colorScheme by remember { mutableStateOf(prefs.getString("color_scheme", "Default") ?: "Default") }

    Column(
        modifier = modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Settings", style = MaterialTheme.typography.headlineMedium)

        Spacer(modifier = Modifier.height(32.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            Text("Dark Mode", modifier = Modifier.padding(end = 16.dp))
            Switch(
                checked = isDarkMode,
                onCheckedChange = { enabled ->
                    isDarkMode = enabled
                    with(prefs.edit()) {
                        putBoolean("dark_mode", enabled)
                        apply()
                    }
                }
            )
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text("Color Scheme:")
        Row {
            listOf("Default", "Blue", "Green").forEach { scheme ->
                RadioButton(selected = colorScheme == scheme, onClick = {
                    colorScheme = scheme
                    with(prefs.edit()) {
                        putString("color_scheme", scheme)
                        apply()
                    }
                })
                Text(scheme)
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Button(onClick = {
            val repository = QuestionRepository(context)
            CoroutineScope(Dispatchers.IO).launch {
                repository.clearAllSessions()
            }
            Toast.makeText(context, "History reset!", Toast.LENGTH_SHORT).show()
        }) {
            Text("Reset Progress History")
        }
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_SplashActivity.kt -----

package com.example.csepractice

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.delay

class SplashActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            CSEPracticeAppTheme {
                SplashScreen {
                    startActivity(Intent(this@SplashActivity, MainActivity::class.java))
                    finish()
                }
            }
        }
    }
}

@Composable
fun SplashScreen(onTimeout: () -> Unit) {
    LaunchedEffect(Unit) {
        delay(3000)  // 3 seconds
        onTimeout()
    }
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Welcome to CSE Practice App",
            style = MaterialTheme.typography.headlineLarge,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 16.dp)
        )
        Text(
            text = "Inspired by Pearl Jynne Celestino\nBy PJC Inc",
            style = MaterialTheme.typography.bodyMedium,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 32.dp)
        )
        Text("Quick Tips:", style = MaterialTheme.typography.titleMedium)
        Text("1. Practice daily for best results!")
        Text("2. Focus on weak categories using the button.")
        Text("3. Review explanations after tests.")
        Text("4. Aim for 80%+ to pass CSE!")
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_ui_theme_Color.kt -----

package com.example.csepractice.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

// New for schemes
val Blue80 = Color(0xFF80D8FF)
val BlueGrey80 = Color(0xFFB3E5FC)
val Blue40 = Color(0xFF0277BD)
val BlueGrey40 = Color(0xFF81D4FA)

val Green80 = Color(0xFFCCFF90)
val GreenGrey80 = Color(0xFFE0F2F1)
val Green40 = Color(0xFF558B2F)
val GreenGrey40 = Color(0xFFA5D6A7)

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_ui_theme_Theme.kt -----

package com.example.csepractice.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40
)

private val BlueColorScheme = lightColorScheme(
    primary = Blue40,
    secondary = BlueGrey40,
    tertiary = Blue80
)

private val GreenColorScheme = lightColorScheme(
    primary = Green40,
    secondary = GreenGrey40,
    tertiary = Green80
)

@Composable
fun CSEPracticeAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val prefs = LocalContext.current.getSharedPreferences("app_prefs", android.content.Context.MODE_PRIVATE)
    val scheme = prefs.getString("color_scheme", "Default") ?: "Default"

    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        scheme == "Blue" -> BlueColorScheme
        scheme == "Green" -> GreenColorScheme
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = androidx.compose.material3.Typography(),  // Fully qualify to avoid conflict
        content = content
    )
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_utils_ListConverters.kt -----

package com.example.csepractice.utils

import androidx.room.TypeConverter
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class ListConverters {
    private val gson = Gson()

    @TypeConverter
    fun fromStringList(value: String): List<String> {
        val listType = object : TypeToken<List<String>>() {}.type
        return gson.fromJson(value, listType)
    }

    @TypeConverter
    fun toStringList(list: List<String>): String {
        return gson.toJson(list)
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_java_com_example_csepractice_viewmodel_PracticeViewModel.kt -----

package com.example.csepractice.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.data.Question
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlin.system.measureTimeMillis

class PracticeViewModel(application: Application) : AndroidViewModel(application) {
    private val repository = QuestionRepository(application)
    private val dao = repository.dao  // For new queries

    private val _questions = MutableStateFlow<List<Question>>(emptyList())
    val questions: StateFlow<List<Question>> = _questions.asStateFlow()

    private val _currentIndex = MutableStateFlow(0)
    val currentIndex: StateFlow<Int> = _currentIndex.asStateFlow()

    private val _selectedAnswers = MutableStateFlow<Map<Int, Int>>(emptyMap())
    val selectedAnswers: StateFlow<Map<Int, Int>> = _selectedAnswers.asStateFlow()

    private val _score = MutableStateFlow(0)
    val score: StateFlow<Int> = _score.asStateFlow()

    private val _selectedCategories = MutableStateFlow<List<String>>(emptyList())
    val selectedCategories: StateFlow<List<String>> = _selectedCategories.asStateFlow()

    val sessions: Flow<List<PracticeSession>> = repository.getAllSessions()

    val categories: Flow<List<String>> = dao.getCategories()  // New dynamic categories

    init {
        viewModelScope.launch {
            repository.seedQuestionsIfEmpty()
            // No auto-load; wait for startPractice
        }
    }

    fun toggleCategory(category: String) {
        val current = _selectedCategories.value.toMutableList()
        if (current.contains(category)) {
            current.remove(category)
        } else {
            current.add(category)
        }
        _selectedCategories.value = current
    }

    fun startPractice(numQuestions: Int) {
        val categories = _selectedCategories.value
        if (categories.isEmpty()) {
            loadAllQuestions(numQuestions)
        } else {
            loadQuestionsForCategories(categories, numQuestions)
        }
    }

    fun practiceWeakAreas(threshold: Double = 70.0) {
        viewModelScope.launch {
            val allCats = categories.first()  // Get list once
            val weak = mutableListOf<String>()
            for (cat in allCats) {
                val avg = getAverageForCategory(cat).first()  // Get avg once
                if (avg < threshold) {
                    weak.add(cat)
                }
            }
            _selectedCategories.value = weak
            if (weak.isNotEmpty()) {
                startPractice(10)  // Default to 10
            }  // Else, perhaps toast "No weak areas!"
        }
    }

    private fun loadQuestionsForCategories(categories: List<String>, count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestionsByCategories(categories, count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    private fun loadAllQuestions(count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestions(count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    fun getAverageForCategory(category: String): Flow<Double> = dao.getAvgByCategory(category)  // New

    fun selectAnswer(questionIndex: Int, optionIndex: Int) {
        _selectedAnswers.value = _selectedAnswers.value.toMutableMap().apply {
            this[questionIndex] = optionIndex
        }
    }

    fun nextQuestion() {
        if (_currentIndex.value < _questions.value.size - 1) {
            _currentIndex.value += 1
        }
    }

    fun previousQuestion() {
        if (_currentIndex.value > 0) {
            _currentIndex.value -= 1
        }
    }

    fun calculateScore() {
        val total = _questions.value.size
        var correct = 0
        _questions.value.forEachIndexed { index, question ->
            val selected = _selectedAnswers.value[index]
            val correctIndex = "ABCD".indexOf(question.correctAnswer)
            if (selected == correctIndex) {
                correct++
            }
        }
        _score.value = if (total > 0) (correct * 100) / total else 0
        viewModelScope.launch {
            repository.insertSession(
                PracticeSession(
                    score = _score.value,
                    correctCount = correct,
                    totalQuestions = total,
                    categories = _selectedCategories.value.joinToString(",")  // Save categories
                )
            )
        }
    }

    fun resetForNewSession() {
        _questions.value = emptyList()
        _currentIndex.value = 0
        _selectedAnswers.value = emptyMap()
        _score.value = 0
        _selectedCategories.value = emptyList()
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_res_drawable_ic_launcher_background.xml -----

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_res_drawable_ic_launcher_foreground.xml -----

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_res_mipmap-anydpi_ic_launcher.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_res_mipmap-anydpi_ic_launcher_round.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_res_values_colors.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_res_values_strings.xml -----

<resources>
    <string name="app_name">CSEPracticeApp</string>
</resources>

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_res_values_themes.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.CSEPracticeApp" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_res_xml_backup_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_main_res_xml_data_extraction_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

----- End of File -----

----- File: flat_project_files\shared_project_files_app_src_test_java_com_example_csepractice_ExampleUnitTest.kt -----

package com.example.csepractice

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_build.gradle.kts -----

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}

----- End of File -----

----- File: flat_project_files\shared_project_files_gradlew -----

#!/bin/sh

#
# Copyright © 2015 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"


----- End of File -----

----- File: flat_project_files\shared_project_files_gradlew.bat -----

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


----- End of File -----

----- File: flat_project_files\shared_project_files_gradle_libs.versions.toml -----

[versions]
agp = "8.13.0"
kotlin = "2.0.21"
coreKtx = "1.10.1"
junit = "4.13.2"
junitVersion = "1.1.5"
espressoCore = "3.5.1"
lifecycleRuntimeKtx = "2.6.1"
activityCompose = "1.8.0"
composeBom = "2024.09.00"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-compose-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-compose-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-compose-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-compose-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-compose-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-compose-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-compose-material3 = { group = "androidx.compose.material3", name = "material3" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }



----- End of File -----

----- File: flat_project_files\shared_project_files_settings.gradle.kts -----

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    plugins {
        id("com.android.application") version "8.5.2"
        id("org.jetbrains.kotlin.android") version "1.9.24"
        id("org.jetbrains.kotlin.plugin.compose") version "1.9.24"
        id("org.jetbrains.kotlin.kapt") version "1.9.24"
        id("com.google.devtools.ksp") version "1.9.24-1.0.20"
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven("https://jitpack.io")  // Add this for MPAndroidChart
    }
}

rootProject.name = "CSEPracticeApp"
include(":app")

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_build.gradle.kts -----

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android") version "1.9.24"
    id("org.jetbrains.kotlin.kapt") version "1.9.24"
    id("com.google.devtools.ksp") version "1.9.24-1.0.20"
}

android {
    namespace = "com.example.csepractice"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.csepractice"
        minSdk = 26
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"  // Fix for Kotlin 1.9.24
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation("com.github.PhilJay:MPAndroidChart:v3.1.0")
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.6")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6")
    implementation("androidx.activity:activity-compose:1.9.2")
    implementation(platform("androidx.compose:compose-bom:2024.09.03"))
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.room:room-runtime:2.6.1")
    implementation("androidx.datastore:datastore-preferences:1.1.1")  // Alternative to SharedPreferences, but we'll use SharedPrefs here
    ksp("androidx.room:room-compiler:2.6.1")
    implementation("androidx.room:room-ktx:2.6.1")
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation(platform("androidx.compose:compose-bom:2024.09.03"))
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_androidTest_java_com_example_csepractice_ExampleInstrumentedTest.kt -----

package com.example.csepractice

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.csepractice", appContext.packageName)
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_AndroidManifest.xml -----

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CSEPracticeApp">
        <activity
            android:name=".SplashActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.CSEPracticeApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".MainActivity" android:exported="false" />
        <activity android:name=".ChartActivity" android:exported="false" />
        <activity android:name=".SettingsActivity" />
    </application>

</manifest>

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_assets_questions.json -----

[
  {
    "text": "Identify the synonym of 'eloquent'.",
    "optionA": "Silent",
    "optionB": "Articulate",
    "optionC": "Confused",
    "optionD": "Angry",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Would you like coffee __________ tea?",
    "optionA": "so",
    "optionB": "or",
    "optionC": "but",
    "optionD": "and",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "I like swimming, ______ my sister likes dancing.",
    "optionA": "and",
    "optionB": "or",
    "optionC": "because",
    "optionD": "but",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "The antonym of 'happy' is:",
    "optionA": "Joyful",
    "optionB": "Sad",
    "optionC": "Excited",
    "optionD": "Content",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct spelling: ",
    "optionA": "Recieve",
    "optionB": "Receive",
    "optionC": "Recive",
    "optionD": "Receve",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Complete the analogy: Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence is grammatically correct?",
    "optionA": "He go to school.",
    "optionB": "He goes to school.",
    "optionC": "He going to school.",
    "optionD": "He went to school.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "The word 'fast' can mean:",
    "optionA": "Quick",
    "optionB": "Not eating",
    "optionC": "Both A and B",
    "optionD": "None",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange: The / quick / brown / fox",
    "optionA": "The brown quick fox",
    "optionB": "The quick brown fox",
    "optionC": "Quick the brown fox",
    "optionD": "Brown the quick fox",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main idea of the passage? (Assume a passage)",
    "optionA": "Option A",
    "optionB": "Option B",
    "optionC": "Option C",
    "optionD": "Option D",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which of the following sentences contains an error in subject-verb agreement?",
    "optionA": "The team of players are practicing hard.",
    "optionB": "Each of the students has submitted their assignment.",
    "optionC": "Neither the manager nor the employees is happy with the decision.",
    "optionD": "No error.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct synonym for 'append.'",
    "optionA": "Remove",
    "optionB": "Add",
    "optionC": "Ignore",
    "optionD": "Divide",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In the sentence 'The chef cooked the meal quick,' identify the error.",
    "optionA": "The",
    "optionB": "cooked",
    "optionC": "quick",
    "optionD": "No error.",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange the following sentences to form a coherent paragraph: (1) However, it requires dedication. (2) Studying for exams is essential. (3) In summary, consistent effort pays off. (4) First, create a schedule.",
    "optionA": "2-4-1-3",
    "optionB": "4-2-1-3",
    "optionC": "2-1-4-3",
    "optionD": "1-3-2-4",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the antonym of 'opaque'?",
    "optionA": "Cloudy",
    "optionB": "Clear",
    "optionC": "Thick",
    "optionD": "Dense",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Identify the misspelled word in the sentence: 'The committee will accomodate all requests.'",
    "optionA": "committee",
    "optionB": "will",
    "optionC": "accomodate",
    "optionD": "requests",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct word usage: 'The effect of the new policy _____ immediate.'",
    "optionA": "were",
    "optionB": "was",
    "optionC": "are",
    "optionD": "is being",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In reading comprehension, if a passage states 'The economy is improving, but unemployment remains high,' what is the implied conclusion?",
    "optionA": "Unemployment will decrease soon.",
    "optionB": "Improvement does not solve all issues.",
    "optionC": "The economy is worsening.",
    "optionD": "No conclusion can be drawn.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence demonstrates parallelism?",
    "optionA": "She likes to swim, running, and to hike.",
    "optionB": "She likes swimming, running, and hiking.",
    "optionC": "She likes swim, run, and hiking.",
    "optionD": "She likes to swim, run, and hiking.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the contextual meaning of 'query' in 'Please query the database for updates'?",
    "optionA": "Question",
    "optionB": "Delete",
    "optionC": "Save",
    "optionD": "Ignore",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "2187, 729, 243, 81, 27, 9, ____?",
    "optionA": "6",
    "optionB": "3",
    "optionC": "4",
    "optionD": "2",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "1, 4, 9, 16, 25, 36, 49, 64, ____?",
    "optionA": "81",
    "optionB": "100",
    "optionC": "121",
    "optionD": "144",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "45 increased by what percent of itself gives 90?",
    "optionA": "50%",
    "optionB": "100%",
    "optionC": "200%",
    "optionD": "150%",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "15 is 150% of what number?",
    "optionA": "10",
    "optionB": "20",
    "optionC": "22.5",
    "optionD": "7.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 25% of 80?",
    "optionA": "20",
    "optionB": "25",
    "optionC": "30",
    "optionD": "40",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve: 2 + 3 * 4 - 5",
    "optionA": "9",
    "optionB": "5",
    "optionC": "3",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "The sum of x and 9 is:",
    "optionA": "x-9",
    "optionB": "x*9",
    "optionC": "x+9",
    "optionD": "x/9",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "If 3 apples cost 50 pesos, how much for 12?",
    "optionA": "150",
    "optionB": "200",
    "optionC": "100",
    "optionD": "250",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Find the average of 10, 20, 30.",
    "optionA": "20",
    "optionB": "15",
    "optionC": "25",
    "optionD": "30",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "A plate of special Sisig rice and a bowl of beef noodles costs Php 80. If the bowl of beef noodles costs Php 20 more than the plate of Sisig rice, how much is the bowl of beef noodles?",
    "optionA": "Php 30",
    "optionB": "Php 50",
    "optionC": "Php 60",
    "optionD": "Php 40",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 15% of 200?",
    "optionA": "30",
    "optionB": "25",
    "optionC": "35",
    "optionD": "20",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve for x: 3x + 5 = 20.",
    "optionA": "5",
    "optionB": "6",
    "optionC": "4",
    "optionD": "7",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If a train travels 60 km in 45 minutes, what is its speed in km/h?",
    "optionA": "80",
    "optionB": "90",
    "optionC": "70",
    "optionD": "100",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16?",
    "optionA": "20",
    "optionB": "24",
    "optionC": "32",
    "optionD": "18",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "A store offers a 20% discount on a Php 500 item. What is the final price?",
    "optionA": "Php 400",
    "optionB": "Php 450",
    "optionC": "Php 300",
    "optionD": "Php 350",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve the word problem: If 3 workers build a wall in 4 days, how many days for 6 workers?",
    "optionA": "2",
    "optionB": "3",
    "optionC": "1.5",
    "optionD": "2.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the area of a rectangle with length 10 and width 5?",
    "optionA": "50",
    "optionB": "30",
    "optionC": "40",
    "optionD": "60",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 3/4 to a decimal.",
    "optionA": "0.75",
    "optionB": "0.5",
    "optionC": "0.25",
    "optionD": "1.0",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If y = 2x + 3 and x=4, what is y?",
    "optionA": "11",
    "optionB": "9",
    "optionC": "10",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If all Bloops are Razzies and some Razzies are Lalas, then:",
    "optionA": "All Bloops are LaLAS",
    "optionB": "Some Bloops are LaLas",
    "optionC": "No Bloops are LaLas",
    "optionD": "Cannot determine",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Identify assumption: Students should study hard to pass.",
    "optionA": "Studying hard guarantees pass",
    "optionB": "Not studying leads to failure",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Next in series: A, C, E, G, ____",
    "optionA": "H",
    "optionB": "I",
    "optionC": "J",
    "optionD": "K",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Which is odd one out: Apple, Banana, Carrot, Orange",
    "optionA": "Apple",
    "optionB": "Banana",
    "optionC": "Carrot",
    "optionD": "Orange",
    "correctAnswer": "C",
    "category": "Analytical Ability"
  },
  {
    "text": "If X is Y's brother, Y is Z's sister, Z is X's:",
    "optionA": "Brother",
    "optionB": "Sister",
    "optionC": "Uncle",
    "optionD": "Self",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Conclusion from: All dogs bark. Spot barks. So Spot is a dog.",
    "optionA": "Valid",
    "optionB": "Invalid",
    "optionC": "True",
    "optionD": "False",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Iron: metal :: granite:",
    "optionA": "Marble",
    "optionB": "Rock",
    "optionC": "Sand",
    "optionD": "Solid",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If 2=5, 3=10, 4=17, 5=?",
    "optionA": "26",
    "optionB": "25",
    "optionC": "20",
    "optionD": "22",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Data interpretation: (Assume graph) What is the trend?",
    "optionA": "Increasing",
    "optionB": "Decreasing",
    "optionC": "Stable",
    "optionD": "Varying",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the capital of the Philippines?",
    "optionA": "Manila",
    "optionB": "Cebu",
    "optionC": "Davao",
    "optionD": "Quezon City",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Who is the current President of the Philippines? (As of 2022)",
    "optionA": "Ferdinand Marcos Jr.",
    "optionB": "Rodrigo Duterte",
    "optionC": "Benigno Aquino III",
    "optionD": "Gloria Arroyo",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine Constitution was ratified in:",
    "optionA": "1987",
    "optionB": "1973",
    "optionC": "1935",
    "optionD": "1899",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 is the:",
    "optionA": "Code of Conduct for Public Officials",
    "optionB": "Anti-Graft Law",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The three branches of government are:",
    "optionA": "Executive, Legislative, Judiciary",
    "optionB": "Senate, House, Court",
    "optionC": "President, Congress, Supreme Court",
    "optionD": "All above",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "National hero of the Philippines:",
    "optionA": "Jose Rizal",
    "optionB": "Andres Bonifacio",
    "optionC": "Emilio Aguinaldo",
    "optionD": "Lapu-Lapu",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine flag has colors:",
    "optionA": "Blue, Red, White, Yellow",
    "optionB": "Green, White, Red",
    "optionC": "Blue, White, Red",
    "optionD": "Red, White, Blue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Number of regions in the Philippines:",
    "optionA": "17",
    "optionB": "18",
    "optionC": "16",
    "optionD": "15",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The largest island is:",
    "optionA": "Luzon",
    "optionB": "Mindanao",
    "optionC": "Visayas",
    "optionD": "Palawan",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Independence Day is:",
    "optionA": "June 12",
    "optionB": "July 4",
    "optionC": "August 31",
    "optionD": "April 9",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "According to the Philippine Constitution, what is the minimum age to run for President?",
    "optionA": "35",
    "optionB": "30",
    "optionC": "40",
    "optionD": "25",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 refers to the Code of Conduct and Ethical Standards for:",
    "optionA": "Public Officials and Employees",
    "optionB": "Private Sector Workers",
    "optionC": "Students",
    "optionD": "Military Personnel",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Senators are there in the Philippine Senate?",
    "optionA": "24",
    "optionB": "20",
    "optionC": "30",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What does the Bill of Rights in the Constitution primarily protect?",
    "optionA": "Individual freedoms",
    "optionB": "Economic policies",
    "optionC": "Foreign relations",
    "optionD": "Military powers",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Under RA 6713, what is a prohibited act for public officials?",
    "optionA": "Political neutrality",
    "optionB": "Accepting gifts that create conflict of interest",
    "optionC": "Professionalism",
    "optionD": "Responsiveness to public",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "What branch of government includes the President and Vice President?",
    "optionA": "Executive",
    "optionB": "Legislative",
    "optionC": "Judicial",
    "optionD": "Local",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "In human rights concepts, what does 'peace' involve per the reviewer?",
    "optionA": "Absence of conflict and promotion of justice",
    "optionB": "Military strength",
    "optionC": "Economic growth only",
    "optionD": "Environmental protection",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What is a key norm of conduct under RA 6713?",
    "optionA": "Professionalism",
    "optionB": "Corruption",
    "optionC": "Nepotism",
    "optionD": "Bribery",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Environment Management and Protection in the Constitution emphasizes:",
    "optionA": "Sustainable development",
    "optionB": "Urban expansion",
    "optionC": "Industrial growth without limits",
    "optionD": "Deforestation",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Representatives are in the House based on population?",
    "optionA": "Up to 250 or more",
    "optionB": "Exactly 100",
    "optionC": "24",
    "optionD": "200 fixed",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Every Christian's path is beset by peril.",
    "optionA": "bested",
    "optionB": "frightened",
    "optionC": "surrounded",
    "optionD": "chased",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The power failure at 8 P.M. caused consternation among the barangay's residents.",
    "optionA": "dismay",
    "optionB": "deliberation",
    "optionC": "disability",
    "optionD": "distaste",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "The consensus among the congressmen was that the bill would not be passed.",
    "optionA": "divided",
    "optionB": "controversy",
    "optionC": "gathering",
    "optionD": "agreement",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Tempestuous times preceded the EDSA People Power Revolution.",
    "optionA": "emotionally charged",
    "optionB": "temperate",
    "optionC": "trying",
    "optionD": "peaceful",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Imelda Marcos was known for her ostentatious extravagance.",
    "optionA": "oscillating",
    "optionB": "loud",
    "optionC": "wealthy",
    "optionD": "showy",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Some believe that the treatment for modern-day depression is complete abstinence from social media use.",
    "optionA": "absence",
    "optionB": "avoidance",
    "optionC": "sickness",
    "optionD": "prescription",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Mary Grace Cafe is a favorite rendezvous for all the titas of Manila.",
    "optionA": "hidden retreat",
    "optionB": "hiding place",
    "optionC": "meeting place",
    "optionD": "dining room",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Lola Mona Lisa is so old that her health has regressed to the point that she may die any time soon.",
    "optionA": "remembered",
    "optionB": "alluded",
    "optionC": "deteriorated",
    "optionD": "progressed",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The garrulous taxi driver annoyed most of his passengers especially the introverted ones.",
    "optionA": "talkative",
    "optionB": "gracious",
    "optionC": "sickly",
    "optionD": "grey",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "A less scrupulous plumber could easily have unnecessarily replaced the drainpipes and run up the cost.",
    "optionA": "afraid",
    "optionB": "employed",
    "optionC": "careful",
    "optionD": "infamous",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Mental health awareness)",
    "optionA": "Mental Health Awareness Efforts",
    "optionB": "Government Initiatives in the Philippines",
    "optionC": "Challenges in Mental Health Support",
    "optionD": "Importance of Mental Health",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Which legislation is mentioned in the passage?",
    "optionA": "Healthcare Act",
    "optionB": "Education Act",
    "optionC": "Mental Health Act",
    "optionD": "Social Services Act",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Climate change)",
    "optionA": "Environmental Challenges",
    "optionB": "Government Policies",
    "optionC": "Climate Change",
    "optionD": "Renewable Energy",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "2/5 + 1/4 = ?",
    "optionA": "9/20",
    "optionB": "13/20",
    "optionC": "7/20",
    "optionD": "11/20",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Given the equation 3x + 6 = 15, what is the value of x?",
    "optionA": "3",
    "optionB": "4",
    "optionC": "5",
    "optionD": "6",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16, 32, ?",
    "optionA": "48",
    "optionB": "54",
    "optionC": "64",
    "optionD": "72",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 5, 10, 20, 40, ?",
    "optionA": "60",
    "optionB": "70",
    "optionC": "80",
    "optionD": "100",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 3, 6, 12, 24, ?",
    "optionA": "36",
    "optionB": "48",
    "optionC": "54",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 9, 16, 25, ?",
    "optionA": "30",
    "optionB": "36",
    "optionC": "42",
    "optionD": "49",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 3, 5, 7, 11, ?",
    "optionA": "13",
    "optionB": "14",
    "optionC": "15",
    "optionD": "17",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 8, 16, 24, 32, 40, ?",
    "optionA": "45",
    "optionB": "48",
    "optionC": "50",
    "optionD": "52",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 1, 2, 3, 5, 8, ?",
    "optionA": "10",
    "optionB": "11",
    "optionC": "12",
    "optionD": "13",
    "correctAnswer": "D",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 9, 27, 81, 243, ?",
    "optionA": "324",
    "optionB": "567",
    "optionC": "729",
    "optionD": "810",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 10, 20, 30, 40, ?",
    "optionA": "45",
    "optionB": "50",
    "optionC": "55",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Negligent: requirement: remiss: _____________.",
    "optionA": "duty",
    "optionB": "law",
    "optionC": "task",
    "optionD": "care",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Politician: statesman: ______________: ______________. ",
    "optionA": "lawyer: advocate",
    "optionB": "doctor: physician",
    "optionC": "teacher: educator",
    "optionD": "soldier: warrior",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Caution is to ________ as radar is to ________.",
    "optionA": "signal: wave",
    "optionB": "warning: detection",
    "optionC": "care: speed",
    "optionD": "alert: track",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What are the 3 main branches of the Government of the Philippines?",
    "optionA": "Senate, Supreme Court, Congress",
    "optionB": "Presidential, Unicameral-Parliamentary, Bicameral-Parliamentary",
    "optionC": "Legislative, Executive, Judicial",
    "optionD": "The Legislature, The Senate, The Supreme Court",
    "correctAnswer": "C",
    "category": "General Information"
  },
  {
    "text": "The Supreme Court shall be composed of a Chief Justice and how many Associates Justices?",
    "optionA": "12",
    "optionB": "13",
    "optionC": "14",
    "optionD": "15",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The Commander-in-Chief of all armed forces of the Philippines in 2025 is _________.",
    "optionA": "Air Force Commanding General Jeffrey Delgado",
    "optionB": "Ferdinand Marcos Jr.",
    "optionC": "Chief Justice Maria Lourdes Sereno",
    "optionD": "AFP Chief Lieutenant Gen. Emmanuel Bautista",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The executive power shall be vested in the _________.",
    "optionA": "President of the Philippines",
    "optionB": "House of Representatives",
    "optionC": "The Supreme Court",
    "optionD": "The Congress",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The legislative power shall be vested in the _________ which shall consist of a Senate and a House of Representatives.",
    "optionA": "Congress of the Philippines",
    "optionB": "House of Ombudsman",
    "optionC": "The Supreme Court",
    "optionD": "Bureau of Internal Revenue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Senate shall be composed of how many senators elected at large by voters of the Philippines?",
    "optionA": "21",
    "optionB": "22",
    "optionC": "23",
    "optionD": "24",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "How long shall the term of office of the senators be commenced?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The term of office of the President and Vice-president of the Philippines shall be up to how many years?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The members of the House of Representatives shall be elected for a term of _______.",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The following shall be exempted from taxation except:",
    "optionA": "Lands and buildings",
    "optionB": "Churches and convents",
    "optionC": "Charitable institutions",
    "optionD": "Non-profit cemeteries",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Congress, by a vote of ____ of both Houses in joint session assembled, voting separately, shall have the sole power to declare a state of war.",
    "optionA": "Two-thirds",
    "optionB": "One-half",
    "optionC": "Three quarters",
    "optionD": "Minority",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "It states that “no person shall be deprived of life, liberty, or property without due process of law, nor any person be denied the equal protection of the laws.”",
    "optionA": "Article VI",
    "optionB": "Bill of Rights",
    "optionC": "Republic Act",
    "optionD": "Court Order",
    "correctAnswer": "B",
    "category": "General Information"
  }
]


----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_ChartActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import android.graphics.Color

class ChartActivity : ComponentActivity() {
    private val repository by lazy { QuestionRepository(applicationContext) }

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Progress Chart") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {  // Exit on click
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    ScoreChartScreen(modifier = Modifier.padding(innerPadding), sessions = repository.getAllSessions())
                }
            }
        }
    }
}

@Composable
fun ScoreChartScreen(modifier: Modifier = Modifier, sessions: Flow<List<PracticeSession>>) {
    val sessionList by sessions.collectAsState(emptyList())
    val context = LocalContext.current

    AndroidView(
        modifier = modifier.fillMaxSize(),
        factory = { ctx ->
            LineChart(ctx).apply {
                description.text = "Scores Over Time"
                setTouchEnabled(true)
                setDragEnabled(true)
                setScaleEnabled(true)
                setPinchZoom(true)
            }
        },
        update = { chart ->
            val entries = sessionList.mapIndexed { index, session ->
                Entry(index.toFloat(), session.score.toFloat())
            }
            val dataSet = LineDataSet(entries, "Scores")
            dataSet.color = Color.BLUE
            dataSet.valueTextColor = Color.BLACK
            chart.data = LineData(dataSet)
            chart.invalidate()
        }
    )
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_data_AppDatabase.kt -----

package com.example.csepractice.data

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase

@Database(entities = [Question::class, PracticeSession::class], version = 5, exportSchema = true)
abstract class AppDatabase : RoomDatabase() {
    abstract fun questionDao(): QuestionDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "cse_database"
                ).addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_4_5)
                    .fallbackToDestructiveMigration()  // For dev, removes data on mismatch
                    .build()
                INSTANCE = instance
                instance
            }
        }

        val MIGRATION_1_2 = object : Migration(1, 2) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasCategory = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "category") {
                            hasCategory = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasCategory) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN category TEXT NOT NULL DEFAULT ''")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasCategories = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "categories") {
                            hasCategories = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasCategories) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN categories TEXT NOT NULL DEFAULT ''")
                }
            }
        }

        val MIGRATION_2_3 = object : Migration(2, 3) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasDifficulty) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN difficulty TEXT NOT NULL DEFAULT 'Medium'")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasTimeTaken = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "timeTaken") {
                            hasTimeTaken = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasTimeTaken) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN timeTaken LONG NOT NULL DEFAULT 0")
                }
            }
        }

        val MIGRATION_3_4 = object : Migration(3, 4) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Empty migration to force version bump and fallback if needed
            }
        }

        val MIGRATION_4_5 = object : Migration(4, 5) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Check if 'difficulty' exists
                val cursor = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursor.getColumnIndex("name")
                if (cursor.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursor.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursor.moveToNext())
                }
                cursor.close()

                if (hasDifficulty) {
                    // Create temp table with current schema (no difficulty)
                    database.execSQL("""
                        CREATE TABLE questions_temp (
                            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                            text TEXT NOT NULL DEFAULT '',
                            optionA TEXT NOT NULL DEFAULT '',
                            optionB TEXT NOT NULL DEFAULT '',
                            optionC TEXT NOT NULL DEFAULT '',
                            optionD TEXT NOT NULL DEFAULT '',
                            correctAnswer TEXT NOT NULL DEFAULT '',
                            category TEXT NOT NULL DEFAULT ''
                        )
                    """.trimIndent())

                    // Copy data, excluding difficulty
                    database.execSQL("""
                        INSERT INTO questions_temp (id, text, optionA, optionB, optionC, optionD, correctAnswer, category)
                        SELECT id, text, optionA, optionB, optionC, optionD, correctAnswer, category FROM questions
                    """.trimIndent())

                    // Drop old table
                    database.execSQL("DROP TABLE questions")

                    // Rename temp to original
                    database.execSQL("ALTER TABLE questions_temp RENAME TO questions")
                }
            }
        }
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_data_PracticeSession.kt -----

// app/src/main/java/com/example/csepractice/data/PracticeSession.kt
package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "practice_sessions")
data class PracticeSession(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val date: Long = System.currentTimeMillis(),
    val score: Int,  // e.g., 80 (percentage)
    val correctCount: Int,
    val totalQuestions: Int,
    val categories: String = "",  // Comma-separated or "All"
    val timeTaken: Long = 0  // Total time in milliseconds
)

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_data_Question.kt -----

package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "questions")
data class Question(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val text: String = "",
    val optionA: String = "",
    val optionB: String = "",
    val optionC: String = "",
    val optionD: String = "",
    val correctAnswer: String = "",
    val category: String = ""
)

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_data_QuestionDao.kt -----

package com.example.csepractice.data

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface QuestionDao {
    @Query("SELECT * FROM questions ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestions(count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category = :category ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategory(category: String, count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category IN (:categories) ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>>

    @Query("SELECT DISTINCT category FROM questions")
    fun getCategories(): Flow<List<String>>  // New for dynamic categories

    @Query("SELECT AVG(score) FROM practice_sessions WHERE categories LIKE '%' || :category || '%'")
    fun getAvgByCategory(category: String): Flow<Double>  // New for category avg

    @Insert
    suspend fun insertQuestions(questions: List<Question>)

    @Insert
    suspend fun insertSession(session: PracticeSession)

    @Query("SELECT * FROM practice_sessions ORDER BY date DESC")
    fun getAllSessions(): Flow<List<PracticeSession>>

    @Query("DELETE FROM practice_sessions")
    suspend fun clearAllSessions()
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_MainActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.animation.togetherWith
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.example.csepractice.viewmodel.PracticeViewModel
import kotlinx.coroutines.delay
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)  // Default to light mode
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        AppTopBar(onSettingsClick = {
                            val intent = Intent(this@MainActivity, SettingsActivity::class.java)
                            startActivity(intent)
                        })
                    }
                ) { innerPadding ->
                    PracticeScreen(Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppTopBar(onSettingsClick: () -> Unit) {
    TopAppBar(
        title = { Text("CSE Practice") },
        actions = {
            IconButton(onClick = onSettingsClick) {
                Icon(Icons.Default.Settings, contentDescription = "Settings")
            }
        }
    )
}

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun PracticeScreen(modifier: Modifier = Modifier, viewModel: PracticeViewModel = viewModel()) {
    val questions by viewModel.questions.collectAsState()
    val currentIndex by viewModel.currentIndex.collectAsState()
    val selectedAnswers by viewModel.selectedAnswers.collectAsState()
    val score by viewModel.score.collectAsState()
    val sessions by viewModel.sessions.collectAsState(emptyList())
    val selectedCategories by viewModel.selectedCategories.collectAsState()
    val categories by viewModel.categories.collectAsState(emptyList())  // Dynamic
    val context = LocalContext.current

    val visible = remember { mutableStateOf(false) }
    val numQuestions = remember { mutableIntStateOf(10) }  // Default 10
    val isSelecting = remember { mutableStateOf(true) }  // New: Control selector vs loading

    LaunchedEffect(Unit) {
        delay(300)
        visible.value = true
    }

    AnimatedVisibility(visible = visible.value, enter = fadeIn()) {
        if (questions.isEmpty() && score == 0) {  // Selector or loading
            if (categories.isEmpty()) {
                CircularProgressIndicator()  // Loading categories
            } else if (isSelecting.value) {  // Show selector until button press
                Column(
                    modifier = modifier.fillMaxSize().padding(16.dp),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.Start  // Left-align for better readability
                ) {
                    Text("Select Categories:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    categories.forEach { category ->
                        Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(vertical = 4.dp)) {
                            Checkbox(
                                checked = selectedCategories.contains(category),
                                onCheckedChange = { viewModel.toggleCategory(category) }
                            )
                            Spacer(modifier = Modifier.width(8.dp))  // Space between checkbox and text
                            Text(category)
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Text("Number of Questions:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        listOf(10, 20, 30).forEach { num ->
                            RadioButton(selected = numQuestions.intValue == num, onClick = { numQuestions.intValue = num })
                            Text("$num", modifier = Modifier.padding(end = 16.dp))  // Space between options
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(onClick = {
                        isSelecting.value = false
                        viewModel.startPractice(numQuestions.intValue)
                    }, modifier = Modifier.align(Alignment.CenterHorizontally)) {
                        Text("Start Practice")
                    }
                }
            } else {
                Column(modifier = modifier.fillMaxSize(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally) {
                    CircularProgressIndicator(color = MaterialTheme.colorScheme.primary)
                    Text("Loading questions...", modifier = Modifier.padding(top = 16.dp))
                }
            }
        } else if (score > 0) {
            val scrollState = rememberScrollState()
            Column(
                modifier = modifier.fillMaxSize().verticalScroll(scrollState).padding(16.dp),
                verticalArrangement = Arrangement.Center
            ) {
                Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                    Column(modifier = Modifier.padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Your score: $score%", style = MaterialTheme.typography.headlineMedium, color = MaterialTheme.colorScheme.primary)
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            viewModel.resetForNewSession()
                            isSelecting.value = true  // Reset to show selector on new session
                        }) {
                            Icon(Icons.Default.Refresh, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                            Text("Start New Practice")
                        }
                        Spacer(modifier = Modifier.height(8.dp))
                        Button(onClick = { viewModel.practiceWeakAreas() }) {
                            Text("Practice Weak Areas")
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Text("Progress History:", style = MaterialTheme.typography.titleMedium)
                Column {
                    Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                        Text("Date", modifier = Modifier.weight(2f), fontWeight = FontWeight.Bold)
                        Text("Score", modifier = Modifier.weight(1f), fontWeight = FontWeight.Bold)
                    }
                    sessions.forEach { session ->
                        val formattedDate = SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(Date(session.date))
                        Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                            Text(formattedDate, modifier = Modifier.weight(2f))
                            Text("${session.score}%", modifier = Modifier.weight(1f))
                        }
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                val averageScore = if (sessions.isNotEmpty()) {
                    sessions.map { it.score }.average().toInt()
                } else {
                    0
                }
                Text(
                    text = "Average Score: $averageScore%",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text("Category Averages:", style = MaterialTheme.typography.titleMedium)
                categories.forEach { cat ->
                    val avg by viewModel.getAverageForCategory(cat).collectAsState(0.0)
                    Text("$cat: ${avg.toInt()}%")
                }
                Spacer(modifier = Modifier.height(16.dp))
                Button(
                    onClick = {
                        val intent = Intent(context, ChartActivity::class.java)
                        context.startActivity(intent)
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary),
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                ) {
                    Text("View Progress Chart", color = Color.White)
                }
            }
        } else {
            val currentQuestion = questions[currentIndex]
            val isCurrentAnswered = selectedAnswers.containsKey(currentIndex)
            Column(modifier = modifier.fillMaxSize().padding(16.dp)) {
                AnimatedContent(
                    targetState = currentIndex,
                    transitionSpec = {
                        if (targetState > initialState) {
                            slideInHorizontally { width -> width } togetherWith slideOutHorizontally { width -> -width }
                        } else {
                            slideInHorizontally { width -> -width } togetherWith slideOutHorizontally { width -> width }
                        }
                    },
                    label = "questionAnimation"
                ) { index ->
                    val question = questions[index]
                    Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text(question.text, style = MaterialTheme.typography.titleLarge, color = MaterialTheme.colorScheme.primary)
                            listOf(question.optionA, question.optionB, question.optionC, question.optionD).forEachIndexed { optIndex, option ->
                                Row(verticalAlignment = Alignment.CenterVertically) {
                                    RadioButton(
                                        selected = selectedAnswers[index] == optIndex,
                                        onClick = { viewModel.selectAnswer(index, optIndex) }
                                    )
                                    Text(option)
                                }
                            }
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Row(
                    modifier = Modifier.fillMaxWidth().wrapContentHeight(),
                    horizontalArrangement = Arrangement.Center
                ) {
                    Button(onClick = { viewModel.previousQuestion() }, enabled = currentIndex > 0) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                        Text("Previous")
                    }
                    Spacer(modifier = Modifier.width(16.dp))
                    Button(onClick = { viewModel.nextQuestion() }, enabled = currentIndex < questions.size - 1 && isCurrentAnswered) {
                        Text("Next")
                        Icon(Icons.AutoMirrored.Filled.ArrowForward, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                if (currentIndex == questions.size - 1) {
                    Button(
                        onClick = {
                            Toast.makeText(context, "Submit pressed!", Toast.LENGTH_SHORT).show()
                            viewModel.calculateScore()
                        },
                        enabled = isCurrentAnswered,
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    ) {
                        Text("Submit")
                        Icon(Icons.Filled.Check, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
            }
        }
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_repository_QuestionRepository.kt -----

package com.example.csepractice.repository

import android.content.Context
import com.example.csepractice.data.AppDatabase
import com.example.csepractice.data.Question
import com.example.csepractice.data.PracticeSession
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull

class QuestionRepository(private val context: Context) {
    val dao = AppDatabase.getDatabase(context).questionDao()

    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>> =
        dao.getRandomQuestionsByCategories(categories, count)

    fun getRandomQuestions(count: Int): Flow<List<Question>> = dao.getRandomQuestions(count)

    suspend fun insertSession(session: PracticeSession) = dao.insertSession(session)

    fun getAllSessions(): Flow<List<PracticeSession>> = dao.getAllSessions()

    suspend fun clearAllSessions() {
        dao.clearAllSessions()
    }

    suspend fun seedQuestionsIfEmpty() {
        // Check if DB is empty
        val questionsFlow = dao.getRandomQuestions(1)
        val questions = questionsFlow.firstOrNull()
        if (questions.isNullOrEmpty()) {
            val json = context.assets.open("questions.json").bufferedReader().use { it.readText() }
            val type = object : TypeToken<List<Question>>() {}.type
            val questions: List<Question> = Gson().fromJson(json, type)
            dao.insertQuestions(questions)
        }
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_SettingsActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.csepractice.repository.QuestionRepository
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import android.widget.Toast

class SettingsActivity : ComponentActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Settings") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    SettingsScreen(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@Composable
fun SettingsScreen(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val prefs = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    var isDarkMode by remember { mutableStateOf(prefs.getBoolean("dark_mode", false)) }
    var colorScheme by remember { mutableStateOf(prefs.getString("color_scheme", "Default") ?: "Default") }

    Column(
        modifier = modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Settings", style = MaterialTheme.typography.headlineMedium)

        Spacer(modifier = Modifier.height(32.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            Text("Dark Mode", modifier = Modifier.padding(end = 16.dp))
            Switch(
                checked = isDarkMode,
                onCheckedChange = { enabled ->
                    isDarkMode = enabled
                    with(prefs.edit()) {
                        putBoolean("dark_mode", enabled)
                        apply()
                    }
                }
            )
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text("Color Scheme:")
        Row {
            listOf("Default", "Blue", "Green").forEach { scheme ->
                RadioButton(selected = colorScheme == scheme, onClick = {
                    colorScheme = scheme
                    with(prefs.edit()) {
                        putString("color_scheme", scheme)
                        apply()
                    }
                })
                Text(scheme)
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Button(onClick = {
            val repository = QuestionRepository(context)
            CoroutineScope(Dispatchers.IO).launch {
                repository.clearAllSessions()
            }
            Toast.makeText(context, "History reset!", Toast.LENGTH_SHORT).show()
        }) {
            Text("Reset Progress History")
        }
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_SplashActivity.kt -----

package com.example.csepractice

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.delay

class SplashActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            CSEPracticeAppTheme {
                SplashScreen {
                    startActivity(Intent(this@SplashActivity, MainActivity::class.java))
                    finish()
                }
            }
        }
    }
}

@Composable
fun SplashScreen(onTimeout: () -> Unit) {
    LaunchedEffect(Unit) {
        delay(3000)  // 3 seconds
        onTimeout()
    }
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Welcome to CSE Practice App",
            style = MaterialTheme.typography.headlineLarge,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 16.dp)
        )
        Text(
            text = "Inspired by Pearl Jynne Celestino\nBy PJC Inc",
            style = MaterialTheme.typography.bodyMedium,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 32.dp)
        )
        Text("Quick Tips:", style = MaterialTheme.typography.titleMedium)
        Text("1. Practice daily for best results!")
        Text("2. Focus on weak categories using the button.")
        Text("3. Review explanations after tests.")
        Text("4. Aim for 80%+ to pass CSE!")
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_ui_theme_Color.kt -----

package com.example.csepractice.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

// New for schemes
val Blue80 = Color(0xFF80D8FF)
val BlueGrey80 = Color(0xFFB3E5FC)
val Blue40 = Color(0xFF0277BD)
val BlueGrey40 = Color(0xFF81D4FA)

val Green80 = Color(0xFFCCFF90)
val GreenGrey80 = Color(0xFFE0F2F1)
val Green40 = Color(0xFF558B2F)
val GreenGrey40 = Color(0xFFA5D6A7)

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_ui_theme_Theme.kt -----

package com.example.csepractice.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40
)

private val BlueColorScheme = lightColorScheme(
    primary = Blue40,
    secondary = BlueGrey40,
    tertiary = Blue80
)

private val GreenColorScheme = lightColorScheme(
    primary = Green40,
    secondary = GreenGrey40,
    tertiary = Green80
)

@Composable
fun CSEPracticeAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val prefs = LocalContext.current.getSharedPreferences("app_prefs", android.content.Context.MODE_PRIVATE)
    val scheme = prefs.getString("color_scheme", "Default") ?: "Default"

    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        scheme == "Blue" -> BlueColorScheme
        scheme == "Green" -> GreenColorScheme
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = androidx.compose.material3.Typography(),  // Fully qualify to avoid conflict
        content = content
    )
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_utils_ListConverters.kt -----

package com.example.csepractice.utils

import androidx.room.TypeConverter
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class ListConverters {
    private val gson = Gson()

    @TypeConverter
    fun fromStringList(value: String): List<String> {
        val listType = object : TypeToken<List<String>>() {}.type
        return gson.fromJson(value, listType)
    }

    @TypeConverter
    fun toStringList(list: List<String>): String {
        return gson.toJson(list)
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_java_com_example_csepractice_viewmodel_PracticeViewModel.kt -----

package com.example.csepractice.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.data.Question
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlin.system.measureTimeMillis

class PracticeViewModel(application: Application) : AndroidViewModel(application) {
    private val repository = QuestionRepository(application)
    private val dao = repository.dao  // For new queries

    private val _questions = MutableStateFlow<List<Question>>(emptyList())
    val questions: StateFlow<List<Question>> = _questions.asStateFlow()

    private val _currentIndex = MutableStateFlow(0)
    val currentIndex: StateFlow<Int> = _currentIndex.asStateFlow()

    private val _selectedAnswers = MutableStateFlow<Map<Int, Int>>(emptyMap())
    val selectedAnswers: StateFlow<Map<Int, Int>> = _selectedAnswers.asStateFlow()

    private val _score = MutableStateFlow(0)
    val score: StateFlow<Int> = _score.asStateFlow()

    private val _selectedCategories = MutableStateFlow<List<String>>(emptyList())
    val selectedCategories: StateFlow<List<String>> = _selectedCategories.asStateFlow()

    val sessions: Flow<List<PracticeSession>> = repository.getAllSessions()

    val categories: Flow<List<String>> = dao.getCategories()  // New dynamic categories

    init {
        viewModelScope.launch {
            repository.seedQuestionsIfEmpty()
            // No auto-load; wait for startPractice
        }
    }

    fun toggleCategory(category: String) {
        val current = _selectedCategories.value.toMutableList()
        if (current.contains(category)) {
            current.remove(category)
        } else {
            current.add(category)
        }
        _selectedCategories.value = current
    }

    fun startPractice(numQuestions: Int) {
        val categories = _selectedCategories.value
        if (categories.isEmpty()) {
            loadAllQuestions(numQuestions)
        } else {
            loadQuestionsForCategories(categories, numQuestions)
        }
    }

    fun practiceWeakAreas(threshold: Double = 70.0) {
        viewModelScope.launch {
            val allCats = categories.first()  // Get list once
            val weak = mutableListOf<String>()
            for (cat in allCats) {
                val avg = getAverageForCategory(cat).first()  // Get avg once
                if (avg < threshold) {
                    weak.add(cat)
                }
            }
            _selectedCategories.value = weak
            if (weak.isNotEmpty()) {
                startPractice(10)  // Default to 10
            }  // Else, perhaps toast "No weak areas!"
        }
    }

    private fun loadQuestionsForCategories(categories: List<String>, count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestionsByCategories(categories, count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    private fun loadAllQuestions(count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestions(count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    fun getAverageForCategory(category: String): Flow<Double> = dao.getAvgByCategory(category)  // New

    fun selectAnswer(questionIndex: Int, optionIndex: Int) {
        _selectedAnswers.value = _selectedAnswers.value.toMutableMap().apply {
            this[questionIndex] = optionIndex
        }
    }

    fun nextQuestion() {
        if (_currentIndex.value < _questions.value.size - 1) {
            _currentIndex.value += 1
        }
    }

    fun previousQuestion() {
        if (_currentIndex.value > 0) {
            _currentIndex.value -= 1
        }
    }

    fun calculateScore() {
        val total = _questions.value.size
        var correct = 0
        _questions.value.forEachIndexed { index, question ->
            val selected = _selectedAnswers.value[index]
            val correctIndex = "ABCD".indexOf(question.correctAnswer)
            if (selected == correctIndex) {
                correct++
            }
        }
        _score.value = if (total > 0) (correct * 100) / total else 0
        viewModelScope.launch {
            repository.insertSession(
                PracticeSession(
                    score = _score.value,
                    correctCount = correct,
                    totalQuestions = total,
                    categories = _selectedCategories.value.joinToString(",")  // Save categories
                )
            )
        }
    }

    fun resetForNewSession() {
        _questions.value = emptyList()
        _currentIndex.value = 0
        _selectedAnswers.value = emptyMap()
        _score.value = 0
        _selectedCategories.value = emptyList()
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_res_drawable_ic_launcher_background.xml -----

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_res_drawable_ic_launcher_foreground.xml -----

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_res_mipmap-anydpi_ic_launcher.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_res_mipmap-anydpi_ic_launcher_round.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_res_values_colors.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_res_values_strings.xml -----

<resources>
    <string name="app_name">CSEPracticeApp</string>
</resources>

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_res_values_themes.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.CSEPracticeApp" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_res_xml_backup_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_main_res_xml_data_extraction_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_app_src_test_java_com_example_csepractice_ExampleUnitTest.kt -----

package com.example.csepractice

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_build.gradle.kts -----

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}

----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_gradlew -----

#!/bin/sh

#
# Copyright © 2015 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"


----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_gradlew.bat -----

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_gradle_libs.versions.toml -----

[versions]
agp = "8.13.0"
kotlin = "2.0.21"
coreKtx = "1.10.1"
junit = "4.13.2"
junitVersion = "1.1.5"
espressoCore = "3.5.1"
lifecycleRuntimeKtx = "2.6.1"
activityCompose = "1.8.0"
composeBom = "2024.09.00"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-compose-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-compose-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-compose-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-compose-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-compose-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-compose-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-compose-material3 = { group = "androidx.compose.material3", name = "material3" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }



----- End of File -----

----- File: flat_project_files\shared_project_files_shared_project_files_settings.gradle.kts -----

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    plugins {
        id("com.android.application") version "8.5.2"
        id("org.jetbrains.kotlin.android") version "1.9.24"
        id("org.jetbrains.kotlin.plugin.compose") version "1.9.24"
        id("org.jetbrains.kotlin.kapt") version "1.9.24"
        id("com.google.devtools.ksp") version "1.9.24-1.0.20"
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven("https://jitpack.io")  // Add this for MPAndroidChart
    }
}

rootProject.name = "CSEPracticeApp"
include(":app")

----- End of File -----

----- File: gradle\libs.versions.toml -----

[versions]
agp = "8.13.0"
kotlin = "2.0.21"
coreKtx = "1.10.1"
junit = "4.13.2"
junitVersion = "1.1.5"
espressoCore = "3.5.1"
lifecycleRuntimeKtx = "2.6.1"
activityCompose = "1.8.0"
composeBom = "2024.09.00"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-compose-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-compose-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-compose-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-compose-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-compose-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-compose-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-compose-material3 = { group = "androidx.compose.material3", name = "material3" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }



----- End of File -----

----- File: shared_project_files\build.gradle.kts -----

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}

----- End of File -----

----- File: shared_project_files\gradlew -----

#!/bin/sh

#
# Copyright © 2015 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"


----- End of File -----

----- File: shared_project_files\gradlew.bat -----

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


----- End of File -----

----- File: shared_project_files\settings.gradle.kts -----

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    plugins {
        id("com.android.application") version "8.5.2"
        id("org.jetbrains.kotlin.android") version "1.9.24"
        id("org.jetbrains.kotlin.plugin.compose") version "1.9.24"
        id("org.jetbrains.kotlin.kapt") version "1.9.24"
        id("com.google.devtools.ksp") version "1.9.24-1.0.20"
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven("https://jitpack.io")  // Add this for MPAndroidChart
    }
}

rootProject.name = "CSEPracticeApp"
include(":app")

----- End of File -----

----- File: shared_project_files\app\build.gradle.kts -----

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android") version "1.9.24"
    id("org.jetbrains.kotlin.kapt") version "1.9.24"
    id("com.google.devtools.ksp") version "1.9.24-1.0.20"
}

android {
    namespace = "com.example.csepractice"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.csepractice"
        minSdk = 26
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"  // Fix for Kotlin 1.9.24
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation("com.github.PhilJay:MPAndroidChart:v3.1.0")
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.6")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6")
    implementation("androidx.activity:activity-compose:1.9.2")
    implementation(platform("androidx.compose:compose-bom:2024.09.03"))
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.room:room-runtime:2.6.1")
    implementation("androidx.datastore:datastore-preferences:1.1.1")  // Alternative to SharedPreferences, but we'll use SharedPrefs here
    ksp("androidx.room:room-compiler:2.6.1")
    implementation("androidx.room:room-ktx:2.6.1")
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation(platform("androidx.compose:compose-bom:2024.09.03"))
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
}

----- End of File -----

----- File: shared_project_files\app\src\androidTest\java\com\example\csepractice\ExampleInstrumentedTest.kt -----

package com.example.csepractice

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.csepractice", appContext.packageName)
    }
}

----- End of File -----

----- File: shared_project_files\app\src\main\AndroidManifest.xml -----

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CSEPracticeApp">
        <activity
            android:name=".SplashActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.CSEPracticeApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".MainActivity" android:exported="false" />
        <activity android:name=".ChartActivity" android:exported="false" />
        <activity android:name=".SettingsActivity" />
    </application>

</manifest>

----- End of File -----

----- File: shared_project_files\app\src\main\assets\questions.json -----

[
  {
    "text": "Identify the synonym of 'eloquent'.",
    "optionA": "Silent",
    "optionB": "Articulate",
    "optionC": "Confused",
    "optionD": "Angry",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Would you like coffee __________ tea?",
    "optionA": "so",
    "optionB": "or",
    "optionC": "but",
    "optionD": "and",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "I like swimming, ______ my sister likes dancing.",
    "optionA": "and",
    "optionB": "or",
    "optionC": "because",
    "optionD": "but",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "The antonym of 'happy' is:",
    "optionA": "Joyful",
    "optionB": "Sad",
    "optionC": "Excited",
    "optionD": "Content",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct spelling: ",
    "optionA": "Recieve",
    "optionB": "Receive",
    "optionC": "Recive",
    "optionD": "Receve",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Complete the analogy: Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence is grammatically correct?",
    "optionA": "He go to school.",
    "optionB": "He goes to school.",
    "optionC": "He going to school.",
    "optionD": "He went to school.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "The word 'fast' can mean:",
    "optionA": "Quick",
    "optionB": "Not eating",
    "optionC": "Both A and B",
    "optionD": "None",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange: The / quick / brown / fox",
    "optionA": "The brown quick fox",
    "optionB": "The quick brown fox",
    "optionC": "Quick the brown fox",
    "optionD": "Brown the quick fox",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main idea of the passage? (Assume a passage)",
    "optionA": "Option A",
    "optionB": "Option B",
    "optionC": "Option C",
    "optionD": "Option D",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which of the following sentences contains an error in subject-verb agreement?",
    "optionA": "The team of players are practicing hard.",
    "optionB": "Each of the students has submitted their assignment.",
    "optionC": "Neither the manager nor the employees is happy with the decision.",
    "optionD": "No error.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct synonym for 'append.'",
    "optionA": "Remove",
    "optionB": "Add",
    "optionC": "Ignore",
    "optionD": "Divide",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In the sentence 'The chef cooked the meal quick,' identify the error.",
    "optionA": "The",
    "optionB": "cooked",
    "optionC": "quick",
    "optionD": "No error.",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange the following sentences to form a coherent paragraph: (1) However, it requires dedication. (2) Studying for exams is essential. (3) In summary, consistent effort pays off. (4) First, create a schedule.",
    "optionA": "2-4-1-3",
    "optionB": "4-2-1-3",
    "optionC": "2-1-4-3",
    "optionD": "1-3-2-4",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the antonym of 'opaque'?",
    "optionA": "Cloudy",
    "optionB": "Clear",
    "optionC": "Thick",
    "optionD": "Dense",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Identify the misspelled word in the sentence: 'The committee will accomodate all requests.'",
    "optionA": "committee",
    "optionB": "will",
    "optionC": "accomodate",
    "optionD": "requests",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct word usage: 'The effect of the new policy _____ immediate.'",
    "optionA": "were",
    "optionB": "was",
    "optionC": "are",
    "optionD": "is being",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In reading comprehension, if a passage states 'The economy is improving, but unemployment remains high,' what is the implied conclusion?",
    "optionA": "Unemployment will decrease soon.",
    "optionB": "Improvement does not solve all issues.",
    "optionC": "The economy is worsening.",
    "optionD": "No conclusion can be drawn.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence demonstrates parallelism?",
    "optionA": "She likes to swim, running, and to hike.",
    "optionB": "She likes swimming, running, and hiking.",
    "optionC": "She likes swim, run, and hiking.",
    "optionD": "She likes to swim, run, and hiking.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the contextual meaning of 'query' in 'Please query the database for updates'?",
    "optionA": "Question",
    "optionB": "Delete",
    "optionC": "Save",
    "optionD": "Ignore",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "2187, 729, 243, 81, 27, 9, ____?",
    "optionA": "6",
    "optionB": "3",
    "optionC": "4",
    "optionD": "2",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "1, 4, 9, 16, 25, 36, 49, 64, ____?",
    "optionA": "81",
    "optionB": "100",
    "optionC": "121",
    "optionD": "144",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "45 increased by what percent of itself gives 90?",
    "optionA": "50%",
    "optionB": "100%",
    "optionC": "200%",
    "optionD": "150%",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "15 is 150% of what number?",
    "optionA": "10",
    "optionB": "20",
    "optionC": "22.5",
    "optionD": "7.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 25% of 80?",
    "optionA": "20",
    "optionB": "25",
    "optionC": "30",
    "optionD": "40",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve: 2 + 3 * 4 - 5",
    "optionA": "9",
    "optionB": "5",
    "optionC": "3",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "The sum of x and 9 is:",
    "optionA": "x-9",
    "optionB": "x*9",
    "optionC": "x+9",
    "optionD": "x/9",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "If 3 apples cost 50 pesos, how much for 12?",
    "optionA": "150",
    "optionB": "200",
    "optionC": "100",
    "optionD": "250",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Find the average of 10, 20, 30.",
    "optionA": "20",
    "optionB": "15",
    "optionC": "25",
    "optionD": "30",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "A plate of special Sisig rice and a bowl of beef noodles costs Php 80. If the bowl of beef noodles costs Php 20 more than the plate of Sisig rice, how much is the bowl of beef noodles?",
    "optionA": "Php 30",
    "optionB": "Php 50",
    "optionC": "Php 60",
    "optionD": "Php 40",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 15% of 200?",
    "optionA": "30",
    "optionB": "25",
    "optionC": "35",
    "optionD": "20",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve for x: 3x + 5 = 20.",
    "optionA": "5",
    "optionB": "6",
    "optionC": "4",
    "optionD": "7",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If a train travels 60 km in 45 minutes, what is its speed in km/h?",
    "optionA": "80",
    "optionB": "90",
    "optionC": "70",
    "optionD": "100",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16?",
    "optionA": "20",
    "optionB": "24",
    "optionC": "32",
    "optionD": "18",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "A store offers a 20% discount on a Php 500 item. What is the final price?",
    "optionA": "Php 400",
    "optionB": "Php 450",
    "optionC": "Php 300",
    "optionD": "Php 350",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve the word problem: If 3 workers build a wall in 4 days, how many days for 6 workers?",
    "optionA": "2",
    "optionB": "3",
    "optionC": "1.5",
    "optionD": "2.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the area of a rectangle with length 10 and width 5?",
    "optionA": "50",
    "optionB": "30",
    "optionC": "40",
    "optionD": "60",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 3/4 to a decimal.",
    "optionA": "0.75",
    "optionB": "0.5",
    "optionC": "0.25",
    "optionD": "1.0",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If y = 2x + 3 and x=4, what is y?",
    "optionA": "11",
    "optionB": "9",
    "optionC": "10",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If all Bloops are Razzies and some Razzies are Lalas, then:",
    "optionA": "All Bloops are LaLAS",
    "optionB": "Some Bloops are LaLas",
    "optionC": "No Bloops are LaLas",
    "optionD": "Cannot determine",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Identify assumption: Students should study hard to pass.",
    "optionA": "Studying hard guarantees pass",
    "optionB": "Not studying leads to failure",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Next in series: A, C, E, G, ____",
    "optionA": "H",
    "optionB": "I",
    "optionC": "J",
    "optionD": "K",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Which is odd one out: Apple, Banana, Carrot, Orange",
    "optionA": "Apple",
    "optionB": "Banana",
    "optionC": "Carrot",
    "optionD": "Orange",
    "correctAnswer": "C",
    "category": "Analytical Ability"
  },
  {
    "text": "If X is Y's brother, Y is Z's sister, Z is X's:",
    "optionA": "Brother",
    "optionB": "Sister",
    "optionC": "Uncle",
    "optionD": "Self",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Conclusion from: All dogs bark. Spot barks. So Spot is a dog.",
    "optionA": "Valid",
    "optionB": "Invalid",
    "optionC": "True",
    "optionD": "False",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Iron: metal :: granite:",
    "optionA": "Marble",
    "optionB": "Rock",
    "optionC": "Sand",
    "optionD": "Solid",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If 2=5, 3=10, 4=17, 5=?",
    "optionA": "26",
    "optionB": "25",
    "optionC": "20",
    "optionD": "22",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Data interpretation: (Assume graph) What is the trend?",
    "optionA": "Increasing",
    "optionB": "Decreasing",
    "optionC": "Stable",
    "optionD": "Varying",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the capital of the Philippines?",
    "optionA": "Manila",
    "optionB": "Cebu",
    "optionC": "Davao",
    "optionD": "Quezon City",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Who is the current President of the Philippines? (As of 2022)",
    "optionA": "Ferdinand Marcos Jr.",
    "optionB": "Rodrigo Duterte",
    "optionC": "Benigno Aquino III",
    "optionD": "Gloria Arroyo",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine Constitution was ratified in:",
    "optionA": "1987",
    "optionB": "1973",
    "optionC": "1935",
    "optionD": "1899",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 is the:",
    "optionA": "Code of Conduct for Public Officials",
    "optionB": "Anti-Graft Law",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The three branches of government are:",
    "optionA": "Executive, Legislative, Judiciary",
    "optionB": "Senate, House, Court",
    "optionC": "President, Congress, Supreme Court",
    "optionD": "All above",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "National hero of the Philippines:",
    "optionA": "Jose Rizal",
    "optionB": "Andres Bonifacio",
    "optionC": "Emilio Aguinaldo",
    "optionD": "Lapu-Lapu",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine flag has colors:",
    "optionA": "Blue, Red, White, Yellow",
    "optionB": "Green, White, Red",
    "optionC": "Blue, White, Red",
    "optionD": "Red, White, Blue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Number of regions in the Philippines:",
    "optionA": "17",
    "optionB": "18",
    "optionC": "16",
    "optionD": "15",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The largest island is:",
    "optionA": "Luzon",
    "optionB": "Mindanao",
    "optionC": "Visayas",
    "optionD": "Palawan",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Independence Day is:",
    "optionA": "June 12",
    "optionB": "July 4",
    "optionC": "August 31",
    "optionD": "April 9",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "According to the Philippine Constitution, what is the minimum age to run for President?",
    "optionA": "35",
    "optionB": "30",
    "optionC": "40",
    "optionD": "25",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 refers to the Code of Conduct and Ethical Standards for:",
    "optionA": "Public Officials and Employees",
    "optionB": "Private Sector Workers",
    "optionC": "Students",
    "optionD": "Military Personnel",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Senators are there in the Philippine Senate?",
    "optionA": "24",
    "optionB": "20",
    "optionC": "30",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What does the Bill of Rights in the Constitution primarily protect?",
    "optionA": "Individual freedoms",
    "optionB": "Economic policies",
    "optionC": "Foreign relations",
    "optionD": "Military powers",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Under RA 6713, what is a prohibited act for public officials?",
    "optionA": "Political neutrality",
    "optionB": "Accepting gifts that create conflict of interest",
    "optionC": "Professionalism",
    "optionD": "Responsiveness to public",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "What branch of government includes the President and Vice President?",
    "optionA": "Executive",
    "optionB": "Legislative",
    "optionC": "Judicial",
    "optionD": "Local",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "In human rights concepts, what does 'peace' involve per the reviewer?",
    "optionA": "Absence of conflict and promotion of justice",
    "optionB": "Military strength",
    "optionC": "Economic growth only",
    "optionD": "Environmental protection",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What is a key norm of conduct under RA 6713?",
    "optionA": "Professionalism",
    "optionB": "Corruption",
    "optionC": "Nepotism",
    "optionD": "Bribery",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Environment Management and Protection in the Constitution emphasizes:",
    "optionA": "Sustainable development",
    "optionB": "Urban expansion",
    "optionC": "Industrial growth without limits",
    "optionD": "Deforestation",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Representatives are in the House based on population?",
    "optionA": "Up to 250 or more",
    "optionB": "Exactly 100",
    "optionC": "24",
    "optionD": "200 fixed",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Every Christian's path is beset by peril.",
    "optionA": "bested",
    "optionB": "frightened",
    "optionC": "surrounded",
    "optionD": "chased",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The power failure at 8 P.M. caused consternation among the barangay's residents.",
    "optionA": "dismay",
    "optionB": "deliberation",
    "optionC": "disability",
    "optionD": "distaste",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "The consensus among the congressmen was that the bill would not be passed.",
    "optionA": "divided",
    "optionB": "controversy",
    "optionC": "gathering",
    "optionD": "agreement",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Tempestuous times preceded the EDSA People Power Revolution.",
    "optionA": "emotionally charged",
    "optionB": "temperate",
    "optionC": "trying",
    "optionD": "peaceful",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Imelda Marcos was known for her ostentatious extravagance.",
    "optionA": "oscillating",
    "optionB": "loud",
    "optionC": "wealthy",
    "optionD": "showy",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Some believe that the treatment for modern-day depression is complete abstinence from social media use.",
    "optionA": "absence",
    "optionB": "avoidance",
    "optionC": "sickness",
    "optionD": "prescription",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Mary Grace Cafe is a favorite rendezvous for all the titas of Manila.",
    "optionA": "hidden retreat",
    "optionB": "hiding place",
    "optionC": "meeting place",
    "optionD": "dining room",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Lola Mona Lisa is so old that her health has regressed to the point that she may die any time soon.",
    "optionA": "remembered",
    "optionB": "alluded",
    "optionC": "deteriorated",
    "optionD": "progressed",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The garrulous taxi driver annoyed most of his passengers especially the introverted ones.",
    "optionA": "talkative",
    "optionB": "gracious",
    "optionC": "sickly",
    "optionD": "grey",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "A less scrupulous plumber could easily have unnecessarily replaced the drainpipes and run up the cost.",
    "optionA": "afraid",
    "optionB": "employed",
    "optionC": "careful",
    "optionD": "infamous",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Mental health awareness)",
    "optionA": "Mental Health Awareness Efforts",
    "optionB": "Government Initiatives in the Philippines",
    "optionC": "Challenges in Mental Health Support",
    "optionD": "Importance of Mental Health",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Which legislation is mentioned in the passage?",
    "optionA": "Healthcare Act",
    "optionB": "Education Act",
    "optionC": "Mental Health Act",
    "optionD": "Social Services Act",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Climate change)",
    "optionA": "Environmental Challenges",
    "optionB": "Government Policies",
    "optionC": "Climate Change",
    "optionD": "Renewable Energy",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "2/5 + 1/4 = ?",
    "optionA": "9/20",
    "optionB": "13/20",
    "optionC": "7/20",
    "optionD": "11/20",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Given the equation 3x + 6 = 15, what is the value of x?",
    "optionA": "3",
    "optionB": "4",
    "optionC": "5",
    "optionD": "6",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16, 32, ?",
    "optionA": "48",
    "optionB": "54",
    "optionC": "64",
    "optionD": "72",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 5, 10, 20, 40, ?",
    "optionA": "60",
    "optionB": "70",
    "optionC": "80",
    "optionD": "100",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 3, 6, 12, 24, ?",
    "optionA": "36",
    "optionB": "48",
    "optionC": "54",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 9, 16, 25, ?",
    "optionA": "30",
    "optionB": "36",
    "optionC": "42",
    "optionD": "49",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 3, 5, 7, 11, ?",
    "optionA": "13",
    "optionB": "14",
    "optionC": "15",
    "optionD": "17",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 8, 16, 24, 32, 40, ?",
    "optionA": "45",
    "optionB": "48",
    "optionC": "50",
    "optionD": "52",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 1, 2, 3, 5, 8, ?",
    "optionA": "10",
    "optionB": "11",
    "optionC": "12",
    "optionD": "13",
    "correctAnswer": "D",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 9, 27, 81, 243, ?",
    "optionA": "324",
    "optionB": "567",
    "optionC": "729",
    "optionD": "810",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 10, 20, 30, 40, ?",
    "optionA": "45",
    "optionB": "50",
    "optionC": "55",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Negligent: requirement: remiss: _____________.",
    "optionA": "duty",
    "optionB": "law",
    "optionC": "task",
    "optionD": "care",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Politician: statesman: ______________: ______________. ",
    "optionA": "lawyer: advocate",
    "optionB": "doctor: physician",
    "optionC": "teacher: educator",
    "optionD": "soldier: warrior",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Caution is to ________ as radar is to ________.",
    "optionA": "signal: wave",
    "optionB": "warning: detection",
    "optionC": "care: speed",
    "optionD": "alert: track",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What are the 3 main branches of the Government of the Philippines?",
    "optionA": "Senate, Supreme Court, Congress",
    "optionB": "Presidential, Unicameral-Parliamentary, Bicameral-Parliamentary",
    "optionC": "Legislative, Executive, Judicial",
    "optionD": "The Legislature, The Senate, The Supreme Court",
    "correctAnswer": "C",
    "category": "General Information"
  },
  {
    "text": "The Supreme Court shall be composed of a Chief Justice and how many Associates Justices?",
    "optionA": "12",
    "optionB": "13",
    "optionC": "14",
    "optionD": "15",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The Commander-in-Chief of all armed forces of the Philippines in 2025 is _________.",
    "optionA": "Air Force Commanding General Jeffrey Delgado",
    "optionB": "Ferdinand Marcos Jr.",
    "optionC": "Chief Justice Maria Lourdes Sereno",
    "optionD": "AFP Chief Lieutenant Gen. Emmanuel Bautista",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The executive power shall be vested in the _________.",
    "optionA": "President of the Philippines",
    "optionB": "House of Representatives",
    "optionC": "The Supreme Court",
    "optionD": "The Congress",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The legislative power shall be vested in the _________ which shall consist of a Senate and a House of Representatives.",
    "optionA": "Congress of the Philippines",
    "optionB": "House of Ombudsman",
    "optionC": "The Supreme Court",
    "optionD": "Bureau of Internal Revenue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Senate shall be composed of how many senators elected at large by voters of the Philippines?",
    "optionA": "21",
    "optionB": "22",
    "optionC": "23",
    "optionD": "24",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "How long shall the term of office of the senators be commenced?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The term of office of the President and Vice-president of the Philippines shall be up to how many years?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The members of the House of Representatives shall be elected for a term of _______.",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The following shall be exempted from taxation except:",
    "optionA": "Lands and buildings",
    "optionB": "Churches and convents",
    "optionC": "Charitable institutions",
    "optionD": "Non-profit cemeteries",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Congress, by a vote of ____ of both Houses in joint session assembled, voting separately, shall have the sole power to declare a state of war.",
    "optionA": "Two-thirds",
    "optionB": "One-half",
    "optionC": "Three quarters",
    "optionD": "Minority",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "It states that “no person shall be deprived of life, liberty, or property without due process of law, nor any person be denied the equal protection of the laws.”",
    "optionA": "Article VI",
    "optionB": "Bill of Rights",
    "optionC": "Republic Act",
    "optionD": "Court Order",
    "correctAnswer": "B",
    "category": "General Information"
  }
]


----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\ChartActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import android.graphics.Color

class ChartActivity : ComponentActivity() {
    private val repository by lazy { QuestionRepository(applicationContext) }

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Progress Chart") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {  // Exit on click
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    ScoreChartScreen(modifier = Modifier.padding(innerPadding), sessions = repository.getAllSessions())
                }
            }
        }
    }
}

@Composable
fun ScoreChartScreen(modifier: Modifier = Modifier, sessions: Flow<List<PracticeSession>>) {
    val sessionList by sessions.collectAsState(emptyList())
    val context = LocalContext.current

    AndroidView(
        modifier = modifier.fillMaxSize(),
        factory = { ctx ->
            LineChart(ctx).apply {
                description.text = "Scores Over Time"
                setTouchEnabled(true)
                setDragEnabled(true)
                setScaleEnabled(true)
                setPinchZoom(true)
            }
        },
        update = { chart ->
            val entries = sessionList.mapIndexed { index, session ->
                Entry(index.toFloat(), session.score.toFloat())
            }
            val dataSet = LineDataSet(entries, "Scores")
            dataSet.color = Color.BLUE
            dataSet.valueTextColor = Color.BLACK
            chart.data = LineData(dataSet)
            chart.invalidate()
        }
    )
}

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\MainActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.animation.togetherWith
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.example.csepractice.viewmodel.PracticeViewModel
import kotlinx.coroutines.delay
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)  // Default to light mode
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        AppTopBar(onSettingsClick = {
                            val intent = Intent(this@MainActivity, SettingsActivity::class.java)
                            startActivity(intent)
                        })
                    }
                ) { innerPadding ->
                    PracticeScreen(Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppTopBar(onSettingsClick: () -> Unit) {
    TopAppBar(
        title = { Text("CSE Practice") },
        actions = {
            IconButton(onClick = onSettingsClick) {
                Icon(Icons.Default.Settings, contentDescription = "Settings")
            }
        }
    )
}

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun PracticeScreen(modifier: Modifier = Modifier, viewModel: PracticeViewModel = viewModel()) {
    val questions by viewModel.questions.collectAsState()
    val currentIndex by viewModel.currentIndex.collectAsState()
    val selectedAnswers by viewModel.selectedAnswers.collectAsState()
    val score by viewModel.score.collectAsState()
    val sessions by viewModel.sessions.collectAsState(emptyList())
    val selectedCategories by viewModel.selectedCategories.collectAsState()
    val categories by viewModel.categories.collectAsState(emptyList())  // Dynamic
    val context = LocalContext.current

    val visible = remember { mutableStateOf(false) }
    val numQuestions = remember { mutableIntStateOf(10) }  // Default 10
    val isSelecting = remember { mutableStateOf(true) }  // New: Control selector vs loading

    LaunchedEffect(Unit) {
        delay(300)
        visible.value = true
    }

    AnimatedVisibility(visible = visible.value, enter = fadeIn()) {
        if (questions.isEmpty() && score == 0) {  // Selector or loading
            if (categories.isEmpty()) {
                CircularProgressIndicator()  // Loading categories
            } else if (isSelecting.value) {  // Show selector until button press
                Column(
                    modifier = modifier.fillMaxSize().padding(16.dp),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.Start  // Left-align for better readability
                ) {
                    Text("Select Categories:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    categories.forEach { category ->
                        Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(vertical = 4.dp)) {
                            Checkbox(
                                checked = selectedCategories.contains(category),
                                onCheckedChange = { viewModel.toggleCategory(category) }
                            )
                            Spacer(modifier = Modifier.width(8.dp))  // Space between checkbox and text
                            Text(category)
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Text("Number of Questions:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        listOf(10, 20, 30).forEach { num ->
                            RadioButton(selected = numQuestions.intValue == num, onClick = { numQuestions.intValue = num })
                            Text("$num", modifier = Modifier.padding(end = 16.dp))  // Space between options
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(onClick = {
                        isSelecting.value = false
                        viewModel.startPractice(numQuestions.intValue)
                    }, modifier = Modifier.align(Alignment.CenterHorizontally)) {
                        Text("Start Practice")
                    }
                }
            } else {
                Column(modifier = modifier.fillMaxSize(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally) {
                    CircularProgressIndicator(color = MaterialTheme.colorScheme.primary)
                    Text("Loading questions...", modifier = Modifier.padding(top = 16.dp))
                }
            }
        } else if (score > 0) {
            val scrollState = rememberScrollState()
            Column(
                modifier = modifier.fillMaxSize().verticalScroll(scrollState).padding(16.dp),
                verticalArrangement = Arrangement.Center
            ) {
                Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                    Column(modifier = Modifier.padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Your score: $score%", style = MaterialTheme.typography.headlineMedium, color = MaterialTheme.colorScheme.primary)
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            viewModel.resetForNewSession()
                            isSelecting.value = true  // Reset to show selector on new session
                        }) {
                            Icon(Icons.Default.Refresh, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                            Text("Start New Practice")
                        }
                        Spacer(modifier = Modifier.height(8.dp))
                        Button(onClick = { viewModel.practiceWeakAreas() }) {
                            Text("Practice Weak Areas")
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Text("Progress History:", style = MaterialTheme.typography.titleMedium)
                Column {
                    Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                        Text("Date", modifier = Modifier.weight(2f), fontWeight = FontWeight.Bold)
                        Text("Score", modifier = Modifier.weight(1f), fontWeight = FontWeight.Bold)
                    }
                    sessions.forEach { session ->
                        val formattedDate = SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(Date(session.date))
                        Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                            Text(formattedDate, modifier = Modifier.weight(2f))
                            Text("${session.score}%", modifier = Modifier.weight(1f))
                        }
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                val averageScore = if (sessions.isNotEmpty()) {
                    sessions.map { it.score }.average().toInt()
                } else {
                    0
                }
                Text(
                    text = "Average Score: $averageScore%",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text("Category Averages:", style = MaterialTheme.typography.titleMedium)
                categories.forEach { cat ->
                    val avg by viewModel.getAverageForCategory(cat).collectAsState(0.0)
                    Text("$cat: ${avg.toInt()}%")
                }
                Spacer(modifier = Modifier.height(16.dp))
                Button(
                    onClick = {
                        val intent = Intent(context, ChartActivity::class.java)
                        context.startActivity(intent)
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary),
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                ) {
                    Text("View Progress Chart", color = Color.White)
                }
            }
        } else {
            val currentQuestion = questions[currentIndex]
            val isCurrentAnswered = selectedAnswers.containsKey(currentIndex)
            Column(modifier = modifier.fillMaxSize().padding(16.dp)) {
                AnimatedContent(
                    targetState = currentIndex,
                    transitionSpec = {
                        if (targetState > initialState) {
                            slideInHorizontally { width -> width } togetherWith slideOutHorizontally { width -> -width }
                        } else {
                            slideInHorizontally { width -> -width } togetherWith slideOutHorizontally { width -> width }
                        }
                    },
                    label = "questionAnimation"
                ) { index ->
                    val question = questions[index]
                    Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text(question.text, style = MaterialTheme.typography.titleLarge, color = MaterialTheme.colorScheme.primary)
                            listOf(question.optionA, question.optionB, question.optionC, question.optionD).forEachIndexed { optIndex, option ->
                                Row(verticalAlignment = Alignment.CenterVertically) {
                                    RadioButton(
                                        selected = selectedAnswers[index] == optIndex,
                                        onClick = { viewModel.selectAnswer(index, optIndex) }
                                    )
                                    Text(option)
                                }
                            }
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Row(
                    modifier = Modifier.fillMaxWidth().wrapContentHeight(),
                    horizontalArrangement = Arrangement.Center
                ) {
                    Button(onClick = { viewModel.previousQuestion() }, enabled = currentIndex > 0) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                        Text("Previous")
                    }
                    Spacer(modifier = Modifier.width(16.dp))
                    Button(onClick = { viewModel.nextQuestion() }, enabled = currentIndex < questions.size - 1 && isCurrentAnswered) {
                        Text("Next")
                        Icon(Icons.AutoMirrored.Filled.ArrowForward, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                if (currentIndex == questions.size - 1) {
                    Button(
                        onClick = {
                            Toast.makeText(context, "Submit pressed!", Toast.LENGTH_SHORT).show()
                            viewModel.calculateScore()
                        },
                        enabled = isCurrentAnswered,
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    ) {
                        Text("Submit")
                        Icon(Icons.Filled.Check, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
            }
        }
    }
}

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\SettingsActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.csepractice.repository.QuestionRepository
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import android.widget.Toast

class SettingsActivity : ComponentActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Settings") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    SettingsScreen(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@Composable
fun SettingsScreen(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val prefs = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    var isDarkMode by remember { mutableStateOf(prefs.getBoolean("dark_mode", false)) }
    var colorScheme by remember { mutableStateOf(prefs.getString("color_scheme", "Default") ?: "Default") }

    Column(
        modifier = modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Settings", style = MaterialTheme.typography.headlineMedium)

        Spacer(modifier = Modifier.height(32.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            Text("Dark Mode", modifier = Modifier.padding(end = 16.dp))
            Switch(
                checked = isDarkMode,
                onCheckedChange = { enabled ->
                    isDarkMode = enabled
                    with(prefs.edit()) {
                        putBoolean("dark_mode", enabled)
                        apply()
                    }
                }
            )
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text("Color Scheme:")
        Row {
            listOf("Default", "Blue", "Green").forEach { scheme ->
                RadioButton(selected = colorScheme == scheme, onClick = {
                    colorScheme = scheme
                    with(prefs.edit()) {
                        putString("color_scheme", scheme)
                        apply()
                    }
                })
                Text(scheme)
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Button(onClick = {
            val repository = QuestionRepository(context)
            CoroutineScope(Dispatchers.IO).launch {
                repository.clearAllSessions()
            }
            Toast.makeText(context, "History reset!", Toast.LENGTH_SHORT).show()
        }) {
            Text("Reset Progress History")
        }
    }
}

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\SplashActivity.kt -----

package com.example.csepractice

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.delay

class SplashActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            CSEPracticeAppTheme {
                SplashScreen {
                    startActivity(Intent(this@SplashActivity, MainActivity::class.java))
                    finish()
                }
            }
        }
    }
}

@Composable
fun SplashScreen(onTimeout: () -> Unit) {
    LaunchedEffect(Unit) {
        delay(3000)  // 3 seconds
        onTimeout()
    }
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Welcome to CSE Practice App",
            style = MaterialTheme.typography.headlineLarge,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 16.dp)
        )
        Text(
            text = "Inspired by Pearl Jynne Celestino\nBy PJC Inc",
            style = MaterialTheme.typography.bodyMedium,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 32.dp)
        )
        Text("Quick Tips:", style = MaterialTheme.typography.titleMedium)
        Text("1. Practice daily for best results!")
        Text("2. Focus on weak categories using the button.")
        Text("3. Review explanations after tests.")
        Text("4. Aim for 80%+ to pass CSE!")
    }
}

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\data\AppDatabase.kt -----

package com.example.csepractice.data

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase

@Database(entities = [Question::class, PracticeSession::class], version = 5, exportSchema = true)
abstract class AppDatabase : RoomDatabase() {
    abstract fun questionDao(): QuestionDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "cse_database"
                ).addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_4_5)
                    .fallbackToDestructiveMigration()  // For dev, removes data on mismatch
                    .build()
                INSTANCE = instance
                instance
            }
        }

        val MIGRATION_1_2 = object : Migration(1, 2) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasCategory = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "category") {
                            hasCategory = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasCategory) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN category TEXT NOT NULL DEFAULT ''")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasCategories = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "categories") {
                            hasCategories = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasCategories) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN categories TEXT NOT NULL DEFAULT ''")
                }
            }
        }

        val MIGRATION_2_3 = object : Migration(2, 3) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasDifficulty) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN difficulty TEXT NOT NULL DEFAULT 'Medium'")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasTimeTaken = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "timeTaken") {
                            hasTimeTaken = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasTimeTaken) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN timeTaken LONG NOT NULL DEFAULT 0")
                }
            }
        }

        val MIGRATION_3_4 = object : Migration(3, 4) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Empty migration to force version bump and fallback if needed
            }
        }

        val MIGRATION_4_5 = object : Migration(4, 5) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Check if 'difficulty' exists
                val cursor = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursor.getColumnIndex("name")
                if (cursor.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursor.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursor.moveToNext())
                }
                cursor.close()

                if (hasDifficulty) {
                    // Create temp table with current schema (no difficulty)
                    database.execSQL("""
                        CREATE TABLE questions_temp (
                            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                            text TEXT NOT NULL DEFAULT '',
                            optionA TEXT NOT NULL DEFAULT '',
                            optionB TEXT NOT NULL DEFAULT '',
                            optionC TEXT NOT NULL DEFAULT '',
                            optionD TEXT NOT NULL DEFAULT '',
                            correctAnswer TEXT NOT NULL DEFAULT '',
                            category TEXT NOT NULL DEFAULT ''
                        )
                    """.trimIndent())

                    // Copy data, excluding difficulty
                    database.execSQL("""
                        INSERT INTO questions_temp (id, text, optionA, optionB, optionC, optionD, correctAnswer, category)
                        SELECT id, text, optionA, optionB, optionC, optionD, correctAnswer, category FROM questions
                    """.trimIndent())

                    // Drop old table
                    database.execSQL("DROP TABLE questions")

                    // Rename temp to original
                    database.execSQL("ALTER TABLE questions_temp RENAME TO questions")
                }
            }
        }
    }
}

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\data\PracticeSession.kt -----

// app/src/main/java/com/example/csepractice/data/PracticeSession.kt
package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "practice_sessions")
data class PracticeSession(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val date: Long = System.currentTimeMillis(),
    val score: Int,  // e.g., 80 (percentage)
    val correctCount: Int,
    val totalQuestions: Int,
    val categories: String = "",  // Comma-separated or "All"
    val timeTaken: Long = 0  // Total time in milliseconds
)

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\data\Question.kt -----

package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "questions")
data class Question(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val text: String = "",
    val optionA: String = "",
    val optionB: String = "",
    val optionC: String = "",
    val optionD: String = "",
    val correctAnswer: String = "",
    val category: String = ""
)

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\data\QuestionDao.kt -----

package com.example.csepractice.data

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface QuestionDao {
    @Query("SELECT * FROM questions ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestions(count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category = :category ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategory(category: String, count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category IN (:categories) ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>>

    @Query("SELECT DISTINCT category FROM questions")
    fun getCategories(): Flow<List<String>>  // New for dynamic categories

    @Query("SELECT AVG(score) FROM practice_sessions WHERE categories LIKE '%' || :category || '%'")
    fun getAvgByCategory(category: String): Flow<Double>  // New for category avg

    @Insert
    suspend fun insertQuestions(questions: List<Question>)

    @Insert
    suspend fun insertSession(session: PracticeSession)

    @Query("SELECT * FROM practice_sessions ORDER BY date DESC")
    fun getAllSessions(): Flow<List<PracticeSession>>

    @Query("DELETE FROM practice_sessions")
    suspend fun clearAllSessions()
}

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\repository\QuestionRepository.kt -----

package com.example.csepractice.repository

import android.content.Context
import com.example.csepractice.data.AppDatabase
import com.example.csepractice.data.Question
import com.example.csepractice.data.PracticeSession
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull

class QuestionRepository(private val context: Context) {
    val dao = AppDatabase.getDatabase(context).questionDao()

    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>> =
        dao.getRandomQuestionsByCategories(categories, count)

    fun getRandomQuestions(count: Int): Flow<List<Question>> = dao.getRandomQuestions(count)

    suspend fun insertSession(session: PracticeSession) = dao.insertSession(session)

    fun getAllSessions(): Flow<List<PracticeSession>> = dao.getAllSessions()

    suspend fun clearAllSessions() {
        dao.clearAllSessions()
    }

    suspend fun seedQuestionsIfEmpty() {
        // Check if DB is empty
        val questionsFlow = dao.getRandomQuestions(1)
        val questions = questionsFlow.firstOrNull()
        if (questions.isNullOrEmpty()) {
            val json = context.assets.open("questions.json").bufferedReader().use { it.readText() }
            val type = object : TypeToken<List<Question>>() {}.type
            val questions: List<Question> = Gson().fromJson(json, type)
            dao.insertQuestions(questions)
        }
    }
}

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\ui\theme\Color.kt -----

package com.example.csepractice.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

// New for schemes
val Blue80 = Color(0xFF80D8FF)
val BlueGrey80 = Color(0xFFB3E5FC)
val Blue40 = Color(0xFF0277BD)
val BlueGrey40 = Color(0xFF81D4FA)

val Green80 = Color(0xFFCCFF90)
val GreenGrey80 = Color(0xFFE0F2F1)
val Green40 = Color(0xFF558B2F)
val GreenGrey40 = Color(0xFFA5D6A7)

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\ui\theme\Theme.kt -----

package com.example.csepractice.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40
)

private val BlueColorScheme = lightColorScheme(
    primary = Blue40,
    secondary = BlueGrey40,
    tertiary = Blue80
)

private val GreenColorScheme = lightColorScheme(
    primary = Green40,
    secondary = GreenGrey40,
    tertiary = Green80
)

@Composable
fun CSEPracticeAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val prefs = LocalContext.current.getSharedPreferences("app_prefs", android.content.Context.MODE_PRIVATE)
    val scheme = prefs.getString("color_scheme", "Default") ?: "Default"

    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        scheme == "Blue" -> BlueColorScheme
        scheme == "Green" -> GreenColorScheme
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = androidx.compose.material3.Typography(),  // Fully qualify to avoid conflict
        content = content
    )
}

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\utils\ListConverters.kt -----

package com.example.csepractice.utils

import androidx.room.TypeConverter
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class ListConverters {
    private val gson = Gson()

    @TypeConverter
    fun fromStringList(value: String): List<String> {
        val listType = object : TypeToken<List<String>>() {}.type
        return gson.fromJson(value, listType)
    }

    @TypeConverter
    fun toStringList(list: List<String>): String {
        return gson.toJson(list)
    }
}

----- End of File -----

----- File: shared_project_files\app\src\main\java\com\example\csepractice\viewmodel\PracticeViewModel.kt -----

package com.example.csepractice.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.data.Question
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlin.system.measureTimeMillis

class PracticeViewModel(application: Application) : AndroidViewModel(application) {
    private val repository = QuestionRepository(application)
    private val dao = repository.dao  // For new queries

    private val _questions = MutableStateFlow<List<Question>>(emptyList())
    val questions: StateFlow<List<Question>> = _questions.asStateFlow()

    private val _currentIndex = MutableStateFlow(0)
    val currentIndex: StateFlow<Int> = _currentIndex.asStateFlow()

    private val _selectedAnswers = MutableStateFlow<Map<Int, Int>>(emptyMap())
    val selectedAnswers: StateFlow<Map<Int, Int>> = _selectedAnswers.asStateFlow()

    private val _score = MutableStateFlow(0)
    val score: StateFlow<Int> = _score.asStateFlow()

    private val _selectedCategories = MutableStateFlow<List<String>>(emptyList())
    val selectedCategories: StateFlow<List<String>> = _selectedCategories.asStateFlow()

    val sessions: Flow<List<PracticeSession>> = repository.getAllSessions()

    val categories: Flow<List<String>> = dao.getCategories()  // New dynamic categories

    init {
        viewModelScope.launch {
            repository.seedQuestionsIfEmpty()
            // No auto-load; wait for startPractice
        }
    }

    fun toggleCategory(category: String) {
        val current = _selectedCategories.value.toMutableList()
        if (current.contains(category)) {
            current.remove(category)
        } else {
            current.add(category)
        }
        _selectedCategories.value = current
    }

    fun startPractice(numQuestions: Int) {
        val categories = _selectedCategories.value
        if (categories.isEmpty()) {
            loadAllQuestions(numQuestions)
        } else {
            loadQuestionsForCategories(categories, numQuestions)
        }
    }

    fun practiceWeakAreas(threshold: Double = 70.0) {
        viewModelScope.launch {
            val allCats = categories.first()  // Get list once
            val weak = mutableListOf<String>()
            for (cat in allCats) {
                val avg = getAverageForCategory(cat).first()  // Get avg once
                if (avg < threshold) {
                    weak.add(cat)
                }
            }
            _selectedCategories.value = weak
            if (weak.isNotEmpty()) {
                startPractice(10)  // Default to 10
            }  // Else, perhaps toast "No weak areas!"
        }
    }

    private fun loadQuestionsForCategories(categories: List<String>, count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestionsByCategories(categories, count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    private fun loadAllQuestions(count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestions(count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    fun getAverageForCategory(category: String): Flow<Double> = dao.getAvgByCategory(category)  // New

    fun selectAnswer(questionIndex: Int, optionIndex: Int) {
        _selectedAnswers.value = _selectedAnswers.value.toMutableMap().apply {
            this[questionIndex] = optionIndex
        }
    }

    fun nextQuestion() {
        if (_currentIndex.value < _questions.value.size - 1) {
            _currentIndex.value += 1
        }
    }

    fun previousQuestion() {
        if (_currentIndex.value > 0) {
            _currentIndex.value -= 1
        }
    }

    fun calculateScore() {
        val total = _questions.value.size
        var correct = 0
        _questions.value.forEachIndexed { index, question ->
            val selected = _selectedAnswers.value[index]
            val correctIndex = "ABCD".indexOf(question.correctAnswer)
            if (selected == correctIndex) {
                correct++
            }
        }
        _score.value = if (total > 0) (correct * 100) / total else 0
        viewModelScope.launch {
            repository.insertSession(
                PracticeSession(
                    score = _score.value,
                    correctCount = correct,
                    totalQuestions = total,
                    categories = _selectedCategories.value.joinToString(",")  // Save categories
                )
            )
        }
    }

    fun resetForNewSession() {
        _questions.value = emptyList()
        _currentIndex.value = 0
        _selectedAnswers.value = emptyMap()
        _score.value = 0
        _selectedCategories.value = emptyList()
    }
}

----- End of File -----

----- File: shared_project_files\app\src\main\res\drawable\ic_launcher_background.xml -----

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


----- End of File -----

----- File: shared_project_files\app\src\main\res\drawable\ic_launcher_foreground.xml -----

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

----- End of File -----

----- File: shared_project_files\app\src\main\res\mipmap-anydpi\ic_launcher.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: shared_project_files\app\src\main\res\mipmap-anydpi\ic_launcher_round.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: shared_project_files\app\src\main\res\values\colors.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

----- End of File -----

----- File: shared_project_files\app\src\main\res\values\strings.xml -----

<resources>
    <string name="app_name">CSEPracticeApp</string>
</resources>

----- End of File -----

----- File: shared_project_files\app\src\main\res\values\themes.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.CSEPracticeApp" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

----- End of File -----

----- File: shared_project_files\app\src\main\res\xml\backup_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

----- End of File -----

----- File: shared_project_files\app\src\main\res\xml\data_extraction_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

----- End of File -----

----- File: shared_project_files\app\src\test\java\com\example\csepractice\ExampleUnitTest.kt -----

package com.example.csepractice

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

----- End of File -----

----- File: shared_project_files\gradle\libs.versions.toml -----

[versions]
agp = "8.13.0"
kotlin = "2.0.21"
coreKtx = "1.10.1"
junit = "4.13.2"
junitVersion = "1.1.5"
espressoCore = "3.5.1"
lifecycleRuntimeKtx = "2.6.1"
activityCompose = "1.8.0"
composeBom = "2024.09.00"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-compose-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-compose-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-compose-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-compose-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-compose-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-compose-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-compose-material3 = { group = "androidx.compose.material3", name = "material3" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }



----- End of File -----

----- File: shared_project_files\shared_project_files\build.gradle.kts -----

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}

----- End of File -----

----- File: shared_project_files\shared_project_files\gradlew -----

#!/bin/sh

#
# Copyright © 2015 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"


----- End of File -----

----- File: shared_project_files\shared_project_files\gradlew.bat -----

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


----- End of File -----

----- File: shared_project_files\shared_project_files\settings.gradle.kts -----

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    plugins {
        id("com.android.application") version "8.5.2"
        id("org.jetbrains.kotlin.android") version "1.9.24"
        id("org.jetbrains.kotlin.plugin.compose") version "1.9.24"
        id("org.jetbrains.kotlin.kapt") version "1.9.24"
        id("com.google.devtools.ksp") version "1.9.24-1.0.20"
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven("https://jitpack.io")  // Add this for MPAndroidChart
    }
}

rootProject.name = "CSEPracticeApp"
include(":app")

----- End of File -----

----- File: shared_project_files\shared_project_files\app\build.gradle.kts -----

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android") version "1.9.24"
    id("org.jetbrains.kotlin.kapt") version "1.9.24"
    id("com.google.devtools.ksp") version "1.9.24-1.0.20"
}

android {
    namespace = "com.example.csepractice"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.csepractice"
        minSdk = 26
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"  // Fix for Kotlin 1.9.24
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation("com.github.PhilJay:MPAndroidChart:v3.1.0")
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.6")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6")
    implementation("androidx.activity:activity-compose:1.9.2")
    implementation(platform("androidx.compose:compose-bom:2024.09.03"))
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.room:room-runtime:2.6.1")
    implementation("androidx.datastore:datastore-preferences:1.1.1")  // Alternative to SharedPreferences, but we'll use SharedPrefs here
    ksp("androidx.room:room-compiler:2.6.1")
    implementation("androidx.room:room-ktx:2.6.1")
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation(platform("androidx.compose:compose-bom:2024.09.03"))
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\androidTest\java\com\example\csepractice\ExampleInstrumentedTest.kt -----

package com.example.csepractice

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.csepractice", appContext.packageName)
    }
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\AndroidManifest.xml -----

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CSEPracticeApp">
        <activity
            android:name=".SplashActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.CSEPracticeApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".MainActivity" android:exported="false" />
        <activity android:name=".ChartActivity" android:exported="false" />
        <activity android:name=".SettingsActivity" />
    </application>

</manifest>

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\assets\questions.json -----

[
  {
    "text": "Identify the synonym of 'eloquent'.",
    "optionA": "Silent",
    "optionB": "Articulate",
    "optionC": "Confused",
    "optionD": "Angry",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Would you like coffee __________ tea?",
    "optionA": "so",
    "optionB": "or",
    "optionC": "but",
    "optionD": "and",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "I like swimming, ______ my sister likes dancing.",
    "optionA": "and",
    "optionB": "or",
    "optionC": "because",
    "optionD": "but",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "The antonym of 'happy' is:",
    "optionA": "Joyful",
    "optionB": "Sad",
    "optionC": "Excited",
    "optionD": "Content",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct spelling: ",
    "optionA": "Recieve",
    "optionB": "Receive",
    "optionC": "Recive",
    "optionD": "Receve",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Complete the analogy: Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence is grammatically correct?",
    "optionA": "He go to school.",
    "optionB": "He goes to school.",
    "optionC": "He going to school.",
    "optionD": "He went to school.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "The word 'fast' can mean:",
    "optionA": "Quick",
    "optionB": "Not eating",
    "optionC": "Both A and B",
    "optionD": "None",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange: The / quick / brown / fox",
    "optionA": "The brown quick fox",
    "optionB": "The quick brown fox",
    "optionC": "Quick the brown fox",
    "optionD": "Brown the quick fox",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main idea of the passage? (Assume a passage)",
    "optionA": "Option A",
    "optionB": "Option B",
    "optionC": "Option C",
    "optionD": "Option D",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which of the following sentences contains an error in subject-verb agreement?",
    "optionA": "The team of players are practicing hard.",
    "optionB": "Each of the students has submitted their assignment.",
    "optionC": "Neither the manager nor the employees is happy with the decision.",
    "optionD": "No error.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct synonym for 'append.'",
    "optionA": "Remove",
    "optionB": "Add",
    "optionC": "Ignore",
    "optionD": "Divide",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In the sentence 'The chef cooked the meal quick,' identify the error.",
    "optionA": "The",
    "optionB": "cooked",
    "optionC": "quick",
    "optionD": "No error.",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Rearrange the following sentences to form a coherent paragraph: (1) However, it requires dedication. (2) Studying for exams is essential. (3) In summary, consistent effort pays off. (4) First, create a schedule.",
    "optionA": "2-4-1-3",
    "optionB": "4-2-1-3",
    "optionC": "2-1-4-3",
    "optionD": "1-3-2-4",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the antonym of 'opaque'?",
    "optionA": "Cloudy",
    "optionB": "Clear",
    "optionC": "Thick",
    "optionD": "Dense",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Identify the misspelled word in the sentence: 'The committee will accomodate all requests.'",
    "optionA": "committee",
    "optionB": "will",
    "optionC": "accomodate",
    "optionD": "requests",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Choose the correct word usage: 'The effect of the new policy _____ immediate.'",
    "optionA": "were",
    "optionB": "was",
    "optionC": "are",
    "optionD": "is being",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "In reading comprehension, if a passage states 'The economy is improving, but unemployment remains high,' what is the implied conclusion?",
    "optionA": "Unemployment will decrease soon.",
    "optionB": "Improvement does not solve all issues.",
    "optionC": "The economy is worsening.",
    "optionD": "No conclusion can be drawn.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Which sentence demonstrates parallelism?",
    "optionA": "She likes to swim, running, and to hike.",
    "optionB": "She likes swimming, running, and hiking.",
    "optionC": "She likes swim, run, and hiking.",
    "optionD": "She likes to swim, run, and hiking.",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the contextual meaning of 'query' in 'Please query the database for updates'?",
    "optionA": "Question",
    "optionB": "Delete",
    "optionC": "Save",
    "optionD": "Ignore",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "2187, 729, 243, 81, 27, 9, ____?",
    "optionA": "6",
    "optionB": "3",
    "optionC": "4",
    "optionD": "2",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "1, 4, 9, 16, 25, 36, 49, 64, ____?",
    "optionA": "81",
    "optionB": "100",
    "optionC": "121",
    "optionD": "144",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "45 increased by what percent of itself gives 90?",
    "optionA": "50%",
    "optionB": "100%",
    "optionC": "200%",
    "optionD": "150%",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "15 is 150% of what number?",
    "optionA": "10",
    "optionB": "20",
    "optionC": "22.5",
    "optionD": "7.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 25% of 80?",
    "optionA": "20",
    "optionB": "25",
    "optionC": "30",
    "optionD": "40",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve: 2 + 3 * 4 - 5",
    "optionA": "9",
    "optionB": "5",
    "optionC": "3",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "The sum of x and 9 is:",
    "optionA": "x-9",
    "optionB": "x*9",
    "optionC": "x+9",
    "optionD": "x/9",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "If 3 apples cost 50 pesos, how much for 12?",
    "optionA": "150",
    "optionB": "200",
    "optionC": "100",
    "optionD": "250",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Find the average of 10, 20, 30.",
    "optionA": "20",
    "optionB": "15",
    "optionC": "25",
    "optionD": "30",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "A plate of special Sisig rice and a bowl of beef noodles costs Php 80. If the bowl of beef noodles costs Php 20 more than the plate of Sisig rice, how much is the bowl of beef noodles?",
    "optionA": "Php 30",
    "optionB": "Php 50",
    "optionC": "Php 60",
    "optionD": "Php 40",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is 15% of 200?",
    "optionA": "30",
    "optionB": "25",
    "optionC": "35",
    "optionD": "20",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve for x: 3x + 5 = 20.",
    "optionA": "5",
    "optionB": "6",
    "optionC": "4",
    "optionD": "7",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If a train travels 60 km in 45 minutes, what is its speed in km/h?",
    "optionA": "80",
    "optionB": "90",
    "optionC": "70",
    "optionD": "100",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16?",
    "optionA": "20",
    "optionB": "24",
    "optionC": "32",
    "optionD": "18",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "A store offers a 20% discount on a Php 500 item. What is the final price?",
    "optionA": "Php 400",
    "optionB": "Php 450",
    "optionC": "Php 300",
    "optionD": "Php 350",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Solve the word problem: If 3 workers build a wall in 4 days, how many days for 6 workers?",
    "optionA": "2",
    "optionB": "3",
    "optionC": "1.5",
    "optionD": "2.5",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the area of a rectangle with length 10 and width 5?",
    "optionA": "50",
    "optionB": "30",
    "optionC": "40",
    "optionD": "60",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Convert 3/4 to a decimal.",
    "optionA": "0.75",
    "optionB": "0.5",
    "optionC": "0.25",
    "optionD": "1.0",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "If y = 2x + 3 and x=4, what is y?",
    "optionA": "11",
    "optionB": "9",
    "optionC": "10",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "Book is to reading as fork is to:",
    "optionA": "Drawing",
    "optionB": "Eating",
    "optionC": "Writing",
    "optionD": "Cooking",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If all Bloops are Razzies and some Razzies are Lalas, then:",
    "optionA": "All Bloops are LaLAS",
    "optionB": "Some Bloops are LaLas",
    "optionC": "No Bloops are LaLas",
    "optionD": "Cannot determine",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Identify assumption: Students should study hard to pass.",
    "optionA": "Studying hard guarantees pass",
    "optionB": "Not studying leads to failure",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Next in series: A, C, E, G, ____",
    "optionA": "H",
    "optionB": "I",
    "optionC": "J",
    "optionD": "K",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Which is odd one out: Apple, Banana, Carrot, Orange",
    "optionA": "Apple",
    "optionB": "Banana",
    "optionC": "Carrot",
    "optionD": "Orange",
    "correctAnswer": "C",
    "category": "Analytical Ability"
  },
  {
    "text": "If X is Y's brother, Y is Z's sister, Z is X's:",
    "optionA": "Brother",
    "optionB": "Sister",
    "optionC": "Uncle",
    "optionD": "Self",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Conclusion from: All dogs bark. Spot barks. So Spot is a dog.",
    "optionA": "Valid",
    "optionB": "Invalid",
    "optionC": "True",
    "optionD": "False",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Iron: metal :: granite:",
    "optionA": "Marble",
    "optionB": "Rock",
    "optionC": "Sand",
    "optionD": "Solid",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If 2=5, 3=10, 4=17, 5=?",
    "optionA": "26",
    "optionB": "25",
    "optionC": "20",
    "optionD": "22",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Data interpretation: (Assume graph) What is the trend?",
    "optionA": "Increasing",
    "optionB": "Decreasing",
    "optionC": "Stable",
    "optionD": "Varying",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the capital of the Philippines?",
    "optionA": "Manila",
    "optionB": "Cebu",
    "optionC": "Davao",
    "optionD": "Quezon City",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Who is the current President of the Philippines? (As of 2022)",
    "optionA": "Ferdinand Marcos Jr.",
    "optionB": "Rodrigo Duterte",
    "optionC": "Benigno Aquino III",
    "optionD": "Gloria Arroyo",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine Constitution was ratified in:",
    "optionA": "1987",
    "optionB": "1973",
    "optionC": "1935",
    "optionD": "1899",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 is the:",
    "optionA": "Code of Conduct for Public Officials",
    "optionB": "Anti-Graft Law",
    "optionC": "Both",
    "optionD": "None",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The three branches of government are:",
    "optionA": "Executive, Legislative, Judiciary",
    "optionB": "Senate, House, Court",
    "optionC": "President, Congress, Supreme Court",
    "optionD": "All above",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "National hero of the Philippines:",
    "optionA": "Jose Rizal",
    "optionB": "Andres Bonifacio",
    "optionC": "Emilio Aguinaldo",
    "optionD": "Lapu-Lapu",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Philippine flag has colors:",
    "optionA": "Blue, Red, White, Yellow",
    "optionB": "Green, White, Red",
    "optionC": "Blue, White, Red",
    "optionD": "Red, White, Blue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Number of regions in the Philippines:",
    "optionA": "17",
    "optionB": "18",
    "optionC": "16",
    "optionD": "15",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The largest island is:",
    "optionA": "Luzon",
    "optionB": "Mindanao",
    "optionC": "Visayas",
    "optionD": "Palawan",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Independence Day is:",
    "optionA": "June 12",
    "optionB": "July 4",
    "optionC": "August 31",
    "optionD": "April 9",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "According to the Philippine Constitution, what is the minimum age to run for President?",
    "optionA": "35",
    "optionB": "30",
    "optionC": "40",
    "optionD": "25",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "RA 6713 refers to the Code of Conduct and Ethical Standards for:",
    "optionA": "Public Officials and Employees",
    "optionB": "Private Sector Workers",
    "optionC": "Students",
    "optionD": "Military Personnel",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Senators are there in the Philippine Senate?",
    "optionA": "24",
    "optionB": "20",
    "optionC": "30",
    "optionD": "12",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What does the Bill of Rights in the Constitution primarily protect?",
    "optionA": "Individual freedoms",
    "optionB": "Economic policies",
    "optionC": "Foreign relations",
    "optionD": "Military powers",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Under RA 6713, what is a prohibited act for public officials?",
    "optionA": "Political neutrality",
    "optionB": "Accepting gifts that create conflict of interest",
    "optionC": "Professionalism",
    "optionD": "Responsiveness to public",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "What branch of government includes the President and Vice President?",
    "optionA": "Executive",
    "optionB": "Legislative",
    "optionC": "Judicial",
    "optionD": "Local",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "In human rights concepts, what does 'peace' involve per the reviewer?",
    "optionA": "Absence of conflict and promotion of justice",
    "optionB": "Military strength",
    "optionC": "Economic growth only",
    "optionD": "Environmental protection",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "What is a key norm of conduct under RA 6713?",
    "optionA": "Professionalism",
    "optionB": "Corruption",
    "optionC": "Nepotism",
    "optionD": "Bribery",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Environment Management and Protection in the Constitution emphasizes:",
    "optionA": "Sustainable development",
    "optionB": "Urban expansion",
    "optionC": "Industrial growth without limits",
    "optionD": "Deforestation",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "How many Representatives are in the House based on population?",
    "optionA": "Up to 250 or more",
    "optionB": "Exactly 100",
    "optionC": "24",
    "optionD": "200 fixed",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "Every Christian's path is beset by peril.",
    "optionA": "bested",
    "optionB": "frightened",
    "optionC": "surrounded",
    "optionD": "chased",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The power failure at 8 P.M. caused consternation among the barangay's residents.",
    "optionA": "dismay",
    "optionB": "deliberation",
    "optionC": "disability",
    "optionD": "distaste",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "The consensus among the congressmen was that the bill would not be passed.",
    "optionA": "divided",
    "optionB": "controversy",
    "optionC": "gathering",
    "optionD": "agreement",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Tempestuous times preceded the EDSA People Power Revolution.",
    "optionA": "emotionally charged",
    "optionB": "temperate",
    "optionC": "trying",
    "optionD": "peaceful",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Imelda Marcos was known for her ostentatious extravagance.",
    "optionA": "oscillating",
    "optionB": "loud",
    "optionC": "wealthy",
    "optionD": "showy",
    "correctAnswer": "D",
    "category": "Verbal Ability"
  },
  {
    "text": "Some believe that the treatment for modern-day depression is complete abstinence from social media use.",
    "optionA": "absence",
    "optionB": "avoidance",
    "optionC": "sickness",
    "optionD": "prescription",
    "correctAnswer": "B",
    "category": "Verbal Ability"
  },
  {
    "text": "Mary Grace Cafe is a favorite rendezvous for all the titas of Manila.",
    "optionA": "hidden retreat",
    "optionB": "hiding place",
    "optionC": "meeting place",
    "optionD": "dining room",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Lola Mona Lisa is so old that her health has regressed to the point that she may die any time soon.",
    "optionA": "remembered",
    "optionB": "alluded",
    "optionC": "deteriorated",
    "optionD": "progressed",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "The garrulous taxi driver annoyed most of his passengers especially the introverted ones.",
    "optionA": "talkative",
    "optionB": "gracious",
    "optionC": "sickly",
    "optionD": "grey",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "A less scrupulous plumber could easily have unnecessarily replaced the drainpipes and run up the cost.",
    "optionA": "afraid",
    "optionB": "employed",
    "optionC": "careful",
    "optionD": "infamous",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Mental health awareness)",
    "optionA": "Mental Health Awareness Efforts",
    "optionB": "Government Initiatives in the Philippines",
    "optionC": "Challenges in Mental Health Support",
    "optionD": "Importance of Mental Health",
    "correctAnswer": "A",
    "category": "Verbal Ability"
  },
  {
    "text": "Which legislation is mentioned in the passage?",
    "optionA": "Healthcare Act",
    "optionB": "Education Act",
    "optionC": "Mental Health Act",
    "optionD": "Social Services Act",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "What is the main topic of the passage? (Climate change)",
    "optionA": "Environmental Challenges",
    "optionB": "Government Policies",
    "optionC": "Climate Change",
    "optionD": "Renewable Energy",
    "correctAnswer": "C",
    "category": "Verbal Ability"
  },
  {
    "text": "Convert 310/50 to a decimal.",
    "optionA": "6.2",
    "optionB": "3.1",
    "optionC": "0.62",
    "optionD": "6.1",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "2/5 + 1/4 = ?",
    "optionA": "9/20",
    "optionB": "13/20",
    "optionC": "7/20",
    "optionD": "11/20",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "Given the equation 3x + 6 = 15, what is the value of x?",
    "optionA": "3",
    "optionB": "4",
    "optionC": "5",
    "optionD": "6",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 4, 8, 16, 32, ?",
    "optionA": "48",
    "optionB": "54",
    "optionC": "64",
    "optionD": "72",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 5, 10, 20, 40, ?",
    "optionA": "60",
    "optionB": "70",
    "optionC": "80",
    "optionD": "100",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 3, 6, 12, 24, ?",
    "optionA": "36",
    "optionB": "48",
    "optionC": "54",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 9, 16, 25, ?",
    "optionA": "30",
    "optionB": "36",
    "optionC": "42",
    "optionD": "49",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 2, 3, 5, 7, 11, ?",
    "optionA": "13",
    "optionB": "14",
    "optionC": "15",
    "optionD": "17",
    "correctAnswer": "A",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 8, 16, 24, 32, 40, ?",
    "optionA": "45",
    "optionB": "48",
    "optionC": "50",
    "optionD": "52",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 1, 2, 3, 5, 8, ?",
    "optionA": "10",
    "optionB": "11",
    "optionC": "12",
    "optionD": "13",
    "correctAnswer": "D",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 9, 27, 81, 243, ?",
    "optionA": "324",
    "optionB": "567",
    "optionC": "729",
    "optionD": "810",
    "correctAnswer": "C",
    "category": "Numerical Ability"
  },
  {
    "text": "What is the next number in the sequence: 10, 20, 30, 40, ?",
    "optionA": "45",
    "optionB": "50",
    "optionC": "55",
    "optionD": "60",
    "correctAnswer": "B",
    "category": "Numerical Ability"
  },
  {
    "text": "ODOMETER : MILEAGE :: COMPASS :",
    "optionA": "SPEED",
    "optionB": "HIKING",
    "optionC": "NEEDLE",
    "optionD": "DIRECTION",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "If it is rainy tomorrow, I will not visit my friend’s house. If I will visit my friend’s house, then ___________________",
    "optionA": "tomorrow is rainy",
    "optionB": "tomorrow is not rainy",
    "optionC": "it will rain later",
    "optionD": "I will stay home",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Only confident people are actors. All actors are wealthy. Ben is wealthy. Is 'Ben is a confident person' undoubtedly true?",
    "optionA": "Yes",
    "optionB": "No",
    "optionC": "Maybe",
    "optionD": "Always",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What is the next number in the sequence: 1, 4, 7, 10, 13?",
    "optionA": "15",
    "optionB": "16",
    "optionC": "14",
    "optionD": "17",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "If A then B, If B then C. Therefore, If A then C. Is this true?",
    "optionA": "Yes (Hypothetical Syllogism)",
    "optionB": "No",
    "optionC": "Only if A is true",
    "optionD": "Depends on C",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Big : Large :: Small :",
    "optionA": "Tiny",
    "optionB": "Huge",
    "optionC": "Medium",
    "optionD": "Wide",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Opaque : Clear :: Fancy :",
    "optionA": "Simple",
    "optionB": "Complex",
    "optionC": "Elegant",
    "optionD": "Plain",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Length : Meters :: Electric Current :",
    "optionA": "Volts",
    "optionB": "Amperes",
    "optionC": "Ohms",
    "optionD": "Watts",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "Chef : Cook :: Dancer :",
    "optionA": "Perform",
    "optionB": "Dance",
    "optionC": "Teach",
    "optionD": "Watch",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "In a data interpretation graph showing sales: Jan 100, Feb 150, Mar 120. What is the average?",
    "optionA": "123.33",
    "optionB": "120",
    "optionC": "130",
    "optionD": "125",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Negligent: requirement: remiss: _____________.",
    "optionA": "duty",
    "optionB": "law",
    "optionC": "task",
    "optionD": "care",
    "correctAnswer": "A",
    "category": "Analytical Ability"
  },
  {
    "text": "Politician: statesman: ______________: ______________. ",
    "optionA": "lawyer: advocate",
    "optionB": "doctor: physician",
    "optionC": "teacher: educator",
    "optionD": "soldier: warrior",
    "correctAnswer": "D",
    "category": "Analytical Ability"
  },
  {
    "text": "Caution is to ________ as radar is to ________.",
    "optionA": "signal: wave",
    "optionB": "warning: detection",
    "optionC": "care: speed",
    "optionD": "alert: track",
    "correctAnswer": "B",
    "category": "Analytical Ability"
  },
  {
    "text": "What are the 3 main branches of the Government of the Philippines?",
    "optionA": "Senate, Supreme Court, Congress",
    "optionB": "Presidential, Unicameral-Parliamentary, Bicameral-Parliamentary",
    "optionC": "Legislative, Executive, Judicial",
    "optionD": "The Legislature, The Senate, The Supreme Court",
    "correctAnswer": "C",
    "category": "General Information"
  },
  {
    "text": "The Supreme Court shall be composed of a Chief Justice and how many Associates Justices?",
    "optionA": "12",
    "optionB": "13",
    "optionC": "14",
    "optionD": "15",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The Commander-in-Chief of all armed forces of the Philippines in 2025 is _________.",
    "optionA": "Air Force Commanding General Jeffrey Delgado",
    "optionB": "Ferdinand Marcos Jr.",
    "optionC": "Chief Justice Maria Lourdes Sereno",
    "optionD": "AFP Chief Lieutenant Gen. Emmanuel Bautista",
    "correctAnswer": "B",
    "category": "General Information"
  },
  {
    "text": "The executive power shall be vested in the _________.",
    "optionA": "President of the Philippines",
    "optionB": "House of Representatives",
    "optionC": "The Supreme Court",
    "optionD": "The Congress",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The legislative power shall be vested in the _________ which shall consist of a Senate and a House of Representatives.",
    "optionA": "Congress of the Philippines",
    "optionB": "House of Ombudsman",
    "optionC": "The Supreme Court",
    "optionD": "Bureau of Internal Revenue",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Senate shall be composed of how many senators elected at large by voters of the Philippines?",
    "optionA": "21",
    "optionB": "22",
    "optionC": "23",
    "optionD": "24",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "How long shall the term of office of the senators be commenced?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The term of office of the President and Vice-president of the Philippines shall be up to how many years?",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "D",
    "category": "General Information"
  },
  {
    "text": "The members of the House of Representatives shall be elected for a term of _______.",
    "optionA": "3 years",
    "optionB": "4 years",
    "optionC": "5 years",
    "optionD": "6 years",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The following shall be exempted from taxation except:",
    "optionA": "Lands and buildings",
    "optionB": "Churches and convents",
    "optionC": "Charitable institutions",
    "optionD": "Non-profit cemeteries",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "The Congress, by a vote of ____ of both Houses in joint session assembled, voting separately, shall have the sole power to declare a state of war.",
    "optionA": "Two-thirds",
    "optionB": "One-half",
    "optionC": "Three quarters",
    "optionD": "Minority",
    "correctAnswer": "A",
    "category": "General Information"
  },
  {
    "text": "It states that “no person shall be deprived of life, liberty, or property without due process of law, nor any person be denied the equal protection of the laws.”",
    "optionA": "Article VI",
    "optionB": "Bill of Rights",
    "optionC": "Republic Act",
    "optionD": "Court Order",
    "correctAnswer": "B",
    "category": "General Information"
  }
]


----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\ChartActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import android.graphics.Color

class ChartActivity : ComponentActivity() {
    private val repository by lazy { QuestionRepository(applicationContext) }

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Progress Chart") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {  // Exit on click
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    ScoreChartScreen(modifier = Modifier.padding(innerPadding), sessions = repository.getAllSessions())
                }
            }
        }
    }
}

@Composable
fun ScoreChartScreen(modifier: Modifier = Modifier, sessions: Flow<List<PracticeSession>>) {
    val sessionList by sessions.collectAsState(emptyList())
    val context = LocalContext.current

    AndroidView(
        modifier = modifier.fillMaxSize(),
        factory = { ctx ->
            LineChart(ctx).apply {
                description.text = "Scores Over Time"
                setTouchEnabled(true)
                setDragEnabled(true)
                setScaleEnabled(true)
                setPinchZoom(true)
            }
        },
        update = { chart ->
            val entries = sessionList.mapIndexed { index, session ->
                Entry(index.toFloat(), session.score.toFloat())
            }
            val dataSet = LineDataSet(entries, "Scores")
            dataSet.color = Color.BLUE
            dataSet.valueTextColor = Color.BLACK
            chart.data = LineData(dataSet)
            chart.invalidate()
        }
    )
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\MainActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.animation.togetherWith
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import com.example.csepractice.viewmodel.PracticeViewModel
import kotlinx.coroutines.delay
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)  // Default to light mode
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        AppTopBar(onSettingsClick = {
                            val intent = Intent(this@MainActivity, SettingsActivity::class.java)
                            startActivity(intent)
                        })
                    }
                ) { innerPadding ->
                    PracticeScreen(Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppTopBar(onSettingsClick: () -> Unit) {
    TopAppBar(
        title = { Text("CSE Practice") },
        actions = {
            IconButton(onClick = onSettingsClick) {
                Icon(Icons.Default.Settings, contentDescription = "Settings")
            }
        }
    )
}

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun PracticeScreen(modifier: Modifier = Modifier, viewModel: PracticeViewModel = viewModel()) {
    val questions by viewModel.questions.collectAsState()
    val currentIndex by viewModel.currentIndex.collectAsState()
    val selectedAnswers by viewModel.selectedAnswers.collectAsState()
    val score by viewModel.score.collectAsState()
    val sessions by viewModel.sessions.collectAsState(emptyList())
    val selectedCategories by viewModel.selectedCategories.collectAsState()
    val categories by viewModel.categories.collectAsState(emptyList())  // Dynamic
    val context = LocalContext.current

    val visible = remember { mutableStateOf(false) }
    val numQuestions = remember { mutableIntStateOf(10) }  // Default 10
    val isSelecting = remember { mutableStateOf(true) }  // New: Control selector vs loading

    LaunchedEffect(Unit) {
        delay(300)
        visible.value = true
    }

    AnimatedVisibility(visible = visible.value, enter = fadeIn()) {
        if (questions.isEmpty() && score == 0) {  // Selector or loading
            if (categories.isEmpty()) {
                CircularProgressIndicator()  // Loading categories
            } else if (isSelecting.value) {  // Show selector until button press
                Column(
                    modifier = modifier.fillMaxSize().padding(16.dp),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.Start  // Left-align for better readability
                ) {
                    Text("Select Categories:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    categories.forEach { category ->
                        Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(vertical = 4.dp)) {
                            Checkbox(
                                checked = selectedCategories.contains(category),
                                onCheckedChange = { viewModel.toggleCategory(category) }
                            )
                            Spacer(modifier = Modifier.width(8.dp))  // Space between checkbox and text
                            Text(category)
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Text("Number of Questions:", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        listOf(10, 20, 30).forEach { num ->
                            RadioButton(selected = numQuestions.intValue == num, onClick = { numQuestions.intValue = num })
                            Text("$num", modifier = Modifier.padding(end = 16.dp))  // Space between options
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(onClick = {
                        isSelecting.value = false
                        viewModel.startPractice(numQuestions.intValue)
                    }, modifier = Modifier.align(Alignment.CenterHorizontally)) {
                        Text("Start Practice")
                    }
                }
            } else {
                Column(modifier = modifier.fillMaxSize(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally) {
                    CircularProgressIndicator(color = MaterialTheme.colorScheme.primary)
                    Text("Loading questions...", modifier = Modifier.padding(top = 16.dp))
                }
            }
        } else if (score > 0) {
            val scrollState = rememberScrollState()
            Column(
                modifier = modifier.fillMaxSize().verticalScroll(scrollState).padding(16.dp),
                verticalArrangement = Arrangement.Center
            ) {
                Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                    Column(modifier = Modifier.padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Your score: $score%", style = MaterialTheme.typography.headlineMedium, color = MaterialTheme.colorScheme.primary)
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            viewModel.resetForNewSession()
                            isSelecting.value = true  // Reset to show selector on new session
                        }) {
                            Icon(Icons.Default.Refresh, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                            Text("Start New Practice")
                        }
                        Spacer(modifier = Modifier.height(8.dp))
                        Button(onClick = { viewModel.practiceWeakAreas() }) {
                            Text("Practice Weak Areas")
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Text("Progress History:", style = MaterialTheme.typography.titleMedium)
                Column {
                    Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                        Text("Date", modifier = Modifier.weight(2f), fontWeight = FontWeight.Bold)
                        Text("Score", modifier = Modifier.weight(1f), fontWeight = FontWeight.Bold)
                    }
                    sessions.forEach { session ->
                        val formattedDate = SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(Date(session.date))
                        Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
                            Text(formattedDate, modifier = Modifier.weight(2f))
                            Text("${session.score}%", modifier = Modifier.weight(1f))
                        }
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                val averageScore = if (sessions.isNotEmpty()) {
                    sessions.map { it.score }.average().toInt()
                } else {
                    0
                }
                Text(
                    text = "Average Score: $averageScore%",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text("Category Averages:", style = MaterialTheme.typography.titleMedium)
                categories.forEach { cat ->
                    val avg by viewModel.getAverageForCategory(cat).collectAsState(0.0)
                    Text("$cat: ${avg.toInt()}%")
                }
                Spacer(modifier = Modifier.height(16.dp))
                Button(
                    onClick = {
                        val intent = Intent(context, ChartActivity::class.java)
                        context.startActivity(intent)
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary),
                    modifier = Modifier.fillMaxWidth().wrapContentWidth(Alignment.CenterHorizontally)
                ) {
                    Text("View Progress Chart", color = Color.White)
                }
            }
        } else {
            val currentQuestion = questions[currentIndex]
            val isCurrentAnswered = selectedAnswers.containsKey(currentIndex)
            Column(modifier = modifier.fillMaxSize().padding(16.dp)) {
                AnimatedContent(
                    targetState = currentIndex,
                    transitionSpec = {
                        if (targetState > initialState) {
                            slideInHorizontally { width -> width } togetherWith slideOutHorizontally { width -> -width }
                        } else {
                            slideInHorizontally { width -> -width } togetherWith slideOutHorizontally { width -> width }
                        }
                    },
                    label = "questionAnimation"
                ) { index ->
                    val question = questions[index]
                    Card(modifier = Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(8.dp), colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text(question.text, style = MaterialTheme.typography.titleLarge, color = MaterialTheme.colorScheme.primary)
                            listOf(question.optionA, question.optionB, question.optionC, question.optionD).forEachIndexed { optIndex, option ->
                                Row(verticalAlignment = Alignment.CenterVertically) {
                                    RadioButton(
                                        selected = selectedAnswers[index] == optIndex,
                                        onClick = { viewModel.selectAnswer(index, optIndex) }
                                    )
                                    Text(option)
                                }
                            }
                        }
                    }
                }
                Spacer(modifier = Modifier.height(32.dp))
                Row(
                    modifier = Modifier.fillMaxWidth().wrapContentHeight(),
                    horizontalArrangement = Arrangement.Center
                ) {
                    Button(onClick = { viewModel.previousQuestion() }, enabled = currentIndex > 0) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = null, modifier = Modifier.padding(end = 8.dp))
                        Text("Previous")
                    }
                    Spacer(modifier = Modifier.width(16.dp))
                    Button(onClick = { viewModel.nextQuestion() }, enabled = currentIndex < questions.size - 1 && isCurrentAnswered) {
                        Text("Next")
                        Icon(Icons.AutoMirrored.Filled.ArrowForward, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                if (currentIndex == questions.size - 1) {
                    Button(
                        onClick = {
                            Toast.makeText(context, "Submit pressed!", Toast.LENGTH_SHORT).show()
                            viewModel.calculateScore()
                        },
                        enabled = isCurrentAnswered,
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    ) {
                        Text("Submit")
                        Icon(Icons.Filled.Check, contentDescription = null, modifier = Modifier.padding(start = 8.dp))
                    }
                }
            }
        }
    }
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\SettingsActivity.kt -----

package com.example.csepractice

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.csepractice.repository.QuestionRepository
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import android.widget.Toast

class SettingsActivity : ComponentActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        setContent {
            CSEPracticeAppTheme(darkTheme = isDarkMode) {
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    topBar = {
                        TopAppBar(
                            title = { Text("Settings") },
                            navigationIcon = {
                                IconButton(onClick = { finish() }) {
                                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                }
                            }
                        )
                    }
                ) { innerPadding ->
                    SettingsScreen(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@Composable
fun SettingsScreen(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val prefs = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    var isDarkMode by remember { mutableStateOf(prefs.getBoolean("dark_mode", false)) }
    var colorScheme by remember { mutableStateOf(prefs.getString("color_scheme", "Default") ?: "Default") }

    Column(
        modifier = modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Settings", style = MaterialTheme.typography.headlineMedium)

        Spacer(modifier = Modifier.height(32.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            Text("Dark Mode", modifier = Modifier.padding(end = 16.dp))
            Switch(
                checked = isDarkMode,
                onCheckedChange = { enabled ->
                    isDarkMode = enabled
                    with(prefs.edit()) {
                        putBoolean("dark_mode", enabled)
                        apply()
                    }
                }
            )
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text("Color Scheme:")
        Row {
            listOf("Default", "Blue", "Green").forEach { scheme ->
                RadioButton(selected = colorScheme == scheme, onClick = {
                    colorScheme = scheme
                    with(prefs.edit()) {
                        putString("color_scheme", scheme)
                        apply()
                    }
                })
                Text(scheme)
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Button(onClick = {
            val repository = QuestionRepository(context)
            CoroutineScope(Dispatchers.IO).launch {
                repository.clearAllSessions()
            }
            Toast.makeText(context, "History reset!", Toast.LENGTH_SHORT).show()
        }) {
            Text("Reset Progress History")
        }
    }
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\SplashActivity.kt -----

package com.example.csepractice

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.csepractice.ui.theme.CSEPracticeAppTheme
import kotlinx.coroutines.delay

class SplashActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            CSEPracticeAppTheme {
                SplashScreen {
                    startActivity(Intent(this@SplashActivity, MainActivity::class.java))
                    finish()
                }
            }
        }
    }
}

@Composable
fun SplashScreen(onTimeout: () -> Unit) {
    LaunchedEffect(Unit) {
        delay(3000)  // 3 seconds
        onTimeout()
    }
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Welcome to CSE Practice App",
            style = MaterialTheme.typography.headlineLarge,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 16.dp)
        )
        Text(
            text = "Inspired by Pearl Jynne Celestino\nBy PJC Inc",
            style = MaterialTheme.typography.bodyMedium,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 32.dp)
        )
        Text("Quick Tips:", style = MaterialTheme.typography.titleMedium)
        Text("1. Practice daily for best results!")
        Text("2. Focus on weak categories using the button.")
        Text("3. Review explanations after tests.")
        Text("4. Aim for 80%+ to pass CSE!")
    }
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\data\AppDatabase.kt -----

package com.example.csepractice.data

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase

@Database(entities = [Question::class, PracticeSession::class], version = 5, exportSchema = true)
abstract class AppDatabase : RoomDatabase() {
    abstract fun questionDao(): QuestionDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "cse_database"
                ).addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_4_5)
                    .fallbackToDestructiveMigration()  // For dev, removes data on mismatch
                    .build()
                INSTANCE = instance
                instance
            }
        }

        val MIGRATION_1_2 = object : Migration(1, 2) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasCategory = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "category") {
                            hasCategory = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasCategory) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN category TEXT NOT NULL DEFAULT ''")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasCategories = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "categories") {
                            hasCategories = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasCategories) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN categories TEXT NOT NULL DEFAULT ''")
                }
            }
        }

        val MIGRATION_2_3 = object : Migration(2, 3) {
            override fun migrate(database: SupportSQLiteDatabase) {
                val cursorQuestions = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursorQuestions.getColumnIndex("name")
                if (cursorQuestions.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursorQuestions.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursorQuestions.moveToNext())
                }
                cursorQuestions.close()
                if (!hasDifficulty) {
                    database.execSQL("ALTER TABLE questions ADD COLUMN difficulty TEXT NOT NULL DEFAULT 'Medium'")
                }

                val cursorSessions = database.query("PRAGMA table_info(practice_sessions)")
                var hasTimeTaken = false
                val nameIndexSessions = cursorSessions.getColumnIndex("name")
                if (cursorSessions.moveToFirst()) {
                    do {
                        if (nameIndexSessions >= 0 && cursorSessions.getString(nameIndexSessions) == "timeTaken") {
                            hasTimeTaken = true
                            break
                        }
                    } while (cursorSessions.moveToNext())
                }
                cursorSessions.close()
                if (!hasTimeTaken) {
                    database.execSQL("ALTER TABLE practice_sessions ADD COLUMN timeTaken LONG NOT NULL DEFAULT 0")
                }
            }
        }

        val MIGRATION_3_4 = object : Migration(3, 4) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Empty migration to force version bump and fallback if needed
            }
        }

        val MIGRATION_4_5 = object : Migration(4, 5) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Check if 'difficulty' exists
                val cursor = database.query("PRAGMA table_info(questions)")
                var hasDifficulty = false
                val nameIndex = cursor.getColumnIndex("name")
                if (cursor.moveToFirst()) {
                    do {
                        if (nameIndex >= 0 && cursor.getString(nameIndex) == "difficulty") {
                            hasDifficulty = true
                            break
                        }
                    } while (cursor.moveToNext())
                }
                cursor.close()

                if (hasDifficulty) {
                    // Create temp table with current schema (no difficulty)
                    database.execSQL("""
                        CREATE TABLE questions_temp (
                            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                            text TEXT NOT NULL DEFAULT '',
                            optionA TEXT NOT NULL DEFAULT '',
                            optionB TEXT NOT NULL DEFAULT '',
                            optionC TEXT NOT NULL DEFAULT '',
                            optionD TEXT NOT NULL DEFAULT '',
                            correctAnswer TEXT NOT NULL DEFAULT '',
                            category TEXT NOT NULL DEFAULT ''
                        )
                    """.trimIndent())

                    // Copy data, excluding difficulty
                    database.execSQL("""
                        INSERT INTO questions_temp (id, text, optionA, optionB, optionC, optionD, correctAnswer, category)
                        SELECT id, text, optionA, optionB, optionC, optionD, correctAnswer, category FROM questions
                    """.trimIndent())

                    // Drop old table
                    database.execSQL("DROP TABLE questions")

                    // Rename temp to original
                    database.execSQL("ALTER TABLE questions_temp RENAME TO questions")
                }
            }
        }
    }
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\data\PracticeSession.kt -----

// app/src/main/java/com/example/csepractice/data/PracticeSession.kt
package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "practice_sessions")
data class PracticeSession(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val date: Long = System.currentTimeMillis(),
    val score: Int,  // e.g., 80 (percentage)
    val correctCount: Int,
    val totalQuestions: Int,
    val categories: String = "",  // Comma-separated or "All"
    val timeTaken: Long = 0  // Total time in milliseconds
)

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\data\Question.kt -----

package com.example.csepractice.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "questions")
data class Question(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val text: String = "",
    val optionA: String = "",
    val optionB: String = "",
    val optionC: String = "",
    val optionD: String = "",
    val correctAnswer: String = "",
    val category: String = ""
)

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\data\QuestionDao.kt -----

package com.example.csepractice.data

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface QuestionDao {
    @Query("SELECT * FROM questions ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestions(count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category = :category ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategory(category: String, count: Int): Flow<List<Question>>

    @Query("SELECT * FROM questions WHERE category IN (:categories) ORDER BY RANDOM() LIMIT :count")
    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>>

    @Query("SELECT DISTINCT category FROM questions")
    fun getCategories(): Flow<List<String>>  // New for dynamic categories

    @Query("SELECT AVG(score) FROM practice_sessions WHERE categories LIKE '%' || :category || '%'")
    fun getAvgByCategory(category: String): Flow<Double>  // New for category avg

    @Insert
    suspend fun insertQuestions(questions: List<Question>)

    @Insert
    suspend fun insertSession(session: PracticeSession)

    @Query("SELECT * FROM practice_sessions ORDER BY date DESC")
    fun getAllSessions(): Flow<List<PracticeSession>>

    @Query("DELETE FROM practice_sessions")
    suspend fun clearAllSessions()
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\repository\QuestionRepository.kt -----

package com.example.csepractice.repository

import android.content.Context
import com.example.csepractice.data.AppDatabase
import com.example.csepractice.data.Question
import com.example.csepractice.data.PracticeSession
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull

class QuestionRepository(private val context: Context) {
    val dao = AppDatabase.getDatabase(context).questionDao()

    fun getRandomQuestionsByCategories(categories: List<String>, count: Int): Flow<List<Question>> =
        dao.getRandomQuestionsByCategories(categories, count)

    fun getRandomQuestions(count: Int): Flow<List<Question>> = dao.getRandomQuestions(count)

    suspend fun insertSession(session: PracticeSession) = dao.insertSession(session)

    fun getAllSessions(): Flow<List<PracticeSession>> = dao.getAllSessions()

    suspend fun clearAllSessions() {
        dao.clearAllSessions()
    }

    suspend fun seedQuestionsIfEmpty() {
        // Check if DB is empty
        val questionsFlow = dao.getRandomQuestions(1)
        val questions = questionsFlow.firstOrNull()
        if (questions.isNullOrEmpty()) {
            val json = context.assets.open("questions.json").bufferedReader().use { it.readText() }
            val type = object : TypeToken<List<Question>>() {}.type
            val questions: List<Question> = Gson().fromJson(json, type)
            dao.insertQuestions(questions)
        }
    }
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\ui\theme\Color.kt -----

package com.example.csepractice.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

// New for schemes
val Blue80 = Color(0xFF80D8FF)
val BlueGrey80 = Color(0xFFB3E5FC)
val Blue40 = Color(0xFF0277BD)
val BlueGrey40 = Color(0xFF81D4FA)

val Green80 = Color(0xFFCCFF90)
val GreenGrey80 = Color(0xFFE0F2F1)
val Green40 = Color(0xFF558B2F)
val GreenGrey40 = Color(0xFFA5D6A7)

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\ui\theme\Theme.kt -----

package com.example.csepractice.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40
)

private val BlueColorScheme = lightColorScheme(
    primary = Blue40,
    secondary = BlueGrey40,
    tertiary = Blue80
)

private val GreenColorScheme = lightColorScheme(
    primary = Green40,
    secondary = GreenGrey40,
    tertiary = Green80
)

@Composable
fun CSEPracticeAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val prefs = LocalContext.current.getSharedPreferences("app_prefs", android.content.Context.MODE_PRIVATE)
    val scheme = prefs.getString("color_scheme", "Default") ?: "Default"

    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        scheme == "Blue" -> BlueColorScheme
        scheme == "Green" -> GreenColorScheme
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = androidx.compose.material3.Typography(),  // Fully qualify to avoid conflict
        content = content
    )
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\utils\ListConverters.kt -----

package com.example.csepractice.utils

import androidx.room.TypeConverter
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class ListConverters {
    private val gson = Gson()

    @TypeConverter
    fun fromStringList(value: String): List<String> {
        val listType = object : TypeToken<List<String>>() {}.type
        return gson.fromJson(value, listType)
    }

    @TypeConverter
    fun toStringList(list: List<String>): String {
        return gson.toJson(list)
    }
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\java\com\example\csepractice\viewmodel\PracticeViewModel.kt -----

package com.example.csepractice.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.csepractice.data.PracticeSession
import com.example.csepractice.data.Question
import com.example.csepractice.repository.QuestionRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlin.system.measureTimeMillis

class PracticeViewModel(application: Application) : AndroidViewModel(application) {
    private val repository = QuestionRepository(application)
    private val dao = repository.dao  // For new queries

    private val _questions = MutableStateFlow<List<Question>>(emptyList())
    val questions: StateFlow<List<Question>> = _questions.asStateFlow()

    private val _currentIndex = MutableStateFlow(0)
    val currentIndex: StateFlow<Int> = _currentIndex.asStateFlow()

    private val _selectedAnswers = MutableStateFlow<Map<Int, Int>>(emptyMap())
    val selectedAnswers: StateFlow<Map<Int, Int>> = _selectedAnswers.asStateFlow()

    private val _score = MutableStateFlow(0)
    val score: StateFlow<Int> = _score.asStateFlow()

    private val _selectedCategories = MutableStateFlow<List<String>>(emptyList())
    val selectedCategories: StateFlow<List<String>> = _selectedCategories.asStateFlow()

    val sessions: Flow<List<PracticeSession>> = repository.getAllSessions()

    val categories: Flow<List<String>> = dao.getCategories()  // New dynamic categories

    init {
        viewModelScope.launch {
            repository.seedQuestionsIfEmpty()
            // No auto-load; wait for startPractice
        }
    }

    fun toggleCategory(category: String) {
        val current = _selectedCategories.value.toMutableList()
        if (current.contains(category)) {
            current.remove(category)
        } else {
            current.add(category)
        }
        _selectedCategories.value = current
    }

    fun startPractice(numQuestions: Int) {
        val categories = _selectedCategories.value
        if (categories.isEmpty()) {
            loadAllQuestions(numQuestions)
        } else {
            loadQuestionsForCategories(categories, numQuestions)
        }
    }

    fun practiceWeakAreas(threshold: Double = 70.0) {
        viewModelScope.launch {
            val allCats = categories.first()  // Get list once
            val weak = mutableListOf<String>()
            for (cat in allCats) {
                val avg = getAverageForCategory(cat).first()  // Get avg once
                if (avg < threshold) {
                    weak.add(cat)
                }
            }
            _selectedCategories.value = weak
            if (weak.isNotEmpty()) {
                startPractice(10)  // Default to 10
            }  // Else, perhaps toast "No weak areas!"
        }
    }

    private fun loadQuestionsForCategories(categories: List<String>, count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestionsByCategories(categories, count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    private fun loadAllQuestions(count: Int) {
        viewModelScope.launch {
            val questionsFlow = repository.getRandomQuestions(count)
            questionsFlow.collect { loadedQuestions ->
                _questions.value = loadedQuestions
            }
        }
    }

    fun getAverageForCategory(category: String): Flow<Double> = dao.getAvgByCategory(category)  // New

    fun selectAnswer(questionIndex: Int, optionIndex: Int) {
        _selectedAnswers.value = _selectedAnswers.value.toMutableMap().apply {
            this[questionIndex] = optionIndex
        }
    }

    fun nextQuestion() {
        if (_currentIndex.value < _questions.value.size - 1) {
            _currentIndex.value += 1
        }
    }

    fun previousQuestion() {
        if (_currentIndex.value > 0) {
            _currentIndex.value -= 1
        }
    }

    fun calculateScore() {
        val total = _questions.value.size
        var correct = 0
        _questions.value.forEachIndexed { index, question ->
            val selected = _selectedAnswers.value[index]
            val correctIndex = "ABCD".indexOf(question.correctAnswer)
            if (selected == correctIndex) {
                correct++
            }
        }
        _score.value = if (total > 0) (correct * 100) / total else 0
        viewModelScope.launch {
            repository.insertSession(
                PracticeSession(
                    score = _score.value,
                    correctCount = correct,
                    totalQuestions = total,
                    categories = _selectedCategories.value.joinToString(",")  // Save categories
                )
            )
        }
    }

    fun resetForNewSession() {
        _questions.value = emptyList()
        _currentIndex.value = 0
        _selectedAnswers.value = emptyMap()
        _score.value = 0
        _selectedCategories.value = emptyList()
    }
}

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\res\drawable\ic_launcher_background.xml -----

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\res\drawable\ic_launcher_foreground.xml -----

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\res\mipmap-anydpi\ic_launcher.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\res\mipmap-anydpi\ic_launcher_round.xml -----

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\res\values\colors.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\res\values\strings.xml -----

<resources>
    <string name="app_name">CSEPracticeApp</string>
</resources>

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\res\values\themes.xml -----

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.CSEPracticeApp" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\res\xml\backup_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\main\res\xml\data_extraction_rules.xml -----

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

----- End of File -----

----- File: shared_project_files\shared_project_files\app\src\test\java\com\example\csepractice\ExampleUnitTest.kt -----

package com.example.csepractice

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

----- End of File -----

----- File: shared_project_files\shared_project_files\gradle\libs.versions.toml -----

[versions]
agp = "8.13.0"
kotlin = "2.0.21"
coreKtx = "1.10.1"
junit = "4.13.2"
junitVersion = "1.1.5"
espressoCore = "3.5.1"
lifecycleRuntimeKtx = "2.6.1"
activityCompose = "1.8.0"
composeBom = "2024.09.00"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-compose-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-compose-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-compose-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-compose-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-compose-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-compose-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-compose-material3 = { group = "androidx.compose.material3", name = "material3" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }



----- End of File -----

